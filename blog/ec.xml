<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Developing on Staxmanade]]></title>
    <link href="http://staxmanade.com"/>
    <updated>2014-05-24T20:27:55Z</updated>
    <id>http://staxmanade.com</id>
    <author>
        <name>Jason Jarrett</name>
        <uri>http://staxmanade.com/about</uri>
    </author>
    <link rel="alternate" href="http://staxmanade.com"/>
    <link rel="self" href="/blog/ec.xml"/>
    <rights>Copyright (C) 2008-2014 Jason Jarrett</rights>
    <generator>Feed for Node.js</generator>
    <entry>
        <title type="html"><![CDATA[Introducing CommandAllThings]]></title>
        <id>http://staxmanade.com/2014/05/introducing-commandallthings/</id>
        <link href="http://staxmanade.com/2014/05/introducing-commandallthings/">
        </link>
        <updated>2014-05-24T20:27:55Z</updated>
        <summary type="html"><![CDATA[Introducing CommandAllThings. Productivity scripts that allow you to easily type the wrong task running program like (grunt, gulpjs, rake, etc) and it will re-route that command to the current project's task runner program.]]></summary>
        <content type="html"><![CDATA[<p>I&#39;d like to introduce a simple little tool/(set of scripts) I threw together last weekend called <a href="https://github.com/staxmanade/CommandAllThings">CommandAllThings</a>.</p>
<h1 id="some-background">Some background</h1>
<p>Do you use any command line build tools like <a href="http://gulpjs.com">GulpJS</a>, <a href="http://gruntjs">GruntJS</a>, <a href="http://rake.rubyforge.org/">Rake</a>, etc?</p>
<p>I leverage these tools in many projects, both at work and on my own projects. I recently noticed that the muscle memory I&#39;ve developed was slowing me down as I switch between projects and inadvertently use the wrong tool in the wrong project.</p>
<p>When working on one project all day and typing <code>rake test</code> throughout the day, then switching to another project not using <code>rake</code> I found myself still typing <code>rake test</code> even though I needed to type <code>gulp test</code>, or <code>grunt build</code>. This really messes with my flow. All I wanted to do was <code>test</code> or <code>build</code> the current project.</p>
<p>So I created <a href="https://github.com/staxmanade/CommandAllThings">CommandAllThings</a>.</p>
<h1 id="what-is-it-">What is it?</h1>
<p>In short, it&#39;s a very simple abstraction on top of your usual task runners like <a href="http://gulpjs.com">GulpJS</a>, <a href="http://gruntjs">GruntJS</a>, <a href="http://rake.rubyforge.org/">rake</a>, etc that allows you to accidentally type the wrong tool and still accomplish the desired task with the right tool.</p>
<p>By using aliases in either PowerShell or Bash we can route, <code>rake</code>, <code>gulp</code>, <code>grunt</code>, etc to <code>CommandAllThings</code> which will inspect the current directory, determine the correct tool and execute your task(s) with the correct tool.</p>
<p>This is great. Now when I type in the wrong command <code>rake test</code> in a <code>gulp</code> project, I don&#39;t get slapped in the face with an error saying &quot;cannot find a rakefile.&quot; Instead I continue on my way like I knew what I was doing.</p>
<p><img src="https://raw.githubusercontent.com/staxmanade/CommandAllThings/master/assets/SampleRakeCommand.png" alt="example screenshot of commandAllThings"></p>
<h1 id="does-it-only-work-on-windows-or-on-the-mac-">Does it only work on Windows or on the Mac?</h1>
<p>At the moment it works on both. </p>
<ul>
<li>For Windows I have an implementation in Powershell. </li>
<li>For the Mac you can alias to a Bash script.</li>
</ul>
<h1 id="download-at-github-">Download at GitHub!</h1>
<p><a href="https://github.com/staxmanade/CommandAllThings">Check it out!</a></p>
<h1 id="what-s-next-">What&#39;s next?</h1>
<p>I&#39;d like to look at adding other tools to the list. You can check out the project for other task runners I know about. And if you have any thoughts on how to detect the other types, drop me a note in the issues (or consider sending over a pull request).</p>
<p>I&#39;d also love to get some feedback on how to best or more easily get this into peoples&#39;s development environment. For now it&#39;s pretty manual and since it&#39;s all about your profile, a bit personal, so probably a good thing that it&#39;s not automatically installed.</p>
<p>Happy Commanding!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to compile plain *.js (JavaScript) files with the TypeScript Compiler]]></title>
        <id>http://staxmanade.com/2014/05/how-to-compile-plain-star-dot-js-javascript-files-with-the-typescript-compiler/</id>
        <link href="http://staxmanade.com/2014/05/how-to-compile-plain-star-dot-js-javascript-files-with-the-typescript-compiler/">
        </link>
        <updated>2014-05-18T17:27:29Z</updated>
        <summary type="html"><![CDATA[How to conver the tsc compiler to easily prototype porting a project to TypeScript by first using the tsc compiler to compile existing javascript.]]></summary>
        <content type="html"><![CDATA[<h1 id="challenge">Challenge</h1>
<p>Let&#39;s say you&#39;ve been tasked with researching what porting your existing JavaScript solution to <a href="http://typescriptlang.com">TypeScript</a> may look like or maybe you&#39;re curious what this process would be like before you propose it to a lead or project manager.</p>
<p>The first hurdle you may stumble upon is - the <code>tsc</code> (TypeScript compiler) requires all of your files end with a <code>.ts</code> file extension. This can make quickly prototyping a port challenging. To get an idea of what a port to TypeScript will look like you don&#39;t want to deal with first renaming all of your files to .ts. Especially since there are probably files you want to not rename to TypeScript (like jQuery or AngularJS etc.</p>
<p>And since:</p>
<blockquote>
<p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.</p>
</blockquote>
<p>it seems reasonable that you could acquire the benefits of the TypeScript compiler for even your existing JavaScript codebase.</p>
<h1 id="challenge-accepted-">Challenge Accepted.</h1>
<p>The TypeScript compiler is open source, so let&#39;s take a dive into the compiler to see if this is something we can work around...</p>
<h3 id="what-are-the-steps-we-need-to-accomplish-to-make-the-compiler-accept-plain-js-files-">What are the steps we need to accomplish to make the compiler accept plain <code>.js</code> files?</h3>
<ol>
<li>Get It</li>
<li>Copy it</li>
<li>Hack it</li>
<li>Use it</li>
</ol>
<h2 id="get-it">Get it</h2>
<p>Before we can get too far, let&#39;s first install the compiler onto our system.</p>
<p>I&#39;ll use <a href="http://npmjs.org">npm</a> to install <a href="https://www.npmjs.org/package/typescript">typescript</a></p>
<pre><code>npm install -g typescript
</code></pre><p>Note the <code>-g</code> here tells <code>npm</code> to install typescript globally. This adds the TypeScript compiler to your <code>PATH</code> so you can get right at <code>tsc</code>&#39;ing your TypeScript code.</p>
<h2 id="copy-it">Copy it</h2>
<p>We probably don&#39;t want to modify the globally installed version of <code>tsc</code> so we&#39;ll create a copy on our system to play around with. But, before we can do that we need to find where it is.</p>
<p>If on Windows or Mac</p>
<pre><code>where tsc
</code></pre><blockquote>
<p>NOTE: if you&#39;re using the PowerShell console on windows be sure to type out <code>where.exe tsc</code> because <code>where</code> is aliased to <code>Where-Object</code> in PowerShell which won&#39;t help us out in this case.</p>
</blockquote>
<p>Once you&#39;ve found the path to your version of <code>tsc</code></p>
<p>Mine was in</p>
<ul>
<li><code>C:\Users\jason\AppData\Roaming\npm\tsc</code></li>
<li><code>C:\Users\jason\AppData\Roaming\npm\tsc.cmd</code></li>
</ul>
<p>Look at the contents of the <code>tsc.cmd</code> for Windows and <code>tsc</code> for non Windows machines. You&#39;ll notice that they are essentially executing <code>node.exe</code> passing in an argument to another <code>tsc</code> file in the <code>node_modules</code> path.</p>
<p>Take the two <code>tsc</code> and <code>tsc.cmd</code> files, copy them into a working folder <code>MyJSCompiler</code> and rename them. I named mine <code>jsc</code> <a href="https://www.youtube.com/watch?v=iDOhFIX3sWE">and he shall be my squishy</a>. Then take the contents of the <code>node_modules/typescript/*</code> folder (and path structure) and copy them to your working directory.</p>
<p>When you&#39;re done you should have a directory that looks something like this</p>
<pre><code>
﻿﻿--MyJSCompiler
  |   jsc                 &lt;-- notice the re-named file from tsc -&gt; jsc
  |   jsc.cmd             &lt;-- notice the re-named file from tsc.cmd -&gt; jsc.cmd
  |   
  ----node_modules
      ----.bin
      |       tsc
      |       tsc.cmd
      |       
      ----typescript
          |   .npmignore
          |   CopyrightNotice.txt
          |   LICENSE.txt
          |   package.json
          |   README.txt
          |   ThirdPartyNoticeText.txt
          |   
          ----bin
              |   lib.d.ts
              |   tsc
              |   tsc.js
              |   typescript.js
              |   
              ----resources
                  |   diagnosticMessages.generated.json
                  |   
                  ----(*.json files excluded for brevity)
</code></pre><p>Now you should be able to call your local version of <code>jsc</code> at the command line.</p>
<h2 id="hack-it">Hack it</h2>
<p>Since we have a local version we can hack on now, let&#39;s find out what needs to change. Thanks to <a href="http://stackoverflow.com/users/1704166/ryan-cavanaugh">Ryan</a> for already giving us a clue <a href="http://stackoverflow.com/questions/17533301/can-i-compile-a-js-file-with-the-typescript-compiler-without-renaming-it-to-a/17533590#17533590">here</a>.</p>
<p>Open up the <code>node_modules/typescript/bin/tsc.js</code> file (in our working directory from the previous step) and apply the below diff/changes.</p>
<pre><code class="lang-diff">     function isTSFile(fname) {
-        return isFileOfExtension(fname, &quot;.ts&quot;);
+        return isFileOfExtension(fname, &quot;.ts&quot;) || isFileOfExtension(fname, &quot;.js&quot;);
     }
</code></pre>
<p>We&#39;ve now implemented a small tweak to the TypeScript compiler that allows us to compile plain JavaScript files.</p>
<h2 id="use-it">Use it</h2>
<p>I won&#39;t be going into how to use the <code>tsc</code> compiler in this post, but you can now call the compiler passing along your <code>*.js</code> files and begin learning what changes you will need to make to your existing codebase to satisfy the compiler.</p>
<p>Be sure to use the <code>--out FILE</code> or <code>--outDir DIRECTORY</code> options because if you don&#39;t the compiler will take the input javascript file and overwrite it with it&#39;s compiled version.</p>
<h1 id="-warning-i-ll-say-that-again-to-use-it-be-sure-to-use-the-out-file-or-outdir-directory-options-because-if-you-don-t-the-compiler-will-take-the-input-javascript-file-and-overwrite-the-original-with-it-s-compiled-version-">!!WARNING!! I&#39;ll say that again, to use it, be sure to use the <code>--out FILE</code> or <code>--outDir DIRECTORY</code> options because if you don&#39;t the compiler will take the input javascript file and overwrite the original with it&#39;s compiled version.</h1>
<p>With source control, this can potentially be a fun experiment to see what TypeScript&#39;s version looks compared to your own, but I&#39;ll leave that up to you to play with.</p>
<p>Best of luck on your port to TypeScript.</p>
]]></content>
    </entry>
</feed>