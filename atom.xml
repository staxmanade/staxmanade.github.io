<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Developing on Staxmanade]]></title>
    <link>http://staxmanade.com</link>
    <updated>2016-01-31T07:20:41Z</updated>
    <author>
        <name>Jason Jarrett</name>
        <uri>http://staxmanade.com/about</uri>
    </author>
    <link rel="alternate" href="http://staxmanade.com"/>
    <link rel="self" href="http://feeds.feedburner.com/DevelopingOnStaxmande"/>
    <rights>Copyright (C) 2008-2016 Jason Jarrett</rights>
    <generator>Feed for Node.js</generator>
    <entry>
        <title type="html"><![CDATA[Developer Friendly React Component Errors]]></title>
        <id>http://staxmanade.com/2016/01/developer-friendly-react-component-errors/</id>
        <link href="http://staxmanade.com/2016/01/developer-friendly-react-component-errors/">
        </link>
        <updated>2016-01-31T07:20:41Z</updated>
        <summary type="html"><![CDATA[One of the biggest pain points I've run into while building an application with Facebook's [React](https://facebook.github.io/react/) is when you goof...]]></summary>
        <content type="html"><![CDATA[<p>One of the biggest pain points I've run into while building an application with Facebook's <a href="https://facebook.github.io/react/">React</a> is when you goof something up and you get an error in one of the React component lifecycle methods such as <code>render</code>, <code>componentWillMount</code>, <code>componentDidUpdate</code>, etc. The biggest problem is the lack of a <a href="http://staxmanade.com/2016/01/habit-of-a-solid-developer-rapid-feedback/">feedback loop</a> because React is swallowing exceptions, so you don't see the reported error in your developer console or any global error handlers called. There's even a chance you don't know something is going wrong (yet).</p>
<p>If I google for <code>react try catch</code> the first search result hit landed me on this <a href="https://github.com/facebook/react/issues/2461">GitHub issue on error boundaries</a> (status: <code>open</code> as of this writing). There is a pull-request with what looks to be a potential work around, but until this lands and it provides enough of a solution I hope the below can help you.</p>
<p>If you read the comments of this post you'll see <a href="https://github.com/facebook/react/issues/2461#issuecomment-114155631">this helpful comment</a> where Skiano links to a <a href="https://github.com/skiano/react-safe-render/blob/feature/safe-methods/index.js">github repo</a> with a pretty good wrapper that re-writes React components so the lifecycle methods get a useful <code>try/catch</code> and can properly log errors.</p>
<p>I liked the approach provided above but since I'm working on a project that is using <a href="https://babeljs.io">BabelJS</a> and <code>ES6/7</code>, I wanted to see if I could try using the new <a href="https://github.com/wycats/javascript-decorators">ES7 Decorators</a> which Babel supports to allow tagging certain ES6 React classes with this try/catch wrapper.</p>
<p>Below is what it looks like if you end up using it.</p>
<h1>Usage with an es7 @decorator</h1>
<pre><code><span class="hljs-literal">import</span> React from <span class="hljs-string">'react'</span>;
<span class="hljs-literal">import</span> wrapReactLifecycleMethodsWithTryCatch from <span class="hljs-string">'react-component-errors'</span>

<span class="hljs-annotation">@wrapReactLifecycleMethodsWithTryCatch</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> : <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  componentDidMount(){
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">"Test error"</span>);
  }
  render(){
    <span class="hljs-keyword">return</span> &lt;div&gt;Hello&lt;/div&gt;;
  }
}
</code></pre>
<p>But you can also use this without the decorator pattern just by passing the class through the wrapper function.</p>
<h1>Usage without a decorator</h1>
<pre><code><span class="hljs-keyword">import</span> wrapReactComponentMethodsWithTryCatch from `react-log-errors.js`

<span class="hljs-keyword">var</span> MyComponent = React.createClass({
  componentDidMount: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">"Test error"</span>);
  },
  render: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> &lt;div&gt;Hello&lt;/div&gt;;
  }
});

wrapReactComponentMethodsWithTryCatch(MyComponent);
</code></pre>
<h1>How to get it?</h1>
<ul>
<li>NPM: <a href="https://www.npmjs.com/package/react-component-errors">react-component-errors</a></li>
<li>GitHub: <a href="https://github.com/staxmanade/react-component-errors">staxmanade/react-component-errors</a></li>
</ul>
<h1>NOT tested for performance...</h1>
<p>FYI: this is primarily built as a development tool and has not been performance tested. While I haven't noticed any performance issues - I wouldn't recommend sending to production as is without a deeper impact analysis.</p>
<p>Happy React Debugging!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 9 - Rapid Feedback]]></title>
        <id>http://staxmanade.com/2016/01/habit-of-a-solid-developer-rapid-feedback/</id>
        <link href="http://staxmanade.com/2016/01/habit-of-a-solid-developer-rapid-feedback/">
        </link>
        <updated>2016-01-31T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 9 - Rapid Feedback]]></summary>
        <content type="html"><![CDATA[<p>ï»¿
<div class="seriesNote">
    <p>This article is <strong>Part 9</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - <a href="/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">Update or Add Documentation while Reading Code</a>
        </li>
        <li>
            Part 6 - <a href="/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">Dig a Little Deeper</a>
        </li>
        <li>
            Part 7 - <a href="/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">Changes Should be Taken with Baby Steps</a>
        </li>
        <li>
            Part 8 - <a href="/2015/11/habit-of-a-solid-developer-podcasts/">Podcasts</a>
        </li>
        <li>
            Part 9 - (current) - Rapid Feedback
        </li>
    </ul>
</div></p>
<p>Find your feedback loop and then try to find ways to increase it's it's ability to report feedback sooner.</p>
<p>Feedback can come in many ways, and no matter what that feedback loop is, finding ways to increase it's ability to get you feedback sooner is generally going to help you in the long run.</p>
<p>If you think of a typical software development lifecycle, you can find ways to improve feedback loops in nearly all levels of the process. In a aesign phase, reviewing designs with the client/steakholder is one way to get feedback. During development you can get feedback from your unit tests or compiler or even your editors, when you manually review changes made in the application, or especially code reviews with other developers. QA's main purpose is to create a solid feedback loop about quality and while it's generally a slower feedback loop than other forms feedback it is extremly important and should generally not be overlooked or ignored. Once the app is in the wild, customers give feedback and you're applications can report various types of feedback such as crashes or customer sign-up numbers.</p>
<p>You've likely heard of the idea of <a href="https://en.wikipedia.org/wiki/Fail-fast">Failing Fast</a> (if not, you should). In the end, failing fast is a great a type of feedback.</p>
<p>Try pair programming, having a partner watch for and point out silly mistakes, or propose alternative approaches. The instant feedback is hugely beneficial. Leverage the feedback of other tools such as a compiler, unit tests, or manual testing.</p>
<p>When working with a new code library or dependency, don't make assumptions about how something works, even though the <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">principle of least astonishment</a> is nice to follow, don't assume that's how it works. Prove it, test it, fail fast or gather feedback on the exercise.</p>
<p>Test assumptions and prove to yourself that the assumptions are either right or wrong. This could come down to how you expect a library function to behave for certain inputs, or this could apply to how you <strong>think</strong> the customer wanted you to implement a feature.</p>
<p>Don't wait till the product is shipped to learn that's not what your customer asked for, try and find out ways to get that feedback sooner. Send it to some early adopters or beta users.</p>
<p>No matter what area of the process you work in or with, take a step back and look at your current feedback loops, how can you inject new feedback loops or improve the speed at which existing feedback loops can reach you. Can you turn a nightly build into an hourly build or check-in build (or auto-build on file save)? Of course too much feedback can get overwhelming, so take the ones that provide the most value to you and your process and find ways to optimize them.</p>
<p>Happy Feedback!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 8 - Podcasts]]></title>
        <id>http://staxmanade.com/2015/11/habit-of-a-solid-developer-podcasts/</id>
        <link href="http://staxmanade.com/2015/11/habit-of-a-solid-developer-podcasts/">
        </link>
        <updated>2015-11-23T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 8 - Podcasts]]></summary>
        <content type="html"><![CDATA[<p>ï»¿
<div class="seriesNote">
    <p>This article is <strong>Part 8</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - <a href="/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">Update or Add Documentation while Reading Code</a>
        </li>
        <li>
            Part 6 - <a href="/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">Dig a Little Deeper</a>
        </li>
        <li>
            Part 7 - <a href="/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">Changes Should be Taken with Baby Steps</a>
        </li>
        <li>
            Part 8 - (current) - Podcasts
        </li>
        <li>
            Part 9 - <a href="/2016/01/habit-of-a-solid-developer-rapid-feedback/">Rapid Feedback</a>
        </li>
    </ul>
</div></p>
<p>One of the best investments I made into my own education in the software development field was when I convinced my boss to purchase an mp3 player (It was <a href="http://amzn.to/1FLNZGO">a Zune back in the day</a> and was perfect for the job).</p>
<p>My company didn't seem to mind spending several thousand once a year to send me to a developer conference, but in comparison, a cheap purchase of a music player that I could sync Podcasts to was the best investment my employer could have made. With almost 1.5 hours commuting in the car round-trip, I was able to soak up a large amount of technology related information each and every day. My co-workers were always wondering where and how I would coming up with the knowledge about frameworks, tools, designs and other ideas.</p>
<h1>Equipment Needed</h1>
<p>You can likely go fancy with equipment, but I keep it pretty simple. Player and <a href="http://amzn.to/1HkxC4R">earbud headphones</a>.</p>
<h3>A podcast player</h3>
<p>Since everyone is different and how they want to consume podcast often varies, I'm not going to spend time recommending hardware/apps. If you have a smartphone, you already have a great podcast player in your pocket. Just take some time and look at 3rd party podcast player apps that are in your phone's app store. If you don't have a smartphone, there are <a href="http://amzn.to/1Hky570">lots of options</a> from just about anywhere. I use my iPhone since it's always with me and I can use the <a href="https://geo.itunes.apple.com/us/app/downcast/id393858566?mt=8&amp;at=10lPYJ">Downcast</a> app which has some great features that done't come with the standard iTunes podcast player.</p>
<blockquote>
<p>Side note: I'm currently <a href="http://staxmanade.com/apps/xbox-one-podcast/development/">building a podcast player</a> with the intent of launching on Xbox One. If you have any interest come check it out...</p>
</blockquote>
<h3>Some earbud headphones</h3>
<p>With as much listening as I do, I've found having several pairs of <a href="http://amzn.to/1HkxC4R">earbud headphones</a> lying around to be ideal. I can use birthday's or xmas as a time to request new ones. You can get a pair with mic control for under $10 and can be found in many stores which makes a cheap easy gift for others to pick up for you.</p>
<p>I like to keep a couple extra pairs in the house. Sometimes I forget and one goes through the wash. They often survey the wash/dryer cycle, but when they go out it's handy to have a backup pair.</p>
<p>The earbud works well for me since I can place one in and leave the other ear open to casually listening for moments like kids or wife calling for me.</p>
<p>Be sure to pick a pair that has the mic control. There is a button on there that can be used to control the play/pause of what you're listening to. This is handy because I can setup a podcast to play, place the phone in my pocket, stick an earbud in on ear and go about my task while listening to a podcast. With the mic button if my wife wants to talk to me it's a simple click to pause the show. If you haven't given this a try, I recommend it.</p>
<h1>Choosing Podcasts</h1>
<p>There are lots of ways to decide what podcasts to listen to, but here are some approaches I find useful.</p>
<p>When I don't know what's out there on a subject, I like to browse iTunes for a search term, select a few in the area of interest, download a couple shows and give them a listen.</p>
<p>While listening to podcasts, I pay attention to other shows that are mentioned or recommended. If I like the one I'm currently listening to and they suggest I check out another podcast there's a good chance I'll like it as well.</p>
<p>Don't feel like you have to commit to the podcast, if you listen to a few shows and you don't like the format or topics discussed, don't listen to it. Unsubscribe from the ones that don't add a ton of value to either you're education or entertainment setting. I find it is also a good idea to delete episodes on topics you have no interest in, or skip ones if they're not keeping your attention.</p>
<p>There is so much good content out there that you should never feel you need to listen to something that isn't going to keep your interest.</p>
<h1>When to listen.</h1>
<p>I no longer commute 1.X hours a day since I started <a href="http://staxmanade.com/2014/12/thoughts-on-working-remotely-from-home/">working remotely</a>, but that doesn't mean I don't have time to listen to podcasts. In fact, the number of podcasts that I subscribe to (and listen to) has actually gone up since my commuter days.</p>
<h3>Time/places to consume the content.</h3>
<ol>
<li>Obviously commuting to work is a great place to listen to podcasts. Put down the crappy celebrity gossip ridden talk radio (unless you're into that sort of thing) and soak up some higher quality informative podcasts.</li>
<li>Household chores is a great time to listen. Distention got podcasts while folding laundry or putting away dishes really helps with the mundane tasks.</li>
<li>Driving to pick up kids or after dropping them off. This was funny to me, on an episode of <a href="http://www.startupsfortherestofus.com/episodes/episode-240-podcasts-for-startup-founders">Startups for the rest of us</a> Rob said:</li>
</ol>
<blockquote>
<p>And the one other thing I do is, letâs say Iâm going to go travel, from the <strong>time that I step in my car and leave my house</strong>, I have an earbud in. So I drive to the airport with an earbud in. I get out, I check in, I go through security, all with an earbud in. I wait and I get on the plane, and on the plane, maybe Iâll watch a movie, but if Iâm going to try to sleep, typically Iâll listen to podcast. So there is like hours on both ends of a flight as an example. I can churn through 30 podcast episodes as long as I delete some, Iâll skip a few or Iâll skip around, that kind of stuff. I also have an earbud in when Iâm making breakfast in the morning. I have one when Iâm making dinner in the evening, when Iâm doing dishes, when Iâm out doing yard work, when Iâm taking out the trash. Like most of my off time, when Iâm not with my kids and when Iâm kind of doing manual tasks. Even if itâs like five minutes of manual tasks, I can crank through stuff. So thatâs kind of my process. How about you? - See more at: <a href="http://www.startupsfortherestofus.com/episodes/episode-240-podcasts-for-startup-founders#sthash.RMZtrseu.dpuf">http://www.startupsfortherestofus.com/episodes/episode-240-podcasts-for-startup-founders#sthash.RMZtrseu.dpuf</a></p>
</blockquote>
<h1>Ramp up the playback speed</h1>
<p>Most good podcast players have the ability to adjust the rate of playback while listening to the audio. Don't remember my old Zune having 1.5X playback speed, but oh man, once I discovered 1.5x playback speed on my <a href="https://geo.itunes.apple.com/us/app/downcast/id393858566?mt=8&amp;at=10lPYJ">Downcast</a> app it's crazy how much content I can zip through (and still enjoy) at the faster rate.</p>
<p>It may take some getting used to the higher speeds but for me, 1.5X is just about right. I'd like to try more 1.75x but Downcast doesn't support it - it jumps up to 2X. When I try listening to 2x speed it requires I focus hard to understand what's going on and is much less of a enjoyable listening experience. I'm thinking I can get there if I train my brain to listen to it...</p>
<h1>Listening to developer related podcasts</h1>
<p>Keeping up on developer focused podcasts was where I got my start with podcasts and are still the core of my listening genre. Hearing about certain technologies multiple times on different podcasts may be just enough for me to start digging into the technology myself.</p>
<p>While I mentioned above about deleting podcasts that I have no interest in, I do enjoy the surprise episode of some technology I didn't think I'd be interested in that opens up my eyes to something I hadn't known before. Even though it may turn out I never use sed technology, at least knowing a little about it can be beneficial if I have to apply it to a problem set in the future. This way I have at least been introduced to the idea and can research it further if need be.</p>
<h1>Subscribe to other subjects</h1>
<p>If you start to become an <a href="http://staxmanade.com/about/podcasts">oversumer of podcasts like myself</a>, that's OK. Just make sure you're not consuming the same style of podcasts (in my case only development related). Try to diversify your subscriptions. While I really enjoy all my developer related podcasts and they are still core to much of my listening habits, some of my favorite podcast have nothing to do with software development. Give a look at <a href="http://staxmanade.com/about/podcasts">some that I follow</a>, ask what others are listening to, and have fun exploring all the great content that is out there.</p>
<p>Happy Listening &amp; Learning!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Testing Asynchronous Code with MochaJS and ES7 async/await]]></title>
        <id>http://staxmanade.com/2015/11/testing-asyncronous-code-with-mochajs-and-es7-async-await/</id>
        <link href="http://staxmanade.com/2015/11/testing-asyncronous-code-with-mochajs-and-es7-async-await/">
        </link>
        <updated>2015-11-12T02:59:21Z</updated>
        <summary type="html"><![CDATA[A JavaScript project I'm working on recently underwent a pretty good refactor. Many of the modules/methods in the application worked in a synchronous ...]]></summary>
        <content type="html"><![CDATA[<p>A JavaScript project I'm working on recently underwent a pretty good refactor. Many of the modules/methods in the application worked in a synchronous fashion which meant their unit tests were also generally synchronous. This was great because synchronous code is pretty much always easier to test since they're simpler and easier to reason about.</p>
<p>However, even though I new early on that I would likely have to turn a good number of my synchronous methods into asynchronous ones I tried holding off on that as long as absolutely necessary. I was in a mode of prototyping as much of the application out as possible before I wanted to be worried/thinking about asynchronous aspects of the code base.</p>
<p>Part of why I held of on this was because I was pretty confident using the new proposed ES7 <code>async/await</code> syntax to turn the sync code into async code relatively easily. While there were a few bumps along the refactor it actually went extremely well.</p>
<p>An example of one bump I ran into included replacing <code>items.forEach(item =&gt; item.doSomethingNowThatWillBecomeAsyncSoon())</code> with something that worked asynchronously and I found <a href="http://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html">this blog post</a> immensely helpful. Basically, don't try to await a <code>forEach</code> instead build a list of promises you can await.</p>
<p>Another one I ran into was dealing with async mocha tests, which is what the rest of this post is about.</p>
<p><a href="https://mochajs.org">MochaJS</a> is great because the asynchronous testing has been there from the beginning. If you've <code>done</code> (see what I did there?) any asynchronous testing with MochaJS then you already know that you can signal to Mocha an asynchronous test is <code>done</code> by calling the test's async callback method.</p>
<p>Before we look at how to test asynchronous Mocha tests leveraging the new ES 7 async/await syntax, let's first take a little journey through some of the various asynchronous testing options with Mocha.</p>
<blockquote>
<p>Note: you will see example unit tests that use the <code>expect(...).to.equal(...)</code> style assertions from <a href="http://chaijs.com/api/bdd/">ChaiJS</a>.</p>
</blockquote>
<h1>How to create an asynchronous MochaJS test?</h1>
<p>If you look at a normal synchronous test:</p>
<pre><code>it(<span class="hljs-string">"should work"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Synchronous test"</span>);
});
</code></pre>
<p>all we have to do to turn it into an asynchronous test is to add a callback function as the first parameter in the mocha test function (I like to call it <code>done</code>) like this</p>
<pre><code>it(<span class="hljs-string">"should work"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">done</span>)</span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Synchronous test"</span>);
});
</code></pre>
<p>But that's an invalid asynchronous test.</p>
<h1>Invalid basic async mocha test</h1>
<p>This first async example test we shows is invalid because the <code>done</code> callback is never called. Here's another example using <code>setTimeout</code> to simulate proper asynchronicity. This will show up in Mocha as a timeout error because we never signal back to mocha by calling our <code>done</code> method.</p>
<pre><code>it(<span class="hljs-string">"where we forget the done() callback!"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">done</span>)</span>{
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Test"</span>);
    }, <span class="hljs-number">200</span>);
});
</code></pre>
<h1>Valid basic async mocha test</h1>
<p>When we call the <code>done</code> method it tells Mocha the asynchronous work/test is complete.</p>
<pre><code>it<span class="hljs-list">(<span class="hljs-string">"Using setTimeout to simulate asynchronous code!"</span>, function<span class="hljs-list">(<span class="hljs-keyword">done</span>)</span>{
    setTimeout<span class="hljs-list">(<span class="hljs-keyword">function</span><span class="hljs-list">()</span> {
        done<span class="hljs-list">()</span><span class="hljs-comment">;</span>
    }, <span class="hljs-number">200</span>)</span><span class="hljs-comment">;</span>
})</span><span class="hljs-comment">;</span>
</code></pre>
<h1>Valid basic async mocha test (that fails)</h1>
<p>With asynchronous tests the way we tell Mocha the test failed is by passing an <code>Error</code> or <code>string</code> to the <code>done(...)</code> callback</p>
<pre><code>it<span class="hljs-list">(<span class="hljs-string">"Using setTimeout to simulate asynchronous code!"</span>, function<span class="hljs-list">(<span class="hljs-keyword">done</span>)</span>{
    setTimeout<span class="hljs-list">(<span class="hljs-keyword">function</span><span class="hljs-list">()</span> {
        done<span class="hljs-list">(<span class="hljs-keyword">new</span> Error<span class="hljs-list">(<span class="hljs-string">"This is a sample failing async test"</span>)</span>)</span><span class="hljs-comment">;</span>
    }, <span class="hljs-number">200</span>)</span><span class="hljs-comment">;</span>
})</span><span class="hljs-comment">;</span>
</code></pre>
<h1>Invalid async with Promise mocha test</h1>
<p>If you were to run the below test it would fail with a timeout error.</p>
<pre><code>it(<span class="hljs-string">"Using a Promise that resolves successfully!"</span>, function(done) {
    <span class="hljs-keyword">var</span> testPromise = new <span class="hljs-type">Promise</span>(function(resolve, reject) {
        setTimeout(function() {
            resolve(<span class="hljs-string">"Hello!"</span>);
        }, <span class="hljs-number">200</span>);
    });

    testPromise.then(function(<span class="hljs-literal">result</span>) {
        expect(<span class="hljs-literal">result</span>).to.equal(<span class="hljs-string">"Hello World!"</span>);
        done();
    }, done);
});
</code></pre>
<p>If you were to open up your developer tools you may notice an error printed to the console:</p>
<pre><code>    <span class="hljs-tag">Uncaught</span> (in promise) <span class="hljs-tag">i</span> {<span class="hljs-attribute">message</span>: <span class="hljs-string">"expected 'Hello!' to equal 'Hello World!'"</span>, <span class="hljs-attribute">showDiff</span>: true, <span class="hljs-attribute">actual</span>: <span class="hljs-string">"Hello!"</span>, <span class="hljs-attribute">expected</span>: <span class="hljs-string">"Hello World!"</span>}
</code></pre>
<p>The problem here is the <code>expect(result).to.equal(&quot;Hello World!&quot;);</code> above will fail before we can signal to Mocha via the <code>done()</code> of either an error or a completion which causes a timeout.</p>
<p>We can update the above test with a <code>try/catch</code> around our expectations that could throw exceptions so that we can report any errors to Mocha if they happened.</p>
<pre><code>it<span class="hljs-list">(<span class="hljs-string">"Using a Promise that resolves successfully with wrong expectation!"</span>, function<span class="hljs-list">(<span class="hljs-keyword">done</span>)</span> {
    var testPromise = new Promise<span class="hljs-list">(<span class="hljs-keyword">function</span><span class="hljs-list">(<span class="hljs-keyword">resolve</span>, reject)</span> {
        setTimeout<span class="hljs-list">(<span class="hljs-keyword">function</span><span class="hljs-list">()</span> {
            resolve<span class="hljs-list">(<span class="hljs-string">"Hello World!"</span>)</span><span class="hljs-comment">;</span>
        }, <span class="hljs-number">200</span>)</span><span class="hljs-comment">;</span>
    })</span><span class="hljs-comment">;</span>

    testPromise.then<span class="hljs-list">(<span class="hljs-keyword">function</span><span class="hljs-list">(<span class="hljs-keyword">result</span>)</span>{
        try {
            expect<span class="hljs-list">(<span class="hljs-keyword">result</span>)</span>.to.equal<span class="hljs-list">(<span class="hljs-string">"Hello!"</span>)</span><span class="hljs-comment">;</span>
            done<span class="hljs-list">()</span><span class="hljs-comment">;</span>
        } catch<span class="hljs-list">(<span class="hljs-keyword">err</span>)</span> {
            done<span class="hljs-list">(<span class="hljs-keyword">err</span>)</span><span class="hljs-comment">;</span>
        }
    }, done)</span><span class="hljs-comment">;</span>
})</span><span class="hljs-comment">;</span>
</code></pre>
<p>This will correctly report the error in the test.</p>
<h1>Turn what we know above into async/await.</h1>
<p>Now that we know there are some special things we need to do in our async mocha tests (<code>done</code> callbacks and <code>try/catch</code> around code that throws assertions), let's see what happens if we start to use the new ES7 async/await syntax in the language and if it can enable more readable asynchronous unit tests.</p>
<p>The beauty of the async/await syntax is we get to reduce the <code>.then(callback, done)</code>... mumbo jumbo and turn that into code that reads like it were happening synchronously. The downside of this approach is that it's not happening synchronously and we can't forget that when we're looking at code and starting to use it this way. But overall it is generally easier to reason about in this style.</p>
<p>The big changes from the above <code>Promise</code> style test and the transformed <code>async</code> test below are:</p>
<ol>
<li>Place the <code>async</code> word in front of the <code>async function(done){...</code>. This tells the system that inside of this function there may (or may not be) the use of the <code>await</code> keyword and in the end the function is turned into a <code>Promise</code> under the hood.</li>
<li>We remove the <code>.then(function(result){</code> promise work and in place use the <code>await</code> keyword to have it return the promise value assign it to <code>result</code> so after that we can run our expectations against it.</li>
<li>Notice we still have to call <code>done</code> because this is still an asynchronous test so we have to tell Mocha when it's done (even though it almost looks synchronous).</li>
</ol>
<p>If we look below, we see that we flatten out the callback promise work which can get difficult to read and follow over time. But before we get too excited there's one problem with how I converted this method. What happens if the <code>testPromise</code> were to reject? (where did that reject handling code go?).</p>
<pre><code>it(<span class="hljs-string">"Using a Promise with async/await that resolves successfully with wrong expectation!"</span>, async function(done) {
    <span class="hljs-keyword">var</span> testPromise = new <span class="hljs-type">Promise</span>(function(resolve, reject) {
        setTimeout(function() {
            resolve(<span class="hljs-string">"Hello World!"</span>);
        }, <span class="hljs-number">200</span>);
    });

    <span class="hljs-keyword">var</span> <span class="hljs-literal">result</span> = await testPromise;

    <span class="hljs-keyword">try</span> {
        expect(<span class="hljs-literal">result</span>).to.equal(<span class="hljs-string">"Hello!"</span>);
        done();
    } catch(err) {
        done(err);
    }
});
</code></pre>
<h1>Handling errors with <code>async/await</code></h1>
<p>One interesting implementation detail around async await is that exceptions and errors are handled just like you were to handle them in synchronous code using a <code>try/catch</code>.</p>
<p>So in the above test if the <code>testPromise</code> were to have <code>rejected</code> the promise or raised another type of exception we would not have seen the error in our mocha test and would have once again run into a timeout error.</p>
<p>The fix is to move the <code>try {</code> up above the <code>await testPromise;</code> so that any rejections form the asynchronous code OR errors thrown by our assertion library are caught and we can report them to Mocha.</p>
<p>Below shows the fixed (failing) but more properly setup async/await mocha unit test.</p>
<pre><code>it(<span class="hljs-string">"Using a Promise with async/await that resolves successfully with wrong expectation!"</span>, async function(done) {
    <span class="hljs-keyword">var</span> testPromise = new <span class="hljs-type">Promise</span>(function(resolve, reject) {
        setTimeout(function() {
            resolve(<span class="hljs-string">"Hello World!"</span>);
        }, <span class="hljs-number">200</span>);
    });

    <span class="hljs-keyword">try</span> {
        <span class="hljs-keyword">var</span> <span class="hljs-literal">result</span> = await testPromise;

        expect(<span class="hljs-literal">result</span>).to.equal(<span class="hljs-string">"Hello!"</span>);

        done();
    } catch(err) {
        done(err);
    }
});
</code></pre>
<h1>Removing the test boilerplate</h1>
<p>One I started seeing the pattern and use of <code>try/catch</code> boilerplate showing up in my async tests, it became apparent that there had to be a more terse approach that could help me avoid forgetting the <code>try/catch</code> needed in each async test. This was because I would often remember the <code>async/await</code> syntax changes for my async tests but would often forget the <code>try/catch</code> which often resulted in timeout errors instead of proper failures.</p>
<blockquote>
<p>another example below with the async/await and try/catch</p>
</blockquote>
<pre><code>it(<span class="hljs-string">"Using an async method with async/await!"</span>, async function(done) {
    <span class="hljs-keyword">try</span> {
        <span class="hljs-keyword">var</span> <span class="hljs-literal">result</span> = await somethingAsync();

        expect(<span class="hljs-literal">result</span>).to.equal(something);

        done();
    } catch(err) {
        done(err);
    }
});
</code></pre>
<p>So I refactored that to reduce the friction.</p>
<h2>And the mochaAsync higher order function was born</h2>
<p>This simple little guy takes an <code>async</code> function which looks like <code>async () =&gt; {...}</code>. It then returns a higher order function which is also asynchronous but has wrapped your test function in a try/catch and also takes care of calling the mocha <code>done</code> in the proper place (either after your test is asynchronously completed, or errors out).</p>
<pre><code>var mochaAsync = <span class="hljs-function"><span class="hljs-params">(fn)</span> =&gt;</span> {
    <span class="hljs-keyword">return</span> async (done) =&gt; {
        <span class="hljs-keyword">try</span> {
            await fn();
            done();
        } <span class="hljs-keyword">catch</span> (err) {
            done(err);
        }
    };
};
</code></pre>
<p>You can use it like this:</p>
<pre><code>it<span class="hljs-list">(<span class="hljs-string">"Sample async/await mocha test using wrapper"</span>, mochaAsync<span class="hljs-list">(<span class="hljs-keyword">async</span> <span class="hljs-list">()</span> =&gt; {
    var x = await someAsyncMethodToTest<span class="hljs-list">()</span><span class="hljs-comment">;</span>
    expect<span class="hljs-list">(<span class="hljs-keyword">x</span>)</span>.to.equal<span class="hljs-list">(<span class="hljs-keyword">true</span>)</span><span class="hljs-comment">;</span>
})</span>)</span><span class="hljs-comment">;</span>
</code></pre>
<p>It can also be used with the mocha <code>before</code>, <code>beforeEach</code>, <code>after</code>, <code>afterEach</code> setup/teardown methods.</p>
<pre><code>beforeEach<span class="hljs-list">(<span class="hljs-keyword">mochaAsync</span><span class="hljs-list">(<span class="hljs-keyword">async</span> <span class="hljs-list">()</span> =&gt; {
    await someLongSetupCode<span class="hljs-list">()</span><span class="hljs-comment">;</span>
})</span>)</span><span class="hljs-comment">;</span>
</code></pre>
<h1>In closing.</h1>
<p>This post may have seemed like quite a journey to get to the little poorly named <code>mochaAsync</code> helper but I hope it was helpful and I can't wait for the <code>async/await</code> syntax to become mainstream in JavaScript, but until then I'm thankful we have transpiring tools like <a href="http://babeljs.io">Babel</a> so we can take advantage of these features now. Especially in our tests...</p>
<p>Happy Testing!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 7 - Changes Should be Taken with Baby Steps]]></title>
        <id>http://staxmanade.com/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/</id>
        <link href="http://staxmanade.com/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">
        </link>
        <updated>2015-11-07T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 7 - Changes Should be Taken with Baby Steps]]></summary>
        <content type="html"><![CDATA[<p>ï»¿
<div class="seriesNote">
    <p>This article is <strong>Part 7</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - <a href="/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">Update or Add Documentation while Reading Code</a>
        </li>
        <li>
            Part 6 - <a href="/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">Dig a Little Deeper</a>
        </li>
        <li>
            Part 7 - (current) - Changes Should be Taken with Baby Steps
        </li>
        <li>
            Part 8 - <a href="/2015/11/habit-of-a-solid-developer-podcasts/">Podcasts</a>
        </li>
        <li>
            Part 9 - <a href="/2016/01/habit-of-a-solid-developer-rapid-feedback/">Rapid Feedback</a>
        </li>
    </ul>
</div></p>
<p>Have you ever made some code changes and while in the process of making those changes realize you need to change something else, which leads to changes to that thing over there and then again up there, and down here, and over there and since we're in here and I've been meaning to tweak this well... and paused to realize you forgot the original goal of why you are even looking at this module of code? No never? (well I have). <code>git reset --hard</code> and start over :)</p>
<p>If you're one who likes to apply the ol Boy Scout rule of <code>Always leave the campground cleaner than you found it</code> to your code, just don't, at lest not yet. While I'm a big fan of cleaning up those legacy areas of code that just need a good sweep up, the approach taken here needs to be handled with care. I'm also referring to code that is likely covered well with automated testing.</p>
<h1>But Why?</h1>
<p>Before you go around making a bunch of cleanup changes, fixing formatting, changing variable names, general cleanup. Accomplish a tiny part of your overall objective and commit just that change.</p>
<p>If you see other things along the way, take note and come back to them later. Or if, like me you can't help yourself, just don't check all of those changes in at once. Use something like <code>git add -p</code> to <a href="http://staxmanade.com/2014/02/segregate-your-code-commits-into-tiny/">segregate your code commits into tiny topical changes</a>.</p>
<p>If the job is to <code>rename a variable</code>, don't also <code>fix spelling, format code, extract method, etc...</code>. Save those other changes for different commits.</p>
<h3>But what if you don't know what you're planning to change?</h3>
<p>Sometimes, it's good to go off and spike a big swath of changes just to get an idea how much impact a refactor could have on the architecture or project as a whole. Prototype something to get a good picture of whether a change is possible or not or to see how many coupled items need to be adjusted along the way.</p>
<p>However, you go into it knowing you will likely just undo all of your changes all together with the goal to surface more knowledgeable and either:</p>
<p>A) determine that it is a do-able change and should or should not even be attempted in a proper fashion
B) or you've uncovered some challenges that are not easily overcome and require more thought or prior preparatory refactorings.</p>
<h1>Use TDD as a forcing mechanism to small changes</h1>
<p>TDD (Test Driven Development) is a great way to take as tiny a step as possible. With this approach, you can write a test, make it pass (consider that a change) and <a href="http://staxmanade.com/2014/02/segregate-your-code-commits-into-tiny/">possibly check it in</a> to source control. One test at a time ensures that you're taking baby steps along the way to solving the bigger problem(s).</p>
<h1>Baby Steps also when Debugging</h1>
<p>Taking baby steps is also important when debugging. Running around the codebase changing X, Y, and Z just to see if you can fix a bug will often times get you in a bigger mess than the original bug you tried to fix. Making one change at a time, verifying the bug, then the next change is quite often a better approach. So consider going slow and taking baby steps.</p>
<p>It doesn't matter if you're making project-wide architectural changes or surgical bug fixes, if you can, <strong>try to take baby steps, commit the changes and verify each change along the way</strong>. It may feel like you're going slower, but in the long haul you may actually save time.</p>
<p>Happy Baby Steps!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Base64 and save a binary audio file to local storage and play it back in the browser]]></title>
        <id>http://staxmanade.com/2015/11/how-to-base64-and-save-a-binary-audio-file-to-local-storage-and-play-it-back-in-the-browser/</id>
        <link href="http://staxmanade.com/2015/11/how-to-base64-and-save-a-binary-audio-file-to-local-storage-and-play-it-back-in-the-browser/">
        </link>
        <updated>2015-11-03T06:25:46Z</updated>
        <summary type="html"><![CDATA[I wanted to see if it was possible to save a small audio file into localStorage, read it back out and play the file. In this post I'll show you short ...]]></summary>
        <content type="html"><![CDATA[<p>I wanted to see if it was possible to save a small audio file into localStorage, read it back out and play the file. In this post I'll show you short example on how to download an audio file, save it to localStorage, read it back and set it up for playback.</p>
<h3>Disclaimers</h3>
<p><img class="right" src="/images/worksOnMyMachine.png" alt="works on my machine"></p>
<ul>
<li>This was tested in IE 10 (Win 8), Chrome 46 (Mac), and Firefox 41 (Mac); however, some of the api's and techniques used in this demo are not supported in all browsers, such as the <a href="http://caniuse.com/#feat=filereader">FileReader</a>, <a href="http://caniuse.com/#feat=blobbuilder">Blob</a>, <a href="http://caniuse.com/#feat=promises">Promise</a>, and <a href="http://caniuse.com/#feat=fetch">fetch</a> api's. The Promise and fetch api's can be polyfilled. There may be polyfills for the other api's, but I haven't researched those.</li>
<li>This post isn't going to go into much of the &quot;should I do this&quot;, as I'm sure you can come up with many reasons why you shouldn't. But I couldn't find any examples that demonstrated these steps in one place. So I prototyped the idea and am putting it here in case I do want to use this in the future sometime (or maybe you do too).</li>
<li>My tests in Chrome didn't go great if I tried to re-run the experiment multiple times. Sometimes it would work, other times it seemed to get into a bad state and always raised a MediaError event. Refreshing the page would get it working again.</li>
</ul>
<h1>First we need an audio file</h1>
<p>I don't want to point to any specific audio example since I'd feel bad if some poor soul's hosted mp3 file gets hammered (not likely) because of this example. But you just need a link to a simple, short <code>mp3</code> (or whatever audio type you're trying to test). If you look at the sample below replace <code>&lt;&lt;SampleAudioUrlHere&gt;&gt;</code> with the link to your test audio file.</p>
<h1>Won't fit in localStorage?</h1>
<p>If you're trying to save an audio file that's too large as a <code>Base64</code> encoded audio file will be larger than it's original size and we don't get very much space in <code>localStorage</code> then, ya you're using a file that's too large... Get something smaller or don't to this. Just sayin :P</p>
<h1>How does it work?</h1>
<ol>
<li>Use <a href="https://fetch.spec.whatwg.org/">fetch</a> api we can easily get at the <code>blob()</code></li>
<li>Run the <code>Blob</code> through the <code>FileReader</code></li>
<li>Which also handily turned it into a data url for us</li>
<li>The data url is just a base64 encoded string which is easy to save to <code>localStorage</code></li>
<li>Read the string back out of <code>localStorage</code></li>
<li>Set the audio's <code>src</code> attribute to the audio data url</li>
<li>Profit!</li>
</ol>
<p>While I was prototyping this I was borrowing someone else short <code>mp3</code> file and to work around CORS (cross origin http request) I used the handy <code>https://crossorigin.me/&lt;&lt;SampleAudioUrlHere&gt;&gt;</code> service. This may be ok to do for a prototype, but you should't typically run your requests through this service. It's insecure and against pretty much all the different web religions.</p>
<h1>Show me the code</h1>
<p>This was just a quick <code>get-er-done</code> example. Lots of not-great-practices, but it demonstrates the possibility. Enjoy!</p>
<pre><code><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">
    
      <span class="hljs-comment">// Code goes here</span>
      <span class="hljs-keyword">var</span> audioFileUrl = <span class="hljs-string">'&lt;&lt;SampleAudioUrlHere&gt;&gt;'</span>;
      
      <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
        
        <span class="hljs-keyword">var</span> downloadButton = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'download'</span>);
        <span class="hljs-keyword">var</span> audioControl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'audio'</span>);
      
        audioControl.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
          <span class="hljs-built_in">console</span>.log(audioControl.error);
        };
      
        downloadButton.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
          
          audioControl.src = <span class="hljs-literal">null</span>;
          
          fetch(audioFileUrl)
            .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>{
              res.blob().then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">blob</span>) </span>{
                <span class="hljs-keyword">var</span> size = blob.size;
                <span class="hljs-keyword">var</span> type = blob.type;
      
                <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> FileReader();
                reader.addEventListener(<span class="hljs-string">"loadend"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
      
                  <span class="hljs-comment">// console.log('reader.result:', reader.result);</span>
                  
                  <span class="hljs-comment">// 1: play the base64 encoded data directly works</span>
                  <span class="hljs-comment">// audioControl.src = reader.result;</span>
      
                  <span class="hljs-comment">// 2: Serialize the data to localStorage and read it back then play...</span>
                  <span class="hljs-keyword">var</span> base64FileData = reader.result.toString();

                  <span class="hljs-keyword">var</span> mediaFile = {
                    fileUrl: audioFileUrl,
                    size: blob.size,
                    type: blob.type,
                    src: base64FileData
                  };
                  
                  <span class="hljs-comment">// save the file info to localStorage</span>
                  localStorage.setItem(<span class="hljs-string">'myTest'</span>, <span class="hljs-built_in">JSON</span>.stringify(mediaFile));
                  
                  <span class="hljs-comment">// read out the file info from localStorage again</span>
                  <span class="hljs-keyword">var</span> reReadItem = <span class="hljs-built_in">JSON</span>.parse(localStorage.getItem(<span class="hljs-string">'myTest'</span>));
      
                  audioControl.src = reReadItem.src;
      
                });
      
                reader.readAsDataURL(blob);
      
              });
            });
          
        });
        
      };
    
    </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"download"</span>&gt;</span>Run Example<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">br</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">audio</span> <span class="hljs-attribute">controls</span>=<span class="hljs-value">"true"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"audio"</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">audio</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>

</code></pre>
<p>I hope you found this quick tutorial useful. Would love to hear any feedback or thoughts on the approach.</p>
<p>As earways, Happy Listening!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Integrate WinJS.Navigation with the Browser's History]]></title>
        <id>http://staxmanade.com/2015/10/integrate-winjs-navigation-with-the-browser-s-history/</id>
        <link href="http://staxmanade.com/2015/10/integrate-winjs-navigation-with-the-browser-s-history/">
        </link>
        <updated>2015-10-31T17:30:40Z</updated>
        <summary type="html"><![CDATA[I've been playing with [WinJS](https://github.com/winjs/winjs) a bit lately, specifically the [React-WinJS](https://github.com/winjs/react-winjs) and ...]]></summary>
        <content type="html"><![CDATA[<p>I've been playing with <a href="https://github.com/winjs/winjs">WinJS</a> a bit lately, specifically the <a href="https://github.com/winjs/react-winjs">React-WinJS</a> and wanted the native WinJS Navigation to play a little nicer with a web browser. The original/default environment for WinJS app is within a WinRT/Metro application where there is no &quot;url/address&quot; bar to be seen.</p>
<blockquote>
<p>My uneducated guess is that the WinJS team decided not to worry about how <code>WinJS.Navigation</code> would integrate with a normal browser's history as there doesn't appear to be native integration or documentation about how to do it so far.</p>
</blockquote>
<p>I <a href="https://github.com/winjs/winjs/issues/1532">asked the team</a> if they had plans to work on any integration options, but only asked that last night so don't expect to hear back from over the weekend.</p>
<h3>UPDATE: I got tired of updating this blog post with my bug fixes/iterations of the idea - so I've moved it over to GitHub: <a href="https://github.com/staxmanade/WinJSBrowserHistory">github.com/staxmanade/WinJSBrowserHistory</a>.</h3>
<p>So I spent a moment and prototyped one possible solution which works for this simple test using the browser's history api since I'm not looking to support browsers older than IE 10.</p>
<p>Ideally we could leverage WinJS controls without worrying about how to &quot;integrate&quot; the <code>WinJS.Navigation</code> with anything, but sadly some of the WinJS controls take a dependency on <code>WinJS.Navigation</code> (like the BackButton) so finding a way to play nice with this can be challenging.</p>
<p>If you want to get this prototype running yourself, you can:</p>
<ol>
<li>save both files below to a folder</li>
<li>start up a simple web server. (I like to use <a href="http://npmjs.com/package/nws">nws</a>)</li>
</ol>
<p>This prototype is 2 files:</p>
<ul>
<li><code>index.html</code> &lt;-- basic JSPM bootstrapping and configuration</li>
<li><code>app.jsx</code> &lt;-- my whole navigation app in here...</li>
</ul>
<h2>index.html</h2>
<p>Couple mentions on this bootstrapping code:</p>
<ol>
<li>I set the background style to black (since in <code>app.jsx</code> I'm using the WinJS dark css) - this avoids a flash from white to black when the page loads</li>
<li>This is using <a href="https://github.com/systemjs/systemjs">SystemJS</a> which makes it really easy to prototype and bootstrap dependencies like <a href="https://github.com/winjs/winjs">WinJS</a> and <a href="https://facebook.github.io/react/">React</a>. Please don't deploy something like this to production - follow proper <a href="https://github.com/jspm/jspm-cli/blob/master/docs/production-workflows.md">JSPM production workflow procedures</a>...</li>
<li>The <code>map</code> section in the <code>System.config</code> defines a pointer to a fork of <code>react-winjs</code> I have that supports <code>React 0.14</code> (so if you find this in the future and need it, try to use the native <code>react-winjs</code> if they've merged in <a href="https://github.com/winjs/react-winjs/pull/33">my pull request</a> instead.)</li>
</ol>
<pre><code><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">style</span> <span class="hljs-attribute">media</span>=<span class="hljs-value">"screen"</span>&gt;</span><span class="css"> <span class="hljs-tag">body</span><span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> black</span></span>; }</span> </span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"https://jspm.io/system@0.18.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/javascript"</span>&gt;</span><span class="actionscript">
      System.config({
        transpiler: <span class="hljs-string">'babel'</span>,
        packages: {
          <span class="hljs-string">'./'</span>: {
            defaultExtension: <span class="hljs-literal">false</span>
          }
        },
        map: {
          <span class="hljs-string">'react'</span>: <span class="hljs-string">'npm:react@0.14'</span>,
          <span class="hljs-string">'react-winjs'</span>: <span class="hljs-string">'github:staxmanade/react-winjs@2.4.0-react-0.14'</span>,
        }
      });

      System.<span class="hljs-keyword">import</span>(<span class="hljs-string">'./app.jsx'</span>);

    </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"main"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre>
<h2>app.jsx</h2>
<pre><code><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">import</span> WinJS <span class="hljs-keyword">from</span> <span class="hljs-string">'npm:winjs'</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">'npm:winjs/css/ui-dark.css!'</span>;
<span class="hljs-keyword">import</span> { BackButton } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-winjs'</span>;


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WinJSBrowserHistory</span> </span>{
    isNavigationBeingHandled;
    isWinJSNavigationBackBeingHandled;
    isNavigationTriggeredByPopStateEvent;

    constructor(onApplyNavigaitonChange) {

        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> onApplyNavigaitonChange !== <span class="hljs-string">"function"</span>) {
          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"Expecting first argumet to be a function that can take 2 parametes (location, state) =&gt; {}"</span>);
        }

        <span class="hljs-keyword">this</span>.onApplyNavigaitonChange = onApplyNavigaitonChange;

        WinJS.Navigation.addEventListener(<span class="hljs-string">"beforenavigate"</span>, <span class="hljs-keyword">this</span>.handleBeforeNavigate.bind(<span class="hljs-keyword">this</span>));
        WinJS.Navigation.addEventListener(<span class="hljs-string">"navigating"</span>, <span class="hljs-keyword">this</span>.handleNavigating.bind(<span class="hljs-keyword">this</span>));
        WinJS.Navigation.addEventListener(<span class="hljs-string">"navigated"</span>, <span class="hljs-keyword">this</span>.handleNavigated.bind(<span class="hljs-keyword">this</span>));

        <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'popstate'</span>, (eventObject) =&gt; {
            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'popstate'</span>, <span class="hljs-keyword">this</span>.isNavigationBeingHandled, eventObject);

            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">this</span>.isNavigationBeingHandled &amp;&amp; !<span class="hljs-keyword">this</span>.isWinJSNavigationBackBeingHandled) {
              <span class="hljs-keyword">this</span>.handlePopState(eventObject);
            }
            <span class="hljs-keyword">this</span>.isWinJSNavigationBackBeingHandled = <span class="hljs-literal">false</span>;
        })
    }

    cleanup() {
      WinJS.Navigation.removeEventListener(<span class="hljs-string">"navigated"</span>, <span class="hljs-keyword">this</span>.handleNavigated);
    }


    handlePopState(eventObject) {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"handlePopState"</span>, eventObject, location.hash);

      <span class="hljs-keyword">this</span>.isNavigationTriggeredByPopStateEvent = <span class="hljs-literal">true</span>;

      WinJS.Navigation.navigate(location.hash, location.state);
    }

    handleBeforeNavigate(eventObject) {
        <span class="hljs-keyword">this</span>.isNavigationBeingHandled = <span class="hljs-literal">true</span>;
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"handleBeforeNavigate:"</span>, eventObject);
    }

    handleNavigating(eventObject) {
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"handleNavigating:"</span>, eventObject);
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"handleNavigating delta:"</span>, eventObject.detail.delta);

        <span class="hljs-keyword">var</span> location = eventObject.detail.location;
        <span class="hljs-keyword">var</span> state = eventObject.detail.state;
        <span class="hljs-keyword">var</span> delta = eventObject.detail.delta;

        <span class="hljs-keyword">this</span>.onApplyNavigaitonChange(location, state);

        <span class="hljs-keyword">if</span>(delta &lt; <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">this</span>.isWinJSNavigationBackBeingHandled = <span class="hljs-literal">true</span>;
            <span class="hljs-built_in">window</span>.history.go(delta);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-comment">//router.setRoute(location);</span>
            <span class="hljs-built_in">window</span>.history.pushState(state, <span class="hljs-string">""</span>, <span class="hljs-string">"#"</span> + location);
        }
    }

    handleNavigated(eventObject) {
        <span class="hljs-keyword">this</span>.isNavigationBeingHandled = <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">this</span>.isNavigationTriggeredByPopStateEvent = <span class="hljs-literal">false</span>;

        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"handleNavigated"</span>, eventObject);
    }

}


<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{

    constructor(props) {
        <span class="hljs-keyword">super</span>(props);

        <span class="hljs-keyword">this</span>.winJSBrowserHistory = <span class="hljs-keyword">new</span> WinJSBrowserHistory(<span class="hljs-keyword">this</span>.onApplyNavigaitonChange.bind(<span class="hljs-keyword">this</span>));

        <span class="hljs-keyword">this</span>.state = {
            nav: {
                state: WinJS.Navigation.state,
                location: WinJS.Navigation.location
            }
        }
    }

    componentWillMount () {
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"componentWillMount"</span>);
        WinJS.Navigation.navigate(<span class="hljs-keyword">this</span>.state.nav.location, <span class="hljs-keyword">this</span>.state.nav.state);
    }

    componentWillUnmount () {
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"componentWillUnmount"</span>);
    }

    onApplyNavigaitonChange(location, state) {
        <span class="hljs-keyword">this</span>.setState({
            nav: {
                location: location,
                state: state
            }
        });
    }

    gotoPage1Nested() {
        WinJS.Navigation.navigate(<span class="hljs-string">"/page1/nested"</span>);
    }

    gotoPage1() {
        WinJS.Navigation.navigate(<span class="hljs-string">"/page1"</span>);
    }

    render() {

        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"render() location:"</span>, <span class="hljs-keyword">this</span>.state.nav.location);

        <span class="hljs-keyword">var</span> componentWithBackButton = component =&gt; {
            <span class="hljs-keyword">return</span> (
                <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">BackButton</span> /&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
                        {component}
                    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            )</span>;
        };

        <span class="hljs-keyword">var</span> page;

        <span class="hljs-keyword">switch</span>(<span class="hljs-keyword">this</span>.state.nav.location) {
            <span class="hljs-keyword">case</span> <span class="hljs-string">"/page1"</span>:
                page = componentWithBackButton(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>page 1<span class="hljs-tag">&lt;<span class="hljs-title">br</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{this.gotoPage1Nested.bind(this)}</span>&gt;</span>Goto Page 1 Nested<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>)</span>;
            <span class="hljs-keyword">break</span>;

            <span class="hljs-keyword">case</span> <span class="hljs-string">"/page1/nested"</span>:
                page = componentWithBackButton(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>page 1 nested<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>)</span>;
            <span class="hljs-keyword">break</span>;

            <span class="hljs-keyword">case</span> <span class="hljs-string">"/page2"</span>:
                page = componentWithBackButton(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>page 1<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>)</span>;
            <span class="hljs-keyword">break</span>;

            <span class="hljs-keyword">default</span>:
                page = (
                    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
                      <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{this.gotoPage1.bind(this)}</span>&gt;</span>Goto Page 1<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                )</span>;
        }

        <span class="hljs-keyword">return</span> page;
    }
}

ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">App</span> /&gt;</span>, document.getElementById('main'));

</span></code></pre>
<p>Next I'd like to see if I could leverage something like <a href="https://github.com/flatiron/director">flatiron/director</a> for routing and get it to play nice with <code>WinJS.Navigation</code> and if I do, I'll post it as well...</p>
<p>Hope this helps.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 6 - Dig a Little Deeper]]></title>
        <id>http://staxmanade.com/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/</id>
        <link href="http://staxmanade.com/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">
        </link>
        <updated>2015-10-24T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 6 - Dig a Little Deeper]]></summary>
        <content type="html"><![CDATA[<p>ï»¿
<div class="seriesNote">
    <p>This article is <strong>Part 6</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - <a href="/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">Update or Add Documentation while Reading Code</a>
        </li>
        <li>
            Part 6 - (current) - Dig a Little Deeper
        </li>
        <li>
            Part 7 - <a href="/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">Changes Should be Taken with Baby Steps</a>
        </li>
        <li>
            Part 8 - <a href="/2015/11/habit-of-a-solid-developer-podcasts/">Podcasts</a>
        </li>
        <li>
            Part 9 - <a href="/2016/01/habit-of-a-solid-developer-rapid-feedback/">Rapid Feedback</a>
        </li>
    </ul>
</div></p>
<p>The number of things you can learn in this field is mind blowing. The rate at which change happens, frameworks come and go and the various levels of abstraction can be daunting at times.</p>
<p>Regardless of how much or little you know, there is always a new level of abstraction you can dive into and get a better understanding of what's going on. I love the example <a href="http://hanselman.com">Scott Hanselman</a> uses about this topic in <a href="http://www.hanselman.com/blog/PleaseLearnToThinkAboutAbstractions.aspx">Please Learn to Think about Abstractions</a>.</p>
<p>It is amazing how much you can accomplish without having a clue about what is going under your abstractions. But if you were to take a moment now and then to try to understand what those abstractions are hiding from you, it will likely open your eyes to a level of understanding and insight as to how to use the abstraction that you may likely not understand how you made it work without that deeper insight. The understanding may help you get just needed bit of performance improvement, or fault tolerance in your projects, or how to set things up to be more maintainable.</p>
<p>An example of this for me recently is while working at <a href="http://vertigo.com/">Vertigo</a> I have helped to ship a number of streaming video based products without having to know anything about some of the specifics of say <a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming">HLS</a>. On this recent project we were having issues with a live stream and it just so happened we could peek through an HTTP Debugger proxy at the raw streaming manifest. This was previously a scary place for me to dig in an try to understand. However, taking the time to understand various parts of the HLS Spec have not only made me appreciate what it takes to put together one of these live streams, but I have now become just that much stronger as a team member on a video related projects.</p>
<p>As the famous philosopher Dory once said:</p>
<p><img src="http://cdn.meme.am/instances/55766499.jpg" alt="Dory saying just keep digging, just keep digging, digging, digging"></p>
<p>Happy Digging!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Red - Possibly the Most Important Step in Red, Green, Refactor]]></title>
        <id>http://staxmanade.com/2015/10/red--possibly-the-most-important-step-in-red--green--refactor/</id>
        <link href="http://staxmanade.com/2015/10/red--possibly-the-most-important-step-in-red--green--refactor/">
        </link>
        <updated>2015-10-10T05:24:02Z</updated>
        <summary type="html"><![CDATA[If you do any sort of test driven development, you've likely heard of the following steps]]></summary>
        <content type="html"><![CDATA[<p>If you do any sort of test driven development, you've likely heard of the following steps</p>
<ul>
<li><strong>Red</strong>: In this case means you write a test first and see the <code>red</code> (meaning failing test).</li>
<li><strong>Green</strong>: This is where you actually write a tiny bit of production code to see the red test from above go green and pass.</li>
<li><strong>Refactor</strong>: Now that you have a passing test (or suite of tests) you can presumably safely refactor and apply any common code cleanup practices to the code.</li>
</ul>
<h1>The importance of the Red step.</h1>
<p>I don't want to go in to each of these steps in detail today, but I did want to drill into the <code>Red</code> step by giving you a short little example that happened to me today.</p>
<p>If you are interested in a little more detail on the subject check out:</p>
<ul>
<li><a href="http://www.jamesshore.com/Blog/Red-Green-Refactor.html">http://www.jamesshore.com/Blog/Red-Green-Refactor.html</a></li>
<li><a href="http://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html">http://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html</a></li>
</ul>
<p>If you're new to any sort of <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a>/<a href="https://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a>/anything-DD you may not quite get how important this first step is, but hopefully the rest of this post helps...</p>
<h1>Make sure it fails</h1>
<p>The Red step is one of the most important, but one that a new practitioner may skip out of laziness. It takes discipline to write the failing test, run it and verify that it fails. It is so easy to write the test code AND the production code together, run it and see it pass that skipping the red step is something even seasoned veterans in the field can fall prey to.</p>
<p>However, if you don't see the test fail, how do you know it will ever fail?</p>
<p>I can tell you on numerous occasions in the past where I have written both production code and test code together, run it see it pass, just in case - comment out the production code and STILL see the test pass. Wait what?</p>
<p>If you are not careful you may have created a bad test and if you run this Red step first and you don't see it turn Red, you likely have a problem.</p>
<p>It could be a problem with the test itself, or possibly something you put in the test that is triggering something deeper in the system. It doesn't matter what the problem is, you first need to get the test to turn red before you write any production code to make it turn green.</p>
<h1>Make sure it fails FOR THE RIGHT REASON</h1>
<p>While it's easy to see a red bar and move on, it's also good to review the exact reason it failed. Did you get a <code>FileNotFoundException</code> exception when you were expecting a <code>NullReferenceException</code>? Or did you get an integer value of <code>10</code> when you were thinking at that moment it would have failed because it returned a string?</p>
<p>If you're writing proper tests, your red step will include a true failure case that not only just fails, but fails for the reason you would expect it to fail - at least until you go to write the production code that satisfies the tests intent.</p>
<h1>Now a little example.</h1>
<p>In the example below I was behaving myself and I DID run the red step first. I am using plain-ish JavaScript (I say ish here because I'm using ES6 with babel compiler).</p>
<blockquote>
<p>It's much easier to make the type of mistake I'm going to highlight below with plain JavaScript than if you were using a statically typed language. You can try something like <a href="http://typescriptlang.org">TypeScript</a> for <a href="http://flowtype.org/">flow</a> as these compilers provide a static type checker over your JavaScript. Compilers are a great first test...</p>
</blockquote>
<p>Alas, I'm not doing that at the moment.</p>
<p>So here is what I did...</p>
<p>First I wrote a test:</p>
<pre><code><span class="hljs-keyword">import</span> FeedData <span class="hljs-keyword">from</span> <span class="hljs-string">'../app/feed.js'</span>;

describe(<span class="hljs-string">"feed cache"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{

  <span class="hljs-keyword">var</span> feedCache;

  before(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    feedCache = FeedData.loadCache();
  });

  it(<span class="hljs-string">"Feed Cache should have two items"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    expect(feedCache.length).to.equal(<span class="hljs-number">2</span>);
  });

});

</code></pre>
<p>When I tried to run it I got the error saying that <code>TypeError: FeedData.loadCache is not a function</code>. This was great and made total sense because I haven't written this <code>loadCache()</code> function yet.</p>
<p>Next I opened up my <code>FeedData.js</code> file and added the <code>loadCache()</code> function.</p>
<pre><code><span class="hljs-literal">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeedData</span> </span>{
  loadCache() {

  }
}
</code></pre>
<p>I left the implementation blank for now and re-ran my tests. Same error <code>TypeError: FeedData.loadCache is not a function</code> as above.</p>
<p>That was odd, because I know I added the function but apparently it didn't think I had... some scratching... looking... hmm... Ahh ha - I had imported from <code>feed.js</code> not <code>feedData.js</code>.</p>
<p>It's subtle, but in my app <code>feedData</code> and <code>feed</code> are different things. So I moved the function to the correct ES6 class and re-ran the tests. I was <strong>certain</strong> this time that it may fail but at least fail for the right reason (not a missing function).</p>
<p>ARGGG....</p>
<p>Again I got the same error <code>TypeError: FeedData.loadCache is not a function</code>. Ok, that was weird. Now I'm wondering if I have a caching problem in my browser, but before I try to debug Chrome's caching (kidding there, if I ever have to go that far I'm really having a rough day) I better have another look at my code.</p>
<p>It didn't take long in this case to realize where my issue was. <code>FeedData</code> is an ES6 class and I'm calling what I thought was a static function on the class from within the test, however it wasn't declared as static in the implementation.</p>
<p>Adding the <code>static</code> keyword below turned this function into what my test was originally expecting.</p>
<pre><code><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> FeedData {
  <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-title">loadCache</span><span class="hljs-params">()</span> </span>{

  }
}
</code></pre>
<p>Now, all this work just to get the first part of my <code>red</code> test. What a journey it's been for something as silly as declaring a function.</p>
<p>It was a good reminder just how important the red step in red, green, refactor is.</p>
<p>Happy Testing!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[In App Unit test example with JSPM, React, WinJS and Mocha]]></title>
        <id>http://staxmanade.com/2015/10/in-app-unit-test-example-with-jspm--react--winjs-and-mocha/</id>
        <link href="http://staxmanade.com/2015/10/in-app-unit-test-example-with-jspm--react--winjs-and-mocha/">
        </link>
        <updated>2015-10-08T16:42:00Z</updated>
        <summary type="html"><![CDATA[A while back I wrote about [In App Unit Tests](http://staxmanade.com/2015/03/in-app-unit-tests/) and have been having too much fun creating little [st...]]></summary>
        <content type="html"><![CDATA[<p>A while back I wrote about <a href="http://staxmanade.com/2015/03/in-app-unit-tests/">In App Unit Tests</a> and have been having too much fun creating little <a href="http://staxmanade.com/2015/09/jsmp-systemjs-starter-plunker/">starter plunks</a> on <a href="http://plnkr.co">Plunker</a>. So...</p>
<p>As a simple demonstration on in-app unit tests I've thrown together a little plunk that shows <a href="http://staxmanade.com/2015/03/in-app-unit-tests/">in-app tests</a> within the a <a href="https://github.com/winjs/winjs">WinJS</a> <a href="https://msdn.microsoft.com/en-us/library/windows/apps/dn624879.aspx">Pivot</a>. And add to the layers of abstraction I'm using <a href="https://github.com/winjs/react-winjs">react-winjs</a> which I'm LOVING over normal WinJS development.</p>
<h1>Link to: <a href="http://plnkr.co/edit/feKPEx?p=preview">JSPM/React/WinJS/Mocha Plunk</a></h1>
<p>If you like this starter, I have it and a few more linked here: <a href="http://staxmanade.com/2015/09/jsmp-systemjs-starter-plunker/">for re-use</a></p>
<p>I'd like to highlight <a href="http://plnkr.co/edit/feKPEx?p=preview">this particular starter</a> at bit more in this post, not only because there are a few more concepts to this basic plunk, but also because I'm fairly happy with the MochaJS React component that I've now copied around and re-used a few times in some small projects where use <a href="http://staxmanade.com/2015/03/in-app-unit-tests/">In App Unit Tests</a>.</p>
<h1>Plunker file overview</h1>
<ul>
<li><code>index.html</code> - The index file is a very basic <a href="http://jspm.io">JSPM</a> bootstrap page that loads the <code>app.jsx</code> react component.</li>
<li><code>app.jsx</code> - Defines a WinJS Pivot control where we render the in-app <code>MochaTests.jsx</code> React component. This also defines the test file(s) and using MochaJS's global detection we can tell the react <code>MochaTests</code> component what test files to load and run as well as what globals are allowed to exist.</li>
<li><code>config.js</code> - This is JSPM's config that defines what version of React we're using and to use <code>babel</code> for transpilation.</li>
<li><code>tests.js</code> - is our Mocha set of unit tests. We can have multiple test files if we want, just have to define what files to load in <code>app.jsx</code>.</li>
</ul>
<p>Lastly the <code>MochaTests.jsx</code> which I'll include the full component below:</p>
<blockquote>
<p>easier to copy-paste inherit for myself in the future</p>
</blockquote>
<pre><code><span class="hljs-keyword">import</span> mocha <span class="hljs-keyword">from</span> <span class="hljs-string">'mocha'</span>;
<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MochaTests</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{

    static get propTypes() {
        <span class="hljs-keyword">return</span> {
            testScripts: React.PropTypes.array.isRequired,
            allowedGlobals: React.PropTypes.array
        };
    }

    constructor(props) {
        <span class="hljs-keyword">super</span>(props);
    }

    componentDidMount() {

        <span class="hljs-keyword">var</span> testScripts = <span class="hljs-keyword">this</span>.props.testScripts;
        <span class="hljs-keyword">var</span> runTests = <span class="hljs-keyword">this</span>.runTests.bind(<span class="hljs-keyword">this</span>);

        <span class="hljs-comment">// for some reason importing mocha with JSPM and ES6 doesn't</span>
        <span class="hljs-comment">// place the mocha globals on the window object. The below</span>
        <span class="hljs-comment">// handles that for us - as well as setting up the rest of the</span>
        <span class="hljs-comment">// test scripts for the first run</span>
        mocha.suite.on(<span class="hljs-string">'pre-require'</span>, context =&gt; {
            <span class="hljs-keyword">var</span> exports = <span class="hljs-built_in">window</span>;

            exports.afterEach = context.afterEach || context.teardown;
            exports.after = context.after || context.suiteTeardown;
            exports.beforeEach = context.beforeEach || context.setup;
            exports.before = context.before || context.suiteSetup;
            exports.describe = context.describe || context.suite;
            exports.it = context.it || context.test;
            exports.setup = context.setup || context.beforeEach;
            exports.suiteSetup = context.suiteSetup || context.before;
            exports.suiteTeardown = context.suiteTeardown || context.after;
            exports.suite = context.suite || context.describe;
            exports.teardown = context.teardown || context.afterEach;
            exports.test = context.test || context.it;
            exports.run = context.run;

            <span class="hljs-comment">// now use SystemJS to load all test files</span>
            <span class="hljs-built_in">Promise</span>
            .all(testScripts.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">testScript</span>) </span>{
                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Adding Mocha Test File: "</span>, testScript);
                <span class="hljs-keyword">return</span> System.import(testScript);
            })).then(runTests, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>{
                <span class="hljs-built_in">console</span>.error(<span class="hljs-string">"Error loading test modules"</span>);
                <span class="hljs-built_in">console</span>.error(err);
            });

        });
        mocha.setup(<span class="hljs-string">'bdd'</span>);
    }

    runTests() {
        <span class="hljs-keyword">var</span> allowedGlobals = <span class="hljs-keyword">this</span>.props.allowedGlobals || [];

        <span class="hljs-keyword">this</span>.refs.mocha.getDOMNode().innerHTML = <span class="hljs-string">""</span>;

        mocha.checkLeaks();
        mocha.globals(allowedGlobals);
        mocha.run();

    }

    render() {
        <span class="hljs-keyword">return</span> (
            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">style</span>&gt;</span><span class="css"><span class="hljs-rules">{"\
                  #mocha-stats em { \
                      <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> inherit</span></span>; \
                  }</span> \
                  <span class="hljs-id">#mocha-stats</span> <span class="hljs-rules">{ \
                    <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> inherit</span></span>; \
                  }</span>\
                  <span class="hljs-id">#mocha</span> <span class="hljs-class">.test</span><span class="hljs-class">.fail</span> <span class="hljs-tag">pre</span> <span class="hljs-rules">{ \
                      <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> red</span></span>; \
                  }</span> \
                "}</span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span>

                <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{this.runTests.bind(this)}</span>&gt;</span>Rerun Tests<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>

                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"mocha"</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"mocha"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        )</span>;
    }
}
</code></pre>
<p>Usage example of this React <code>MochaTests</code> component.</p>
<pre><code>// <span class="hljs-type">Define</span> what test files get loaded by the <span class="hljs-type">MochaTests</span> component
<span class="hljs-keyword">var</span> testScripts = [
  './tests.js'
];


<span class="hljs-keyword">var</span> allowedTestGlobals = [
  // <span class="hljs-type">Declare</span> what globals are allowed to be created during <span class="hljs-type">any</span> test runs.
];


// <span class="hljs-type">Usage</span> <span class="hljs-keyword">of</span> <span class="hljs-type">MochaTests</span> <span class="hljs-keyword">in</span> a react render() <span class="hljs-keyword">method</span>.
&lt;<span class="hljs-type">MochaTests</span> testScripts={testScripts} allowedGlobals={allowedTestGlobals} /&gt;

</code></pre>
<p>I'm not expecting to see a large up-tick in WinJS apps out there with in-app unit tests that run in the browser, however hopefully the <code>MochaTests.jsx</code> React Component is of value to you and can be utilized outside of WinJS within almost any React app.</p>
<p>Please drop a line if you end up using it or if it can be adapted. If there's value in the component, maybe</p>
<h1>Known Issue</h1>
<p>If the number of tests starts to go beyond the height of the pivot in this sample, it has an issue where the WinJS Pivot cuts off at the bottom not allowing you to scroll and see the rest of the test output. I haven't dug into it yet because I've been clicking the <code>failures: X</code> link and it filters the U.I. to just the erroring tests.</p>
<p>If you happen to come up with a good solution, drop me a note - I'd love it. Thanks in advance!</p>
<p>Happy Testing!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 5 - Update or Add Documentation while Reading Code]]></title>
        <id>http://staxmanade.com/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/</id>
        <link href="http://staxmanade.com/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">
        </link>
        <updated>2015-10-02T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 5 - Update or Add Documentation while Reading Code]]></summary>
        <content type="html"><![CDATA[<p>ï»¿
<div class="seriesNote">
    <p>This article is <strong>Part 5</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - (current) - Update or Add Documentation while Reading Code
        </li>
        <li>
            Part 6 - <a href="/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">Dig a Little Deeper</a>
        </li>
        <li>
            Part 7 - <a href="/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">Changes Should be Taken with Baby Steps</a>
        </li>
        <li>
            Part 8 - <a href="/2015/11/habit-of-a-solid-developer-podcasts/">Podcasts</a>
        </li>
        <li>
            Part 9 - <a href="/2016/01/habit-of-a-solid-developer-rapid-feedback/">Rapid Feedback</a>
        </li>
    </ul>
</div></p>
<p>While I generally sit on the side of the fence that your code should <strong>read clearly</strong> enough that comments should not be necessary. I concede that there are (often) times when a comment can really help to make the job of understanding the code much easier than just how a variable or method is named or organized.</p>
<p>One example of such case is when you've gotten lost in the code and don't understand how a piece of it works.</p>
<p>The second you figure or re-discover it's intent, <strong>try to add or update some comments</strong> in the code that may help you or the next person understand it more clearly in the future.</p>
<p>You can argue that a comment should have been added initially, but life happens and we don't always save little nuances like we should or we're given a codebase that is not as clean as we would like. So if you catch yourself digging through some code and a bit confused in an area, take the time to document it (once you figure out what you didn't understand).</p>
<p>This is especially true when you are the original writer of sed un-clear code. I know I've gone through code I've written and been like, &quot;hmm, no idea what I was thinking here...&quot; or &quot;well, there was a reason I did this stupid thing, but now I don't remember what that was. Wish I would have commented a little more to my future self&quot;.</p>
<p>Sometimes it may be a simple variable rename or refactor that would clean it up. But <strong>don't just figure it out and not leave a breadcrumb</strong> for the next person (or yourself) to more easily grok the code.</p>
<p><strong>Add clarity to un-clear code.</strong></p>
<pre><code><span class="hljs-comment">// When I wrote this, only God and I understood what I was doing</span>
<span class="hljs-comment">// Now, God only knows</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// http://stackoverflow.com/a/316233/1402137</span>
</code></pre>
<h1><a href="http://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered/316233">Now go read these comments</a> and enjoy!</h1>
<p>Happy Understanding!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 4 - Git Dance]]></title>
        <id>http://staxmanade.com/2015/09/habit-of-a-solid-developer-git-dance/</id>
        <link href="http://staxmanade.com/2015/09/habit-of-a-solid-developer-git-dance/">
        </link>
        <updated>2015-09-30T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 4 - Git Dance]]></summary>
        <content type="html"><![CDATA[<p>ï»¿
<div class="seriesNote">
    <p>This article is <strong>Part 4</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - (current) - Git Dance
        </li>
        <li>
            Part 5 - <a href="/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">Update or Add Documentation while Reading Code</a>
        </li>
        <li>
            Part 6 - <a href="/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">Dig a Little Deeper</a>
        </li>
        <li>
            Part 7 - <a href="/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">Changes Should be Taken with Baby Steps</a>
        </li>
        <li>
            Part 8 - <a href="/2015/11/habit-of-a-solid-developer-podcasts/">Podcasts</a>
        </li>
        <li>
            Part 9 - <a href="/2016/01/habit-of-a-solid-developer-rapid-feedback/">Rapid Feedback</a>
        </li>
    </ul>
</div></p>
<p>When it comes to solid dev habits, source control should be on the top of your list as a given. So much so that I'm not going to talk about the pro's and pro's (see what I did there?) of source control. I did however, want to walk through something I call my <code>git dance</code> which is mostly just the rhythmic steps I take while pulling in changes from a remote repository while working on a project.</p>
<p>For a little context, this workflow is what I usually do while working on an internal project using git with a team where we may or may not be using pull requests, but the goal of this dance is to bring in any remote changes and layer my changes in on the <code>master</code> branch (or whatever branch we're developing on).</p>
<p>My favorite thing about git is there is no &quot;right way&quot; to do things and when you get good enough at it the 'rules' people place on using git can mostly be wiped away. However, the below steps, while not always followed, are generally what I use to stay happy and healthy when dealing with others changes.</p>
<h1><a href="http://git-scm.com/docs/git-fetch">Fetch</a> remote changes (don't <a href="http://git-scm.com/docs/git-pull">pull</a>)</h1>
<p>So if we know or don't know that there are changes remotely</p>
<pre><code>git fetch
</code></pre>
<p>or sometimes (if I have multiple remotes)</p>
<pre><code>git fetch --all
</code></pre>
<p>Why use <code>fetch</code> when I could be using <code>pull</code>?</p>
<p>I prefer to <code>fetch</code> any changes as this gives me the opportunity to review a visual of the commit graph before any action is taken. This allows me to take different paths depending on what the before commit graph looks like vs what I want the after to look like. <code>Git pull</code> is essentially a short-cut for both <code>fetch</code>ing and <code>merge</code>ing the code and I often don't want to just merge a remote change.</p>
<p>After I have any remote changes pulled (err fetched) locally I like to get a mental model of the recent commits.</p>
<h1>Review remote changes</h1>
<pre><code>gitk --all
</code></pre>
<p>Now the <code>gitk</code> U.I. is horrible to look at (and I'm sure you have your favorite git visualizer), but it provides enough info to review changes between the current <code>HEAD</code> of my local branch and any remote changes that have come in with the <code>git fetch</code> step above. The <code>--all</code> is important in gitk, as it will show you all branches (including remote branches) that were fetched.</p>
<p>I use this overview to not only <a href="http://staxmanade.com/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">code review changes</a>, but to help determine whether I want to <code>merge</code> or <code>rebase</code> with the remote changes.</p>
<h1>Merge or Rebase</h1>
<p>Once my review is complete, I've taken a look at the overall changes, and I have a mental model of what the current commit graph looks like. I generate a mental visual of what I want the commit graph to look like when I'm done. I will decide to either:</p>
<h2>Merge</h2>
<pre><code>git merge [origin/master | otherBranch]
</code></pre>
<p>Or</p>
<h2>Rebase</h2>
<pre><code>git rebase [origin/master | otherBranch]
</code></pre>
<p>Once my changes have been synced up with the remote changes, I push them up.</p>
<h1>Ship changes up to the origin</h1>
<pre><code>git push origin master
</code></pre>
<p>or</p>
<pre><code>git push origin &lt;branchName&gt;
</code></pre>
<p>Now it's not a complicated workflow and it can get a bit trickier, but the key here is doing the fetch, review, integrate workflow over automatically pulling in remote changes. This allows me the space to potentially <a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History">interactive rebase</a> or muck with my commits locally before pushing anything public.</p>
<p>Happy <code>gitting</code>!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[tvOS Simulator Remote - Keyboard Shortcuts/Replacement]]></title>
        <id>http://staxmanade.com/2015/09/tvos-simulator-remote---keyboard-shortcuts-replacement/</id>
        <link href="http://staxmanade.com/2015/09/tvos-simulator-remote---keyboard-shortcuts-replacement/">
        </link>
        <updated>2015-09-16T05:06:14Z</updated>
        <summary type="html"><![CDATA[I've begun some baby steps on my journey to learn the new [Apple TV](https://developer.apple.com/tvos/) development tools and platform and we just dis...]]></summary>
        <content type="html"><![CDATA[<p>I've begun some baby steps on my journey to learn the new <a href="https://developer.apple.com/tvos/">Apple TV</a> development tools and platform and we just discovered that the cumbersome tvOS Simulator Remote can almost be ignored because we can use our development keyboards in it's place.</p>
<p>Playing around with the new Apple <code>tvOS</code> development kit you may have noticed that using the simulator remote is quite annoying. Not only does it force you to take you hand off the keyboard (to move to the mouse), but's just plain awkward to have to hold down <code>Option</code> while you use the Mouse and <code>Swipe Up/Down/Left/Right</code> when you may be trying to do is navigate the U.I.</p>
<p>Luckily a coworker stumbled upon the arrow key commands and we quickly figured out a mapping of <code>tvOS Remote Buttons</code> &lt;--&gt; <code>Keyboard Keys</code> that can help any developer navigate and test their <code>tvOS</code> app just a little faster within the simulator.</p>
<!--
| Mac Simulator Remote | Developer Keyboard Alias          | Notes                                                       |
|----------------------|-----------------------------------|-------------------------------------------------------------|
| Touch Surface (â, â, â, â)   | Keyboard Arrow Keys (â, â, â, â)  |                                                             |
| Touch Surface (click/select)| `<Enter>`                  | Also `<Enter>` on the number pad does NOT appear to work.   |
| `Menu`               | `Tap <ESC>`                       |                                                             |
| `Home`               | `Long-Press <ESC>`                |                                                             |
| `Siri`               | Unknown (so far)                  | Not sure if this is supported in the simulator, but if you figure it out, let me know and I'll update the post |
| `Play/Pause`         | `<SpaceBar>`                      |                                                             |
| `Volume Up/Down`     | Unknown (so far)                  |                                                             |
-->
<style>
.atvRemoteDisplay table {
  border-collapse: collapse;
}
.atvRemoteDisplay th {
  font-size: larger;
  font-weight: bolder;
}
.atvRemoteDisplay td, .atvRemoteDisplay th {
  border: 1px solid #999;
  padding: 0.5rem;
  text-align: left;
}
</style>
<table class="atvRemoteDisplay">
  <tr>
    <th>Mac Simulator Remote</th>
    <th>Developer Keyboard Alias</th>
    <th>Notes</th>
  </tr>
  <tr>
    <td>Touch Surface (â, â, â, â)</td>
    <td>Keyboard Arrow Keys (â, â, â, â)</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>Touch Surface (click/select)</td>
    <td><code>&lt;Enter&gt;</code></td>
    <td>Also <code>&lt;Enter&gt;</code> on the number pad does NOT appear to work.</td>
  </tr>
  <tr>
    <td><code>Menu</code></td>
    <td><code>Tap &lt;ESC&gt;</code></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><code>Home</code></td>
    <td><code>Long-Press &lt;ESC&gt;</code></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><code>Siri</code></td>
    <td>Unknown (so far)</td>
    <td>Not sure if this is supported in the simulator, but if you figure it out, let me know and I'll update the post</td>
  </tr>
  <tr>
    <td><code>Play/Pause</code></td>
    <td><code>&lt;SpaceBar&gt;`</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><code>Volume Up/Down</code></td>
    <td>Unknown (so far)</td>
    <td>&nbsp;</td>
  </tr>
</table>
<blockquote>
<p>If you discover what the two <code>Unknown</code> values above map to, leave a comment below and I'll update this post with the complete list.</p>
</blockquote>
<h4>Screenshot of Simulator Apple TV Remote</h4>
<p><img src="../../../images/posts/AppleTVSimulatorRemote.png" alt="Screenshot of Simulator Apple TV Remote"></p>
<h4>Diagram of actual Apple TV Remote</h4>
<p><img alt="Diagram of tvOS buttons" style="max-width: 700px;" src="https://developer.apple.com/tvos/human-interface-guidelines/remote-and-interaction/images/remote-and-interaction-remote-diagram_2x.png" /></p>
<p>Happy tvOS building!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 3 - Self Prescribed Code Reviews]]></title>
        <id>http://staxmanade.com/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/</id>
        <link href="http://staxmanade.com/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">
        </link>
        <updated>2015-09-14T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 3 - Self Prescribed Code Reviews]]></summary>
        <content type="html"><![CDATA[<p>ï»¿
<div class="seriesNote">
    <p>This article is <strong>Part 3</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - (current) - Self Prescribed Code Reviews
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - <a href="/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">Update or Add Documentation while Reading Code</a>
        </li>
        <li>
            Part 6 - <a href="/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">Dig a Little Deeper</a>
        </li>
        <li>
            Part 7 - <a href="/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">Changes Should be Taken with Baby Steps</a>
        </li>
        <li>
            Part 8 - <a href="/2015/11/habit-of-a-solid-developer-podcasts/">Podcasts</a>
        </li>
        <li>
            Part 9 - <a href="/2016/01/habit-of-a-solid-developer-rapid-feedback/">Rapid Feedback</a>
        </li>
    </ul>
</div></p>
<blockquote>
<p>One technique I use regularly when working with a team or even by myself is lots of individual code reviews.</p>
</blockquote>
<h1>This is not a formal (sit down with someone) code review.</h1>
<p>This is a personal practice I found extremely useful.</p>
<p>Granted, I'm not talking about reviewing every commit in a repository the <a href="https://www.youtube.com/watch?v=X0VH78ye4yY">size of Facebooks</a>. Most of the projects I have participated in are on small enough teams (between 1-10 people) that reviewing code changes either as they come in or in some block during the day is completely feasible.</p>
<p>Depending on the project, how many developers, time zones of committers, I shift how often or how thorough I review the changes but I try to review each and every commit (or at least the branch merge). This is one reason why <a href="http://staxmanade.com/2014/02/segregate-your-code-commits-into-tiny/">segregating your code commits into tiny topical changes</a> is important.</p>
<p>If you're working with a source control that doesn't have an easy way to do <a href="http://git-scm.com/docs/git-request-pull">pull requests</a>. Or some other code review functionality, you can still use the source control system to manually review changes or diffs between branches. Way back when I was <strong>forced</strong> to use TFS source control this was a much more manual process. I would open up Visual Studio, browse our TFS server and begin reviewing. These days, the power of a pull request is generally suffecient for this purpose.</p>
<h1>What happens in this review?</h1>
<p>One approach I've taken in the past is to block some time, possibly while warming up with a cup of coffee to begin reviewing the previous day's commits. I would use this time to not only review other developer's changes, but I would also re-review my own commits. This helped remind me what I worked on and possibly what I was struggling through the previous day. Reviewing code the next day provided time for my mental perspective to have shifted. I was probably thinking about things a little more clearly after a nights rest. Maybe I'd learned something that could be applied to the problem being worked on and provide better setup for changes needing to be made that day.</p>
<p>Some other benefits the morning review process provided include:</p>
<ul>
<li>It was a bit of a meditative process in the early morning that put my brain on a code thinking track for the day.</li>
<li>I could take notes on changes other's had made that were not clear. (Note: this is generally done in an environment that didn't perscribe peer-reviewing code changes). So I essentially took the job on personally to review other's changes. Provide feedback, or ask question to get more understanding of their changes.</li>
<li>Easily catch when the project conventions were not being followed, when the <a href="http://staxmanade.com/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">convention was not automated</a>.</li>
<li>Potentially spot bugs being introduced.</li>
<li>Suggest potentially better approaches.</li>
</ul>
<p>However, the most important thing I gained by doing this was:</p>
<ul>
<li>Gain a better understanding of the entire project.</li>
<li>Learn from others. I'd like to think I'm a pretty good develoepr, but there is so much to know and learn that reading other's code provides a great way to learn something new (or possibly what not to do).</li>
</ul>
<p>I once had a fellow developer say to me that they were blown away at how quick I could spin up on a brownfield project and get an architectural understanding that I could apply that knowledge and not only contribute quickly, but spot the places where we could improve general architectural patterns or jump in and become productive on a problem set.</p>
<p>I believe that reviewing the changes going into a code base each day allowed me to keep a strong perspective on what is shifting within the project and be able to talk intelligibly when others start to get stuck on their work.</p>
<h1>Formal Code Reviews</h1>
<p>If your team practices some form of code review workflow, this is great for those participating in the review process. However, it leaves the rest of the developers out of that specific review.</p>
<p>This should not stop those not in the review room (or pull request) from participating and learning from the changes.</p>
<p>Many of the places I've worked don't have a formal review process in place, so by putting this little ritual in place for myself I can not only come up to speed on a project but can be helpful to all aspects of the project. Reviewing changes every day allows me to more easily understand what people were working on when they announce it during the morning standup.</p>
<h1>Just Review Everything</h1>
<p>If you project is small enough and you can - spend a moment each day and review everything going on in the project. You and you're team will likely be better off.</p>
<p>Happy Reviewing!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 2 - Automatically Enforce Project Conventions]]></title>
        <id>http://staxmanade.com/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/</id>
        <link href="http://staxmanade.com/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">
        </link>
        <updated>2015-09-09T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 2 - Automatically Enforce Project Conventions]]></summary>
        <content type="html"><![CDATA[<p>ï»¿
<div class="seriesNote">
    <p>This article is <strong>Part 2</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - (current) - Automatically Enforce Project Conventions
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - <a href="/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">Update or Add Documentation while Reading Code</a>
        </li>
        <li>
            Part 6 - <a href="/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">Dig a Little Deeper</a>
        </li>
        <li>
            Part 7 - <a href="/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">Changes Should be Taken with Baby Steps</a>
        </li>
        <li>
            Part 8 - <a href="/2015/11/habit-of-a-solid-developer-podcasts/">Podcasts</a>
        </li>
        <li>
            Part 9 - <a href="/2016/01/habit-of-a-solid-developer-rapid-feedback/">Rapid Feedback</a>
        </li>
    </ul>
</div></p>
<p>Every project generates it's own constraints. These may come from an Architect's idea of &quot;best practice&quot; or it may come from the domain the software is written in. It may even be derived because of the programming language you're using. For example, in JavaScript we have linters that encourage rules like triple equals <code>===</code> vs double equals <code>==</code>.</p>
<p>Whatever the convention or rule is, one of the best steps you can take is to <strong>find a way to automatically enforce the convention</strong> once it can be established.</p>
<p>The class of conventions can encompass a wide array of rules; anything from the formatting of the code, naming conventions, to obscure ways of doing X with component Y that if not done in that way will cause problems.</p>
<p>Finding a way to automatically check and enforce conventions will help to not only keep the project on track if a newer developer is onboard and isn't aware of the convention to even catching the most senior developer when they forget the convention all together (It's happened to me - forget).</p>
<h1>An example of a project convention</h1>
<p>In the past, I worked on a mutual fund and stock trading engine. This entire system depended heavily on time in various places like billing, trading, etc. Deep down in the core of the application we built in an abstraction over the core Date implementation. This abstraction allowed us to do things like roll the date back for testing or debugging purposes or simulate billing over time rages.</p>
<p>However, if someone ever used a <code>new Date()</code> in the code, this would break the convention by not using our abstraction and not allow us to roll time properly. This could lead to serious or hard to find bugs.</p>
<p>Detecting the miss-use of Date in this application was a great place for automated enforcement.</p>
<p>The above can be caught by running code reviews. However, we baked this convention into the system and automated the enforcement of it so that the issue could be caught much earlier in the development lifecycle. With a well-placed a unit/integration test that searched through the code base for uses of <code>new Date()</code> and raised an error message explaining why, we were able to be sure the projects convention was held and avoid potential bugs in the future.</p>
<h1>Fail with a solid path forward</h1>
<p>In the automated convention enforcement described above, the convention would not just fail a test with a generic <code>do not use new Date()...</code> message.</p>
<p>This is a good place to document or share a story about why <code>new Date()</code> was not allowed. We failed the test with a long error message that described both why not to use <code>new Date()</code> and we included a sample snippet of what to use in its place.</p>
<p>You want to include the why as well as the what here to make adoption of the conventions easier going forward for those new to the team or project.</p>
<h1>Allow special exclusions</h1>
<p>Most conventions are generalizations that may not ALWAYS be necessary or ideal. There often exceptions to the rule in software development, so allowing the test code to be extended to enable exclusions to this rule is a good thing.</p>
<p>In the example  above we had a place in the unit test that allowed us to say &quot;In component M method Y we allowed the use of a single case of <code>new Date()</code>&quot;. The first exercise of the exclusion was built in to the original abstraction over time. But there were a couple other places we allowed it as I recall.</p>
<h1>Some automation approaches</h1>
<p>Depending on the convention, the approach to automation can vary. Sometimes it's as easy as adding a simple unit test. Other times it requires you jump out to a command line utility that searches the entire codebase.</p>
<p>Whatever the convention, try to come up with a simple approach that can automatically be run through a continuous integration environment and can freely be there to watch over you and your team's conventions.</p>
<h1>Tools to help enforce conventions</h1>
<p>I've started to <a href="https://github.com/staxmanade/automated-conventions">compile a small list</a> of tools that you may consider to help enforce conventions on your team. Please feel free to suggest others by submitting a pull-request.</p>
<p>Happy Automating!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JSMP/SystemJS Starter Plunker]]></title>
        <id>http://staxmanade.com/2015/09/jsmp-systemjs-starter-plunker/</id>
        <link href="http://staxmanade.com/2015/09/jsmp-systemjs-starter-plunker/">
        </link>
        <updated>2015-09-09T05:35:11Z</updated>
        <summary type="html"><![CDATA[I'm writing this post more for myself as a quick way to get going with JSPM, but if you find it useful please feel free.]]></summary>
        <content type="html"><![CDATA[<p>I'm writing this post more for myself as a quick way to get going with JSPM, but if you find it useful please feel free.</p>
<p>Since I've recently been playing with <a href="http://jspm.io">JSPM</a>, I've found it useful to kick-start my prototyping with a plunk. I've created a number of starter plunks below (and continue to add to the list.</p>
<h1>Full list of JSPM starter plunks</h1>
<h2><a href="http://plnkr.co/edit/RwUyLb?p=preview">JSPM Starter</a></h2>
<h2><a href="http://plnkr.co/edit/XWVTSx?p=preview">JSPM, React</a></h2>
<h2><a href="http://plnkr.co/edit/LLQQqg?p=preview">JSPM, MochaJS</a></h2>
<h2><a href="http://plnkr.co/edit/TFbsNJ?p=preview">JSPM, React, MochaJS</a></h2>
<h2><a href="http://plnkr.co/edit/QPDetQ?p=preview">JSPM, React, MochaJS, (Sample jsx Component test)</a></h2>
<h2><a href="http://plnkr.co/edit/XKrZHJ?p=preview">JSPM, React, WinJS</a></h2>
<h2><a href="http://plnkr.co/edit/feKPEx?p=preview">JSPM, React, WinJS, MochaJS</a></h2>
<hr>
<h1>How to use:</h1>
<ol>
<li>Click one of the links above</li>
<li>Review the various files. Open and edit the <code>app.js</code> file</li>
<li>Start writing code!</li>
</ol>
<blockquote>
<p>Be sure to open your developer tools and monitor any console output for errors...</p>
</blockquote>
<p>If you want to take more of a test driven approach to your prototype take a look at <a href="http://staxmanade.com/2015/09/browser-only-mochajs-tests-using-systemjs/">MochaJS with JSPM</a> or go directly to the <a href="http://plnkr.co/edit/LLQQqg?p=preview">JSPM/MochaJS Plunk</a></p>
<p>Happy Prototyping!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Browser only MochaJS tests using SystemJS]]></title>
        <id>http://staxmanade.com/2015/09/browser-only-mochajs-tests-using-systemjs/</id>
        <link href="http://staxmanade.com/2015/09/browser-only-mochajs-tests-using-systemjs/">
        </link>
        <updated>2015-09-04T22:41:38Z</updated>
        <summary type="html"><![CDATA[I've been poking at [SystemJS](https://github.com/systemjs/systemjs) (you may have heard of it through [JSPM](http://jspm.io)) and one of the first th...]]></summary>
        <content type="html"><![CDATA[<p>I've been poking at <a href="https://github.com/systemjs/systemjs">SystemJS</a> (you may have heard of it through <a href="http://jspm.io">JSPM</a>) and one of the first things I like to setup when playing with a new JS framework is a way to run <a href="https://mochajs.org">MochaJS</a> unit tests which allow me to test-drive my prototypes and in this case the best part is we don't have to do any local command line installations or crazy gulp/grunt builds. We can right in the browser start writing plain ES6 and prototype using a library from <a href="https://npmjs.org">npm</a> or <a href="https://github.com">github</a>.</p>
<p>SystemJS is a very exciting project with it's ability to import modules/code right from you're JS code itself. You can write you're JS using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">ES6 import</a> syntax and in many cases SystemJS will magically import code via NPM or GitHub directly.</p>
<h1>TL;DR</h1>
<p>If you want to skip the details below and just see the <a href="http://plnkr.co/edit/LLQQqg?p=preview">plnkr.co</a> go right ahead!</p>
<h1>How to run our first Mocha test</h1>
<p>First we need to get a simple web page setup. I'm going to use <a href="http://plnkr.co/">plnkr.co</a> as it allows me to specify multiple files. This will allow me to more easily componentize my code for cleaner extraction into a project, gist or other...</p>
<p>Once you have a basic Plunker setup go ahead and delete everything except <code>index.html</code> of for now.</p>
<p>Now we're ready to start throwing our code in here... But before you do open you're browser's developer tools. I'm using Chrome on the Mac so <code>Cmd+Option+j</code> will do it. We need to be able to see the javascript console in case we see any errors with SystemJS loading of modules.</p>
<p><code>index.html</code> &lt;- paste the below in for you're Plunker <code>index.html</code>.</p>
<pre><code><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"https://jspm.io/system@0.18.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/javascript"</span>&gt;</span><span class="actionscript">
    System.<span class="hljs-keyword">import</span>(<span class="hljs-string">'./testInit.js'</span>);
  </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre>
<p>With the above in the <code>index.html</code> you should see some errors printed to the console as SystemJS is trying to load <code>./testInit.js</code> (but we haven't created it yet).</p>
<p>Before we create the <code>testInit.js</code> file let's first create a couple sample MochaJS test files that we want to test.</p>
<p>Here's our first test file: name it <code>mochaTest1.js</code></p>
<p>Something cool about this test is once we get mocha wired up correctly, this test shows how seamlessly you can take a dependency on a 3rd party library like <a href="http://chaijs.com/">chaijs</a> for help with assertions.</p>
<pre><code><span class="hljs-keyword">import</span> { expect } <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;

describe(<span class="hljs-string">"This is a describe"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  it(<span class="hljs-string">"sample test that should pass"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    expect(<span class="hljs-literal">true</span>).to.equal(<span class="hljs-literal">true</span>);
  });
  it(<span class="hljs-string">"sample test that should fail"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    expect(<span class="hljs-literal">true</span>).to.equal(<span class="hljs-literal">false</span>);
  });
});
</code></pre>
<p>Create another test file <code>mochaTest2.js</code></p>
<pre><code><span class="hljs-keyword">import</span> { expect } <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;

describe(<span class="hljs-string">"This is another describe"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  it(<span class="hljs-string">"sample test that should pass"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    expect(<span class="hljs-literal">true</span>).to.equal(<span class="hljs-literal">true</span>);
  });
  it(<span class="hljs-string">"sample test that should fail"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    expect(<span class="hljs-literal">true</span>).to.equal(<span class="hljs-literal">false</span>);
  });
});
</code></pre>
<p>Creating two test files allows this sample to show how you can easily create and test multiple modules.</p>
<h1>The meat and potatoes</h1>
<p>Now is the juicy part on how to get Mocha to play nicely with this setup and run our tests.</p>
<p>Create a file and call it <code>testInit.js</code> (same as we named in our <code>index.html</code> and referenced it via <code>System.import('./testInit.js')</code>) and paste the below.</p>
<p>Feel free to read through it as I commented it thoroughly.</p>
<pre><code><span class="hljs-comment">//</span>
<span class="hljs-comment">// This tells SystemJS to load the mocha library</span>
<span class="hljs-comment">// and allows us to interact with the library below.</span>
<span class="hljs-comment">//</span>
<span class="hljs-keyword">import</span> mocha <span class="hljs-keyword">from</span> <span class="hljs-string">'mocha'</span>;

<span class="hljs-comment">//</span>
<span class="hljs-comment">// This defines the list of test files we want to load and run tests against.</span>
<span class="hljs-comment">//</span>
<span class="hljs-keyword">var</span> mochaTestScripts = [
  <span class="hljs-string">'./mochaTest1.js'</span>,
  <span class="hljs-string">'./mochaTest2.js'</span>
];

<span class="hljs-comment">//</span>
<span class="hljs-comment">// If you have a global or two that get exposed from your</span>
<span class="hljs-comment">// tests that is expected you can include them here</span>
<span class="hljs-comment">//</span>
<span class="hljs-keyword">var</span> allowedMochaGlobals = [
  <span class="hljs-string">'jQuery'</span>
]


<span class="hljs-comment">//</span>
<span class="hljs-comment">// Mocha needs a &lt;div id="mocha"&gt;&lt;/div&gt; for the browser</span>
<span class="hljs-comment">// test reporter to inject test results in to the U.I.</span>
<span class="hljs-comment">// Below just injects it at the bottom of the page. (You can get fancy here)</span>
<span class="hljs-comment">// Maybe you create a button in your website and allow anyone to run tests.</span>
<span class="hljs-comment">// Check out http://staxmanade.com/2015/03/in-app-unit-tests/ for more on the thought</span>
<span class="hljs-comment">//</span>
<span class="hljs-keyword">var</span> mochaDiv = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);
mochaDiv.id = <span class="hljs-string">"mocha"</span>;
<span class="hljs-built_in">document</span>.body.appendChild(mochaDiv);

<span class="hljs-comment">//</span>
<span class="hljs-comment">// Importing mocha with JSPM and ES6 doesn't expose the usual mocha globals.</span>
<span class="hljs-comment">// I found this is one way to manually expose the globals, however if you know of a better way please let me know...</span>
<span class="hljs-comment">//</span>
mocha.suite.on(<span class="hljs-string">'pre-require'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) </span>{
  <span class="hljs-keyword">var</span> exports = <span class="hljs-built_in">window</span>;

  exports.afterEach = context.afterEach || context.teardown;
  exports.after = context.after || context.suiteTeardown;
  exports.beforeEach = context.beforeEach || context.setup;
  exports.before = context.before || context.suiteSetup;
  exports.describe = context.describe || context.suite;
  exports.it = context.it || context.test;
  exports.setup = context.setup || context.beforeEach;
  exports.suiteSetup = context.suiteSetup || context.before;
  exports.suiteTeardown = context.suiteTeardown || context.after;
  exports.suite = context.suite || context.describe;
  exports.teardown = context.teardown || context.afterEach;
  exports.test = context.test || context.it;
  exports.run = context.run;

  <span class="hljs-comment">// now use SystemJS to load all test files</span>
  <span class="hljs-built_in">Promise</span>
    .all(mochaTestScripts.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">testScript</span>) </span>{
      <span class="hljs-keyword">return</span> System.import(testScript);
    })).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
      mocha.checkLeaks();
      mocha.globals(allowedMochaGlobals);
      mocha.run();
    }, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>{
      <span class="hljs-built_in">console</span>.error(<span class="hljs-string">"Error loading test modules"</span>);
      <span class="hljs-built_in">console</span>.error(err);
    });

});

mocha.setup(<span class="hljs-string">'bdd'</span>);
</code></pre>
<blockquote>
<p>Please let me know if you know of an easier way to get access to the mochas globals using SystemJS. The below works, but is a bit uncomfortable.</p>
</blockquote>
<h1>MochaJS Tests Right in the Browser...</h1>
<p><strong>How awesome is this.</strong> Couple bits of bootstrap code, and we can go author whatever we want right in the browser using ES6 (err EcmaScript 2015) and we're off and running.</p>
<h1><img class="emoji" title="warning" alt="warning" src="https://assets-cdn.github.com/images/icons/emoji/unicode/26a0.png" height="20" width="20" align="absmiddle"> NOT FOR PRODUCTION WORKFLOWS (yet)! <img class="emoji" title="warning" alt="warning" src="https://assets-cdn.github.com/images/icons/emoji/unicode/26a0.png" height="20" width="20" align="absmiddle"></h1>
<p>This approach is primarily for allowing quick prototyping. Don't implement a complete app like this and then expect any performance. SystemJS can potentially download a large number of dependencies and you should read up on <a href="https://github.com/jspm/jspm-cli/wiki/Production-Workflows">JSPM production workflows</a>.</p>
<p>Happy Browser-Only Testing.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 1 - Introduction]]></title>
        <id>http://staxmanade.com/2015/08/habit-of-a-solid-developer-introduction/</id>
        <link href="http://staxmanade.com/2015/08/habit-of-a-solid-developer-introduction/">
        </link>
        <updated>2015-08-23T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 1 - Introduction]]></summary>
        <content type="html"><![CDATA[<p>I've been thinking about some of the software development related habits that I've practiced and acquired over the years. I thought putting some of these down in posts and sharing would both help me solidify my own thinking on the subjects, but also provide a good place to link other developers or anyone I would like to send a topic when the context justifies it.</p>
<p>For this first post, I'd like to highlight some older posts that fit well into this category:</p>
<ul>
<li><a href="http://staxmanade.com/2012/01/you-are-responsible-for-making-that/">You are responsible for making that feature work. Write a test. Just do itâ¦</a></li>
<li><a href="http://staxmanade.com/2014/02/segregate-your-code-commits-into-tiny/">Segregate your code commits into tiny topical changes</a></li>
<li><a href="http://staxmanade.com/2013/12/leave-yourself-breadcrumb-for-tomorrow/">Leave yourself a breadcrumb for tomorrow.</a></li>
<li><a href="http://staxmanade.com/2013/05/developer-humor/">Developer humor</a>
<ul>
<li>Not a practice - but good to take a step back and laugh a bit...</li>
</ul>
</li>
<li><a href="http://staxmanade.com/2014/03/rake-psake-grunt-gulp-jake-make-cake/">rake, psake, grunt, gulp, jake, make, cake, brunch, ant, bash, maven, or fabric. as long as you putOnAHelmet</a></li>
<li><a href="http://staxmanade.com/2014/11/one-of-the-simplest-things-you-can-do-to-improve-email-communication/">One of the Simplest Things You can do to Improve Email Communication</a></li>
</ul>
<p>In future posts I'm going to write down some of the habits that I think have helped me become a better developer over the years. While I get glimpses of (being the old guy) in a room of developers, I know that my learning is never done and my future has more personal growth than I can even imagine. Regardless, I hope you find these posts useful.</p>
<p>Happy Deving!</p>
<p>ï»¿
<div class="seriesNote">
    <p>This article is <strong>Part 1</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - (current) - Introduction
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - <a href="/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">Update or Add Documentation while Reading Code</a>
        </li>
        <li>
            Part 6 - <a href="/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">Dig a Little Deeper</a>
        </li>
        <li>
            Part 7 - <a href="/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">Changes Should be Taken with Baby Steps</a>
        </li>
        <li>
            Part 8 - <a href="/2015/11/habit-of-a-solid-developer-podcasts/">Podcasts</a>
        </li>
        <li>
            Part 9 - <a href="/2016/01/habit-of-a-solid-developer-rapid-feedback/">Rapid Feedback</a>
        </li>
    </ul>
</div></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World with TypeScript and JSX]]></title>
        <id>http://staxmanade.com/2015/08/playing-with-typescript-and-jsx/</id>
        <link href="http://staxmanade.com/2015/08/playing-with-typescript-and-jsx/">
        </link>
        <updated>2015-08-18T16:41:22Z</updated>
        <summary type="html"><![CDATA[> If you're looking for a solid TypeScript JSX tutorial [this is a great resource](https://github.com/RyanCavanaugh/jsx-intro#reusable-components).]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>If you're looking for a solid TypeScript JSX tutorial <a href="https://github.com/RyanCavanaugh/jsx-intro#reusable-components">this is a great resource</a>.</p>
</blockquote>
<p>Last night I wanted to play with TypeScripts new support for <a href="http://jsx.github.io/">JSX</a>. In this post I'll walk through my process, and what I learned along the way. Hopefully you find this useful.</p>
<p>While it doesn't yet exist in the current version (at the time of this writing TypeScript is at 1.5), you can however grab a copy of the nightly builds from npm.</p>
<h1>Get the most recent nightly build.</h1>
<pre><code>npm install -g typescript@next
</code></pre>
<blockquote>
<p>The rest of this post was run against nightly build <code>Version 1.6.0-dev.20150814</code>.</p>
</blockquote>
<h2>Given this sample React/JSX</h2>
<pre><code><span class="hljs-keyword">var</span> HelloMessage = React.createClass({
  render: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> &lt;div&gt;Hello {<span class="hljs-keyword">this</span>.props.name}&lt;/div&gt;;
  }
});

React.render(&lt;HelloMessage name=<span class="hljs-string">"John"</span> /&gt;, mountNode);
</code></pre>
<h1>Create a TypeScript version of a JSX file.</h1>
<p>Just like how TypeScript doesn't read <code>.js</code> but looks for <code>.ts</code> files (<a href="http://staxmanade.com/2014/05/how-to-compile-plain-star-dot-js-javascript-files-with-the-typescript-compiler/">unless you hack it</a>). TypeScript doesn't read <code>.jsx</code> files. It instead looks for <code>.tsx</code> files.</p>
<p>So if you save the above sample as a <code>helloWorld.tsx</code>, we can then run the <code>tsc</code> compiler against our <code>helloWorld.tsx</code> file.</p>
<p>If I run <code>tsc helloWorld.tsx</code> I get the following errors:</p>
<pre><code>&gt; tsc helloWorld<span class="hljs-class">.tsx</span>
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>)</span></span>: error TS2304: Cannot find name <span class="hljs-string">'React'</span>.
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">12</span>)</span></span>: error TS17004: Cannot use JSX unless the <span class="hljs-string">'--jsx'</span> flag is provided.
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">1</span>)</span></span>: error TS2304: Cannot find name <span class="hljs-string">'React'</span>.
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">14</span>)</span></span>: error TS17004: Cannot use JSX unless the <span class="hljs-string">'--jsx'</span> flag is provided.
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">44</span>)</span></span>: error TS2304: Cannot find name <span class="hljs-string">'mountNode'</span>.
</code></pre>
<h1>Working through the errors...</h1>
<p>I could just show you the final output that compiles, but want to include my learning process (stumbling) as I fumble through and figure out the new command.</p>
<h1>Fixing <code>error TS2304: Cannot find name 'React'.</code></h1>
<p>If you've been using TypeScript for any amount of time, the first error should be easy to see. The compiler knows nothing about this thing called <code>React</code>. And I haven't used React with TypeScript before. I don't want to go write a bunch of TypeScript type definitions for react and can easily pull down ones created already by using <code>tsd</code> to install the Definitely Typed definitions for <code>React</code>.</p>
<h3>What is tsd?</h3>
<p>If you haven't seen <a href="http://definitelytyped.org/tsd/">TSD</a> before it's a great package manger utility for TypeScript Type Definitions.</p>
<p>It can be easily installed with <code>npm install -g tsd</code>.</p>
<h3>Installing React Type Definitions</h3>
<blockquote>
<p>UPDATE: Originally below I used <code>tsd</code> to install <code>react</code> but if you check out the comments <code>react-global</code> works out better and you can avoid some of the hacks I put in place to compile React below.</p>
</blockquote>
<p><code>tsd install react</code> which <code>tsd</code> will download from <a href="http://definitelytyped.org">Definitely Typed</a> the <code>react.d.ts</code> and place it in <code>./typings/react/react.d.ts</code>.</p>
<p>I then reference the file in our <code>helloWorld.tsx</code> which gives me the following:</p>
<pre><code><span class="hljs-comment">/// &lt;reference path="./typings/react/react.d.ts" /&gt;</span>

<span class="hljs-keyword">var</span> HelloMessage = React.createClass({
  render: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> &lt;div&gt;Hello {<span class="hljs-keyword">this</span>.props.name}&lt;/div&gt;;
  }
});

React.render(&lt;HelloMessage name=<span class="hljs-string">"John"</span> /&gt;, mountNode);
</code></pre>
<p>When I re-run <code>tsc helloWorld.tsx</code> hoping to get rid of the first error: hmmm</p>
<pre><code>&gt; tsc helloWorld<span class="hljs-class">.tsx</span>
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">20</span>)</span></span>: error TS2304: Cannot find name <span class="hljs-string">'React'</span>.
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">12</span>)</span></span>: error TS17004: Cannot use JSX unless the <span class="hljs-string">'--jsx'</span> flag is provided.
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">9</span>,<span class="hljs-number">1</span>)</span></span>: error TS2304: Cannot find name <span class="hljs-string">'React'</span>.
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">9</span>,<span class="hljs-number">14</span>)</span></span>: error TS17004: Cannot use JSX unless the <span class="hljs-string">'--jsx'</span> flag is provided.
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">9</span>,<span class="hljs-number">44</span>)</span></span>: error TS2304: Cannot find name <span class="hljs-string">'mountNode'</span>.
</code></pre>
<p>Well, that didn't get rid of our <code>error TS2304: Cannot find name 'React'.</code>. This threw me for a bit but eventually figured out that you need set it up by adding <code>import React = __React;</code>.</p>
<p>So that gives us this:</p>
<pre><code><span class="hljs-comment">/// &lt;reference path="./typings/react/react.d.ts" /&gt;</span>
<span class="hljs-preprocessor"><span class="hljs-keyword">import</span> React = __React;</span>

<span class="hljs-keyword">var</span> HelloMessage = React.createClass({
  render: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> &lt;div&gt;Hello {<span class="hljs-keyword">this</span>.props.name}&lt;/div&gt;;
  }
});

React.render(&lt;HelloMessage name=<span class="hljs-string">"John"</span> /&gt;, mountNode);
</code></pre>
<p>Now we should see some errors going away. <strong>And we do...</strong></p>
<pre><code>&gt; tsc helloWorld<span class="hljs-class">.tsx</span>
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">12</span>)</span></span>: error TS17004: Cannot use JSX unless the <span class="hljs-string">'--jsx'</span> flag is provided.
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">14</span>)</span></span>: error TS2607: JSX element class does not support attributes because it does not have <span class="hljs-tag">a</span> <span class="hljs-string">'props'</span> property
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">14</span>)</span></span>: error TS17004: Cannot use JSX unless the <span class="hljs-string">'--jsx'</span> flag is provided.
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">44</span>)</span></span>: error TS2304: Cannot find name <span class="hljs-string">'mountNode'</span>.
</code></pre>
<h1>Fixing <code>error TS17004: Cannot use JSX unless the '--jsx' flag is provided.</code></h1>
<p>The next error is new to me, but it makes some sense, so I add the <code>--jsx</code> flag to <code>tsc</code> and try <code>tsc --jsx helloWorld.tsx</code>, but looks like I missed a parameter to <code>--jsx</code>.</p>
<pre><code>&gt; tsc --jsx helloWorld.tsx
<span class="hljs-keyword">message</span> TS6081: Argument <span class="hljs-keyword">for</span> <span class="hljs-string">'--jsx'</span> must be <span class="hljs-string">'preserve'</span> <span class="hljs-keyword">or</span> <span class="hljs-string">'react'</span>.
</code></pre>
<p>In the current iteration of TypeScript 1.6 appears to have two options for <code>--jsx</code>, both <code>preserve</code> or <code>react</code>.</p>
<ul>
<li><code>preserve</code> will keep the <code>jsx</code> in the output. I presume this is so you can use tools like <code>JSX</code> to actually provide the translation.</li>
<li><code>react</code> will remove the <code>jsx</code> syntax and turn it in to plain javascript so <code>&lt;div&gt;&lt;/div&gt;</code> in the TSX file would become <code>React.createElement(&quot;div&quot;, null)</code>.</li>
</ul>
<p>By passing the <code>react</code> option, here's where we end up:</p>
<pre><code>&gt; tsc --jsx react helloWorld<span class="hljs-class">.tsx</span>
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">11</span>,<span class="hljs-number">14</span>)</span></span>: error TS2607: JSX element class does not support attributes because it does not have <span class="hljs-tag">a</span> <span class="hljs-string">'props'</span> property
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">11</span>,<span class="hljs-number">44</span>)</span></span>: error TS2304: Cannot find name <span class="hljs-string">'mountNode'</span>.
</code></pre>
<p>I'm going to tackle the last error next, as initially I didn't understand the JSX error above.</p>
<h1>Fixing <code>error TS2304: Cannot find name 'mountNode'.</code></h1>
<p>This one I'll just make the compiler happy and presume we defined <code>mountNode</code> as an html element probably a <code>&lt;div id=&quot;mountNode&quot;&gt;&lt;/div&gt;</code> somewhere in the global scope to keep this example short.</p>
<p>I place <code>declare var mountNode: any;</code> near the top of my <code>helloWorld.tsx</code> file and we're left with one last error:</p>
<pre><code>&gt; tsc <span class="hljs-comment">--jsx react helloWorld.tsx</span>
helloWorld.tsx(<span class="hljs-number">10</span>,<span class="hljs-number">14</span>): <span class="hljs-keyword">error</span> TS2607: JSX element <span class="hljs-type">class</span> <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> support attributes because <span class="hljs-keyword">it</span> <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> have a 'props' <span class="hljs-keyword">property</span>
</code></pre>
<h1>Fixing <code>error TS2607: JSX element class does not support attributes because it does not have a 'props' property</code></h1>
<p>This last error is actually the one that had me stumped, and mostly why I'm writing this lengthy post so I hope you find it and can work through it a little quicker than it took me.</p>
<p>What's happening here is TypeScript is doing what it was intended to do. It's statically checking our JSX in this case.</p>
<p>If you look at our sample above where we call <code>React.createClass(...)</code> and compare that to the type definition we see: <code>function createClass&lt;P, S&gt;(spec: ComponentSpec&lt;P, S&gt;): ClassicComponentClass&lt;P&gt;;</code> you may notice <code>P</code> and <code>S</code> generic parameters to <code>createClass&lt;P, S&gt;</code> which I didn't supply earlier.</p>
<p>The naming here wasn't immediately obvious, but some snooping around in the type definitions and I eventually found out <code>P</code> is referring to the type we pass in defining the structure of the react <code>props</code> and <code>S</code> defines the <code>state</code>.</p>
<p>So in this Hello World example when we placed <code>name=&quot;John&quot;</code> attribute inside the <code>&lt;HelloMessage name=&quot;John&quot; /&gt;</code> element and since we didn't give a <code>P</code> or <code>S</code> to the <code>React.createClass&lt;P,S&gt;(...)</code>, TypeScript was providing static type checking against an unknown type for <code>P &amp; S</code>. In this case saying that we can't apply the attributes to the element because we did not provide a generic type <code>P</code> to define what <code>props</code> are allowed to be included.</p>
<p>To fix this I create a type by using an <code>interface</code> like below:</p>
<pre><code><span class="hljs-tag">interface</span> <span class="hljs-tag">HelloWorldProps</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">name</span>:<span class="hljs-value"> string</span></span>;
}</span>
</code></pre>
<p>When I call <code>React.createClass</code> I pass in the <code>HelloWorldProps</code> interface for the <code>props</code> (<code>P</code>) and an <code>any</code> for the state (<code>S</code>) like so: <code>React.createClass&lt;HelloWorldProps, any&gt;(...)</code></p>
<h1>YAY IT COMPILES!!!</h1>
<p>Compiling the below by using <code>tsc --jsx react helloWorld.tsx</code></p>
<pre><code><span class="hljs-comment">/// &lt;reference path="./typings/react/react.d.ts" /&gt;</span>
<span class="hljs-preprocessor"><span class="hljs-keyword">import</span> React = __React;</span>
declare <span class="hljs-keyword">var</span> mountNode: any;

<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HelloWorldProps</span> </span>{
  name: string;
}

<span class="hljs-keyword">var</span> HelloMessage = React.createClass&lt;HelloWorldProps, any&gt;({
  render: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> &lt;div&gt;Hello {<span class="hljs-keyword">this</span>.props.name}&lt;/div&gt;;
  }
});

React.render(&lt;HelloMessage name=<span class="hljs-string">"John"</span> /&gt;, mountNode);
</code></pre>
<p>We get the following output in <code>helloWorld.js</code></p>
<pre><code><span class="hljs-comment">/// &lt;reference path="./typings/react/react.d.ts" /&gt;</span>
<span class="hljs-keyword">var</span> React = __React;
<span class="hljs-keyword">var</span> HelloMessage = React.createClass({
    render: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">"div"</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">"Hello "</span>, <span class="hljs-keyword">this</span>.props.name, React.createElement(<span class="hljs-string">"div"</span>, <span class="hljs-literal">null</span>));
    }
});
React.render(React.createElement(HelloMessage, {<span class="hljs-string">"name"</span>: <span class="hljs-string">"John"</span>}), mountNode);
</code></pre>
<h1>Let's improve it now...</h1>
<p>Since we started with a plain JavaScript version of our sample and we're now using TypeScript we get to take advantage of some of what TypeScript brings to the table.</p>
<p>But before we do this, let's first break our code (from a compiler) perspective to see what the above gave us...</p>
<h1>Let's break our example on purpose to see how TypeScript responds?</h1>
<p>I changed one character in two places in the working <code>helloWorld.tsx</code> file and when I run the compiler I get the following two errors. Can you spot what changed?</p>
<pre><code><span class="hljs-comment">/// &lt;reference path="./typings/react/react.d.ts" /&gt;</span>
<span class="hljs-keyword">import</span> React = __React;
<span class="hljs-keyword">declare</span> <span class="hljs-keyword">var</span> mountNode: <span class="hljs-built_in">any</span>;

<span class="hljs-interface"><span class="hljs-keyword">interface</span> HelloWorldProps </span>{
  Name: <span class="hljs-built_in">string</span>;
}

<span class="hljs-keyword">var</span> HelloMessage = React.createClass&lt;HelloWorldProps, <span class="hljs-built_in">any</span>&gt;({
  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> &lt;div&gt;Hello {<span class="hljs-keyword">this</span>.props.mane} &lt;div&gt;&lt;<span class="hljs-regexp">/div&gt;&lt;/</span>div&gt;;
  }
});

React.render(&lt;HelloMessage name=<span class="hljs-string">"John"</span> /&gt;, mountNode);
</code></pre>
<p>Output:</p>
<pre><code>&gt; tsc --jsx react helloWorld<span class="hljs-class">.tsx</span>
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">15</span>,<span class="hljs-number">14</span>)</span></span>: error TS2324: Property <span class="hljs-string">'Name'</span> is missing <span class="hljs-keyword">in</span> type <span class="hljs-string">'HelloWorldProps'</span>.
helloWorld.<span class="hljs-function"><span class="hljs-title">tsx</span><span class="hljs-params">(<span class="hljs-number">15</span>,<span class="hljs-number">28</span>)</span></span>: error TS2339: Property <span class="hljs-string">'name'</span> does not exist on type <span class="hljs-string">'HelloWorldProps'</span>.
</code></pre>
<p>Did you spot the change made? If you did, <strong>amazing</strong>. If you didn't, don't feel bad - it's a very simple and easy error to make when writing plain javascript. One that can't be found without actually executing plain JS, debugging, running unit tests or other checkers before even finding the error.</p>
<p>If you didn't spot the change by looking directly at the code, can you spot the change by reading the compiler error output?</p>
<p>Ok, give up? - I changed the <code>name</code> to <code>Name</code> in the <code>HelloWorldProps</code> interface definition AND in the JSX <code>this.props.mane</code> I spelled the props name <code>mane</code> wrong (should be <code>Name</code> according to our interface definition). So then why did we only get the error on line 15 (that's the <code>React.render(...)</code> line).</p>
<p>TypeScript in this case is using the <code>HelloWorldProps</code> interface and it's definition to type-check the attributes used in the JSX <code>&lt;HelloMessage /&gt;</code>.</p>
<p>This is great, the compiler found the error right in the JSX before we even tried to execute the code.</p>
<h1>Why didn't it detect the <code>mane</code> mis-spelled variable?</h1>
<p>I'm going to just take a guess on this one but I'm not a React guy yet, so it may have something to do with react internals (that I'm not feeling like digging into at the moment).</p>
<p>If you look at the <code>react.d.ts</code> you'll see that <code>React.createClass&lt;P,S&gt;()</code> returns a type of <code>ClassicComponentClass&lt;P&gt;</code>.</p>
<p>Thanks to a tip from Ryan (ya, the famous Ryan from the TypeScript team) has a great <a href="https://github.com/RyanCavanaugh/jsx-intro">write up about TypeScript and JSX</a> we should be avoiding all of the above use of <code>React.createClass(...)</code> and instead using the <code>ES6</code> <code>extends</code> functionality which we can leverage in TypeScript.</p>
<h1>Let's re-write...</h1>
<p>Turning the <code>HelloMessage</code> variable into an ES6 <code>class</code> we now also get type checking inside the component on <code>this.props</code> options. <strong>YAY!!!</strong>:</p>
<pre><code><span class="hljs-comment">/// &lt;reference path="./typings/react/react.d.ts" /&gt;</span>
<span class="hljs-keyword">import</span> <span class="hljs-type">React</span> = __React;
declare <span class="hljs-keyword">var</span> mountNode: any;

interface <span class="hljs-type">HelloWorldProps</span> <span class="hljs-keyword">extends</span> <span class="hljs-type">React</span>.<span class="hljs-type">Props</span>&lt;any&gt; {
  <span class="hljs-type">Name</span>: string;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloMessage</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span></span> <span class="hljs-title">React</span>.<span class="hljs-title">Component&lt;HelloWorldProps</span>, {</span>}&gt; {
  render() {
    <span class="hljs-keyword">return</span> &lt;div&gt;<span class="hljs-type">Hello</span> {<span class="hljs-keyword">this</span>.props.mane}&lt;/div&gt;;
  }
}

<span class="hljs-type">React</span>.render(&lt;<span class="hljs-type">HelloMessage</span> name=<span class="hljs-string">"John"</span> /&gt;, mountNode);
</code></pre>
<p>The above gives us the following errors:</p>
<pre><code>&gt; tsc <span class="hljs-comment">--jsx react helloWorld.tsx</span>
helloWorld.tsx(<span class="hljs-number">11</span>,<span class="hljs-number">35</span>): error TS2339: <span class="hljs-keyword">Property</span> <span class="hljs-attribute">'mane</span>' does <span class="hljs-keyword">not</span> exist <span class="hljs-keyword">on</span> <span class="hljs-keyword">type</span> <span class="hljs-attribute">'HelloWorldProps</span>'.
helloWorld.tsx(<span class="hljs-number">15</span>,<span class="hljs-number">14</span>): error TS2324: <span class="hljs-keyword">Property</span> <span class="hljs-attribute">'Name</span>' <span class="hljs-keyword">is</span> missing <span class="hljs-keyword">in</span> <span class="hljs-keyword">type</span> <span class="hljs-attribute">'HelloWorldProps</span>'.
helloWorld.tsx(<span class="hljs-number">15</span>,<span class="hljs-number">28</span>): error TS2339: <span class="hljs-keyword">Property</span> <span class="hljs-attribute">'name</span>' does <span class="hljs-keyword">not</span> exist <span class="hljs-keyword">on</span> <span class="hljs-keyword">type</span> <span class="hljs-attribute">'HelloWorldProps</span>'.
</code></pre>
<h1>Final Answer</h1>
<p>So, a bit long winded, but below is the final sample HelloWorld React TypeScript JSX prototype.</p>
<pre><code><span class="hljs-comment">/// &lt;reference path="./typings/react/react.d.ts" /&gt;</span>
<span class="hljs-keyword">import</span> <span class="hljs-type">React</span> = __React;
declare <span class="hljs-keyword">var</span> mountNode: any;

interface <span class="hljs-type">HelloWorldProps</span> <span class="hljs-keyword">extends</span> <span class="hljs-type">React</span>.<span class="hljs-type">Props</span>&lt;any&gt; {
  name: string;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloMessage</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span></span> <span class="hljs-title">React</span>.<span class="hljs-title">Component&lt;HelloWorldProps</span>, {</span>}&gt; {
  render() {
    <span class="hljs-keyword">return</span> &lt;div&gt;<span class="hljs-type">Hello</span> {<span class="hljs-keyword">this</span>.props.name}&lt;/div&gt;;
  }
}

<span class="hljs-type">React</span>.render(&lt;<span class="hljs-type">HelloMessage</span> name=<span class="hljs-string">"John"</span> /&gt;, mountNode);
</code></pre>
<h1>Wrap-up</h1>
<p>While it seemed a bit challenging getting started with TypeScript and JSX I could really see the benefit of the compiler helping out with React components going forward, and look forward to the future of this part of the project.</p>
<p>Thanks to the TypeScript team and community that helped bring all of this support together!</p>
<p>Happy <code>TSXing</code>!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Debugging iOS AutoLayout Issues]]></title>
        <id>http://staxmanade.com/2015/06/debugging-ios-autolayout-issues/</id>
        <link href="http://staxmanade.com/2015/06/debugging-ios-autolayout-issues/">
        </link>
        <updated>2015-06-01T16:33:59Z</updated>
        <summary type="html"><![CDATA[This tip may not be news to you, but it was to me so I'll put this up here to help you, but more to help myself when I get stuck down the road and for...]]></summary>
        <content type="html"><![CDATA[<p>This tip may not be news to you, but it was to me so I'll put this up here to help you, but more to help myself when I get stuck down the road and forget how to do this.</p>
<h1>Background</h1>
<p>I just stumbled upon a way to help when debugging and diagnosing issues around ambiguous auto layout constraints (you know the kind where iOS just picks the one it feels like to remove?).</p>
<p>Today I was researching why I was receiving the following output in my debugger console:</p>
<pre><code>Unable <span class="hljs-built_in">to</span> simultaneously satisfy constraints.
    Probably <span class="hljs-keyword">at</span> least <span class="hljs-constant">one</span> <span class="hljs-operator">of</span> <span class="hljs-operator">the</span> constraints <span class="hljs-operator">in</span> <span class="hljs-operator">the</span> following list is <span class="hljs-constant">one</span> you don<span class="hljs-string">'t want. Try this: (1) look at each constraint and try to figure out which you don'</span>t expect; (<span class="hljs-number">2</span>) find <span class="hljs-operator">the</span> code that added <span class="hljs-operator">the</span> unwanted constraint <span class="hljs-operator">or</span> constraints <span class="hljs-operator">and</span> fix <span class="hljs-keyword">it</span>. (Note: If you<span class="hljs-string">'re seeing NSAutoresizingMaskLayoutConstraints that you don'</span>t understand, refer <span class="hljs-built_in">to</span> <span class="hljs-operator">the</span> documentation <span class="hljs-keyword">for</span> <span class="hljs-operator">the</span> UIView property translatesAutoresizingMaskIntoConstraints)
(
    <span class="hljs-string">"&lt;NSLayoutConstraint:0x7fc82d3e18a0 H:[UIView:0x7fc82aba1210(768)]&gt;"</span>,
    <span class="hljs-string">"&lt;NSLayoutConstraint:0x7fc82d6369e0 H:[UIView:0x7fc82aba1210]-(0)-|   (Names: '|':UIView:0x7fc82d6b9f80 )&gt;"</span>,
    <span class="hljs-string">"&lt;NSLayoutConstraint:0x7fc82d636a30 H:|-(0)-[UIView:0x7fc82aba1210]   (Names: '|':UIView:0x7fc82d6b9f80 )&gt;"</span>,
    <span class="hljs-string">"&lt;NSLayoutConstraint:0x7fc82d3e7fd0 'UIView-Encapsulated-Layout-Width' H:[UIView:0x7fc82d6b9f80(50)]&gt;"</span>
)

Will attempt <span class="hljs-built_in">to</span> recover <span class="hljs-keyword">by</span> breaking constraint
&lt;NSLayoutConstraint:<span class="hljs-number">0x7fc82d3e18a0</span> H:[UIView:<span class="hljs-number">0x7fc82aba1210</span>(<span class="hljs-number">768</span>)]&gt;

Make <span class="hljs-operator">a</span> symbolic <span class="hljs-built_in">breakpoint</span> <span class="hljs-keyword">at</span> UIViewAlertForUnsatisfiableConstraints <span class="hljs-built_in">to</span> <span class="hljs-keyword">catch</span> this <span class="hljs-operator">in</span> <span class="hljs-operator">the</span> debugger.
The methods <span class="hljs-operator">in</span> <span class="hljs-operator">the</span> UIConstraintBasedLayoutDebugging category <span class="hljs-command"><span class="hljs-keyword">on</span> <span class="hljs-title">UIView</span> <span class="hljs-title">listed</span> <span class="hljs-title">in</span> &lt;<span class="hljs-title">UIKit</span>/<span class="hljs-title">UIView</span>.<span class="hljs-title">h</span>&gt; <span class="hljs-title">may</span> <span class="hljs-title">also</span> <span class="hljs-title">be</span> <span class="hljs-title">helpful</span>.</span>
</code></pre>
<p>Now, I can tell from the above that theres an issue with the height constraint(s), but looking at this, I have no idea what view is being referenced which makes it quite difficult to jump to XCode and inspect the view's constraints.</p>
<p>But I worked through it, and learned the following along the way. Hope this helps you.</p>
<h1>How to set auto layout breakpoint in Xcode debugger</h1>
<p>Using this text <code>Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger.</code> I found this great post on stack overflow on <a href="http://stackoverflow.com/questions/26389273/how-to-trap-on-uiviewalertforunsatisfiableconstraints/26389957#26389957">How to trap on UIViewAlertForUnsatisfiableConstraints</a> but have copied below for reference.</p>
<blockquote>
<p>You'll want to add a Symbolic Breakpoint. Apple provides an excellent guide on how to do this.</p>
<ol>
<li>Open the Breakpoint Navigator <code>cmd+7</code></li>
<li>Click the <code>Add</code> button in the lower left</li>
<li>Select <code>Add Symbolic Breakpoint</code>...</li>
<li>Where it says <code>Symbol</code> just type in <code>UIViewAlertForUnsatisfiableConstraints</code></li>
</ol>
<p>You can also treat it like any other breakpoint, turning it on and off, adding actions, or log messages.</p>
</blockquote>
<p>But that's only the first step. Once you've run the app and hit the breakpoint, you're left staring at assembly code and memory addresses, for example:</p>
<pre><code>UIKit`UIViewAlertForUnsatisfiableConstraints:
-&gt;  <span class="hljs-number">0x1131cc4a2</span> &lt;+<span class="hljs-number">0</span>&gt;:   pushq  %rbp
    <span class="hljs-number">0x1131cc4a3</span> &lt;+<span class="hljs-number">1</span>&gt;:   movq   %rsp, %rbp
    <span class="hljs-number">0x1131cc4a6</span> &lt;+<span class="hljs-number">4</span>&gt;:   pushq  %r15
    <span class="hljs-number">0x1131cc4a8</span> &lt;+<span class="hljs-number">6</span>&gt;:   pushq  %r14
    <span class="hljs-number">0x1131cc4aa</span> &lt;+<span class="hljs-number">8</span>&gt;:   pushq  %rbx
    <span class="hljs-number">0x1131cc4ab</span> &lt;+<span class="hljs-number">9</span>&gt;:   pushq  %rax
    <span class="hljs-number">0x1131cc4ac</span> &lt;+<span class="hljs-number">10</span>&gt;:  movq   %rsi, %r14
    <span class="hljs-number">0x1131cc4af</span> &lt;+<span class="hljs-number">13</span>&gt;:  movq   %rdi, %r15
    <span class="hljs-number">0x1131cc4b2</span> &lt;+<span class="hljs-number">16</span>&gt;:  cmpq   $-<span class="hljs-number">0x1</span>, <span class="hljs-number">0x778796</span>(%rip)     ; _UIConstraintBasedLayoutPlaySoundOnUnsatisfiable.result + <span class="hljs-number">7</span>
    <span class="hljs-number">0x1131cc4ba</span> &lt;+<span class="hljs-number">24</span>&gt;:  jne    <span class="hljs-number">0x1131cc529</span>               ; &lt;+<span class="hljs-number">135</span>&gt;
    <span class="hljs-number">0x1131cc4bc</span> &lt;+<span class="hljs-number">26</span>&gt;:  cmpb   $<span class="hljs-number">0x0</span>, <span class="hljs-number">0x778785</span>(%rip)      ; _UIConstraintBasedLayoutPlaySoundWhenEngaged.__once + <span class="hljs-number">7</span>
    <span class="hljs-number">0x1131cc4c3</span> &lt;+<span class="hljs-number">33</span>&gt;:  je     <span class="hljs-number">0x1131cc4ed</span>               ; &lt;+<span class="hljs-number">75</span>&gt;
    <span class="hljs-number">0x1131cc4c5</span> &lt;+<span class="hljs-number">35</span>&gt;:  movq   <span class="hljs-number">0x73cd8c</span>(%rip), %rdi      ; (<span class="hljs-keyword">void</span> *)<span class="hljs-number">0x0000000113925248</span>: UIDevice
    <span class="hljs-number">0x1131cc4cc</span> &lt;+<span class="hljs-number">42</span>&gt;:  movq   <span class="hljs-number">0x7108e5</span>(%rip), %rsi      ; <span class="hljs-string">"currentDevice"</span>
    <span class="hljs-number">0x1131cc4d3</span> &lt;+<span class="hljs-number">49</span>&gt;:  movq   <span class="hljs-number">0x4d7aee</span>(%rip), %rbx      ; (<span class="hljs-keyword">void</span> *)<span class="hljs-number">0x0000000114598000</span>: objc_msgSend
    <span class="hljs-number">0x1131cc4da</span> &lt;+<span class="hljs-number">56</span>&gt;:  callq  *%rbx
    <span class="hljs-number">0x1131cc4dc</span> &lt;+<span class="hljs-number">58</span>&gt;:  movq   <span class="hljs-number">0x71e375</span>(%rip), %rsi      ; <span class="hljs-string">"_playSystemSound:"</span>
    <span class="hljs-number">0x1131cc4e3</span> &lt;+<span class="hljs-number">65</span>&gt;:  movl   $<span class="hljs-number">0x3ee</span>, %edx
    <span class="hljs-number">0x1131cc4e8</span> &lt;+<span class="hljs-number">70</span>&gt;:  movq   %rax, %rdi
    <span class="hljs-number">0x1131cc4eb</span> &lt;+<span class="hljs-number">73</span>&gt;:  callq  *%rbx
    <span class="hljs-number">0x1131cc4ed</span> &lt;+<span class="hljs-number">75</span>&gt;:  cmpq   $-<span class="hljs-number">0x1</span>, <span class="hljs-number">0x77877b</span>(%rip)     ; _UIConstraintBasedLayoutLogUnsatisfiable.result + <span class="hljs-number">7</span>
    <span class="hljs-number">0x1131cc4f5</span> &lt;+<span class="hljs-number">83</span>&gt;:  jne    <span class="hljs-number">0x1131cc541</span>               ; &lt;+<span class="hljs-number">159</span>&gt;
    <span class="hljs-number">0x1131cc4f7</span> &lt;+<span class="hljs-number">85</span>&gt;:  cmpb   $<span class="hljs-number">0x0</span>, <span class="hljs-number">0x77876a</span>(%rip)      ; _UIConstraintBasedLayoutVisualizeMutuallyExclusiveConstraints.__once + <span class="hljs-number">7</span>
    <span class="hljs-number">0x1131cc4fe</span> &lt;+<span class="hljs-number">92</span>&gt;:  je     <span class="hljs-number">0x1131cc51e</span>               ; &lt;+<span class="hljs-number">124</span>&gt;
    <span class="hljs-number">0x1131cc500</span> &lt;+<span class="hljs-number">94</span>&gt;:  leaq   <span class="hljs-number">0x53ba89</span>(%rip), %rdi      ; @<span class="hljs-string">"Unable to simultaneously satisfy constraints.\n\tProbably at least one of the constraints in the following list is one you don't want. Try this: (1) look at each constraint and try to figure out which you don't expect; (2) find the code that added the unwanted constraint or constraints and fix it. (Note: If you're seeing NSAutoresizingMaskLayoutConstraints that you don't understand, refer to the documentation for the UIView property translatesAutoresizingMaskIntoConstraints) \n%@\n\nWill attempt to recover by breaking constraint \n%@\n\nMake a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger.\nThe methods in the UIConstraintBasedLayoutDebugging category on UIView listed in &lt;UIKit/UIView.h&gt; may also be helpful."</span>
    <span class="hljs-number">0x1131cc507</span> &lt;+<span class="hljs-number">101</span>&gt;: xorl   %eax, %eax
    <span class="hljs-number">0x1131cc509</span> &lt;+<span class="hljs-number">103</span>&gt;: movq   %r14, %rsi
    <span class="hljs-number">0x1131cc50c</span> &lt;+<span class="hljs-number">106</span>&gt;: movq   %r15, %rdx
    <span class="hljs-number">0x1131cc50f</span> &lt;+<span class="hljs-number">109</span>&gt;: addq   $<span class="hljs-number">0x8</span>, %rsp
    <span class="hljs-number">0x1131cc513</span> &lt;+<span class="hljs-number">113</span>&gt;: popq   %rbx
    <span class="hljs-number">0x1131cc514</span> &lt;+<span class="hljs-number">114</span>&gt;: popq   %r14
    <span class="hljs-number">0x1131cc516</span> &lt;+<span class="hljs-number">116</span>&gt;: popq   %r15
    <span class="hljs-number">0x1131cc518</span> &lt;+<span class="hljs-number">118</span>&gt;: popq   %rbp
    <span class="hljs-number">0x1131cc519</span> &lt;+<span class="hljs-number">119</span>&gt;: jmp    <span class="hljs-number">0x11331930c</span>               ; symbol stub <span class="hljs-keyword">for</span>: NSLog
    <span class="hljs-number">0x1131cc51e</span> &lt;+<span class="hljs-number">124</span>&gt;: addq   $<span class="hljs-number">0x8</span>, %rsp
    <span class="hljs-number">0x1131cc522</span> &lt;+<span class="hljs-number">128</span>&gt;: popq   %rbx
    <span class="hljs-number">0x1131cc523</span> &lt;+<span class="hljs-number">129</span>&gt;: popq   %r14
    <span class="hljs-number">0x1131cc525</span> &lt;+<span class="hljs-number">131</span>&gt;: popq   %r15
    <span class="hljs-number">0x1131cc527</span> &lt;+<span class="hljs-number">133</span>&gt;: popq   %rbp
    <span class="hljs-number">0x1131cc528</span> &lt;+<span class="hljs-number">134</span>&gt;: retq
    <span class="hljs-number">0x1131cc529</span> &lt;+<span class="hljs-number">135</span>&gt;: leaq   <span class="hljs-number">0x778720</span>(%rip), %rdi      ; _UIConstraintBasedLayoutPlaySoundOnUnsatisfiable.__once
    <span class="hljs-number">0x1131cc530</span> &lt;+<span class="hljs-number">142</span>&gt;: leaq   <span class="hljs-number">0x4fdb59</span>(%rip), %rsi      ; __block_literal_global68
    <span class="hljs-number">0x1131cc537</span> &lt;+<span class="hljs-number">149</span>&gt;: callq  <span class="hljs-number">0x11331a2a8</span>               ; symbol stub <span class="hljs-keyword">for</span>: dispatch_once
    <span class="hljs-number">0x1131cc53c</span> &lt;+<span class="hljs-number">154</span>&gt;: jmp    <span class="hljs-number">0x1131cc4bc</span>               ; &lt;+<span class="hljs-number">26</span>&gt;
    <span class="hljs-number">0x1131cc541</span> &lt;+<span class="hljs-number">159</span>&gt;: leaq   <span class="hljs-number">0x778728</span>(%rip), %rdi      ; _UIConstraintBasedLayoutLogUnsatisfiable.__once
    <span class="hljs-number">0x1131cc548</span> &lt;+<span class="hljs-number">166</span>&gt;: leaq   <span class="hljs-number">0x4fdbc1</span>(%rip), %rsi      ; __block_literal_global76
    <span class="hljs-number">0x1131cc54f</span> &lt;+<span class="hljs-number">173</span>&gt;: callq  <span class="hljs-number">0x11331a2a8</span>               ; symbol stub <span class="hljs-keyword">for</span>: dispatch_once
    <span class="hljs-number">0x1131cc554</span> &lt;+<span class="hljs-number">178</span>&gt;: jmp    <span class="hljs-number">0x1131cc4f7</span>               ; &lt;+<span class="hljs-number">85</span>&gt;
</code></pre>
<h1>What next?</h1>
<p>We can use the Xcode debug console output to gather more information than we see it initially provides.</p>
<p>In the above example I'm going to take the following output:</p>
<pre><code>Will attempt to recover by breaking constraint &lt;NSLayoutConstraint:0x7fc82d3e18a0 H:[UIView:0x7fc82aba1210(768)]&gt;
</code></pre>
<p>Pull out the <code>UIView</code>'s memory address <code>0x7fd8fe59a440</code> and use the XCode console to dig deeper and try to get a better understanding.</p>
<h1>Printing views from memory addresses</h1>
<p>The memory address <code>0x7fd8fe59a440</code> is a pointer to a <code>UIView</code>. Since we know that a <code>UIView</code> has other selectors we can query, we can begin to use these to dig deeper into the object and get a better understanding of which part of our view have auto layout constraints that are not playing nicely.</p>
<p>First we try to look at just the UIView and see if that helps us get a grasp as to which view is causing our troubles.</p>
<pre><code>po 0x7fc82aba1210
</code></pre>
<p>If this doesn't provide enough info as the below sample output shows (not very helpful).</p>
<pre><code>(lldb) po <span class="hljs-number">0x7fc82aba1210</span>
&lt;UIView: <span class="hljs-number">0x7fc82aba1210</span>; frame = (<span class="hljs-number">0</span> <span class="hljs-number">0</span>; <span class="hljs-number">768</span> <span class="hljs-number">359</span>); autoresize = RM+BM; layer = &lt;CALayer: <span class="hljs-number">0x7fc82d338960</span>&gt;&gt;
</code></pre>
<p>Maybe printing it's <a href="https://developer.apple.com/library/ios/technotes/tn2239/_index.html#//apple_ref/doc/uid/DTS40010638-CH1-SUBSECTION34"><code>recursiveDescription</code></a> will help out and in my case gives me a better idea of which component I'm actually trying to look at.</p>
<pre><code>(lldb) po [<span class="hljs-number">0x7fc82aba1210</span> recursiveDescription]
&lt;UIView: <span class="hljs-number">0x7fc82aba1210</span>; frame = (<span class="hljs-number">0</span> <span class="hljs-number">0</span>; <span class="hljs-number">768</span> <span class="hljs-number">359</span>); autoresize = RM+BM; layer = &lt;CALayer: <span class="hljs-number">0x7fc82d338960</span>&gt;&gt;
   | &lt;MYAPPButton: <span class="hljs-number">0x7fc82d61c800</span>; baseClass = UIButton; frame = (<span class="hljs-number">0</span> <span class="hljs-number">0</span>; <span class="hljs-number">768</span> <span class="hljs-number">359</span>); opaque = NO; autoresize = RM+BM; layer = &lt;CALayer: <span class="hljs-number">0x7fc82ab96570</span>&gt;&gt;
   |    | &lt;UIImageView: <span class="hljs-number">0x7fc82d3f7b10</span>; frame = (<span class="hljs-number">0</span> <span class="hljs-number">0</span>; <span class="hljs-number">0</span> <span class="hljs-number">0</span>); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: <span class="hljs-number">0x7fc82d6e7020</span>&gt;&gt;
   | &lt;UIImageView: <span class="hljs-number">0x7fc82d54a1c0</span>; frame = (<span class="hljs-number">314</span> <span class="hljs-number">110</span>; <span class="hljs-number">140</span> <span class="hljs-number">140</span>); autoresize = RM+BM; userInteractionEnabled = NO; layer = &lt;CALayer: <span class="hljs-number">0x7fc82d52def0</span>&gt;&gt;
</code></pre>
<p>Or if that's not enough context, then we can look at the view's superview and potentially even walk up the view's tree, printing out a different levels trying to understand which component is having trouble with auto layout.</p>
<pre><code>po [[0x7fc82aba1210 superview] recursiveDescription]
</code></pre>
<p>Once you've narrowed down which view inside which component is causing you trouble, now it's up to digging and finding the problematic constraint...</p>
<h1>Fix it</h1>
<p>This part I can't add much color to help you, except to start by looking in your storyboard, xib or code wherever the constraints are being added to the particular view we diagnosed above.</p>
<p>Hopefully this walk-through helps at least a little in diagnosing your auto layout constraint issues.</p>
<p>Happy debugging!</p>
]]></content>
    </entry>
</feed>