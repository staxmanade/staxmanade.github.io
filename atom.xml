<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Developing on Staxmanade]]></title>
    <link>http://staxmanade.com</link>
    <updated>2015-05-23T21:32:45Z</updated>
    <author>
        <name>Jason Jarrett</name>
        <uri>http://staxmanade.com/about</uri>
    </author>
    <link rel="alternate" href="http://staxmanade.com"/>
    <link rel="self" href="http://feeds.feedburner.com/DevelopingOnStaxmande"/>
    <rights>Copyright (C) 2008-2015 Jason Jarrett</rights>
    <generator>Feed for Node.js</generator>
    <entry>
        <title type="html"><![CDATA[Running in-app mocha tests within WinJS]]></title>
        <id>http://staxmanade.com/2015/05/running-in-app-mocha-tests-within-winjs/</id>
        <link href="http://staxmanade.com/2015/05/running-in-app-mocha-tests-within-winjs/">
        </link>
        <updated>2015-05-23T21:32:45Z</updated>
        <summary type="html"><![CDATA[> I described a while back a scenario about running [in-app unit tests](http://staxmanade.com/2015/03/in-app-unit-tests/). So if you'd like some backg...]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>I described a while back a scenario about running <a href="http://staxmanade.com/2015/03/in-app-unit-tests/">in-app unit tests</a>. So if you'd like some background on the subject have a look there before reading here.</p>
</blockquote>
<p>This post is going to give some specifics about how to run <a href="http://mochajs.org/">MochaJS</a> tests within a Microsoft Windows JavaScript application (WinJS).</p>
<h1>Prerequisites</h1>
<p>These steps assume you already have a WinJS application, possibly using the universal template or other. In the end it doesn't matter. As long as you have a project that probably has a <code>default.html</code> file and the ability to add <code>js</code> &amp; <code>css</code> files to.</p>
<h1>Get Mocha</h1>
<p>You can acquire the mocha library however you want, <a href="http://bower.io/">Bower</a>, (Npm)(<a href="http://npmjs.com/">http://npmjs.com/</a>), or download it manually from the site (<a href="http://mochajs.org/">mochajs.org</a>).</p>
<h1>Reference Mocha Within Project &amp; App</h1>
<p>However you get the mocha source, you need to both add references to the mocha js and css files into your project file either in a <code>*.jsproj</code> file or if using a universal shared app, in the shared project.</p>
<p>Then you need to include a reference to the code in your <code>default.html</code> file.</p>
<p>In my example below you can see I used bower to download the <a href="http://mochajs.org">MochaJS</a> library.</p>
<p>The <code>mocha.setup('bdd')</code> tells mocha to use the BDD style of tests which defines the <code>describe(...)</code>, <code>it(...)</code>, etc functions.</p>
<pre><code class="language-html"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"utf-8"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>MyApp.Windows<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>

    <span class="hljs-comment">&lt;!-- WinJS references --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/js/bower_components/winjs/css/ui-light.css"</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/js/bower_components/winjs/js/base.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/js/bower_components/winjs/js/ui.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

    <span class="hljs-comment">&lt;!-- TESTS--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/js/bower_components/mocha/mocha.css"</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/js/bower_components/mocha/mocha.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">
        mocha.setup(<span class="hljs-string">'bdd'</span>);
    </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

    <span class="hljs-comment">&lt;!-- My Project js/css files below... --&gt;</span>

...Rest of default.html file excluded
</code></pre>
<h1>Create a WinJS Control for hosting Mocha reporting.</h1>
<p>Below is a sample WinJS control that can be used to host the mocha html report.</p>
<pre><code class="language-html"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">style</span>&gt;</span><span class="css">
        <span class="hljs-id">#mocha</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> <span class="hljs-number">800px</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">600px</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">overflow</span>:<span class="hljs-value"> scroll</span></span>;
        <span class="hljs-rule">}</span></span>
    </span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"fragment section1page"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">section</span> <span class="hljs-attribute">aria-label</span>=<span class="hljs-value">"Main content"</span> <span class="hljs-attribute">role</span>=<span class="hljs-value">"main"</span>&gt;</span>

            <span class="hljs-comment">&lt;!-- define a button that we can use to manually run or re-run tests --&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"mochaTestsRun"</span>&gt;</span>Run Tests<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>

            <span class="hljs-comment">&lt;!-- define a checkbox that allow us to toggle auto-run 
                 of the tests when we start up the app --&gt;</span>
            Auto start <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"checkbox"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"mochaTestsRunOnStart"</span> /&gt;</span>


            <span class="hljs-comment">&lt;!-- this is a blank div we use to inject U.I. related tests --&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"testElementContainer"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

            <span class="hljs-comment">&lt;!-- mocha throws the html output in the below div --&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"mocha"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">section</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre>
<pre><code class="language-javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
<span class="hljs-pi">    "use strict"</span>;

    <span class="hljs-keyword">var</span> runMochaTests = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-comment">// If you want your tests to verify nothing is leaked globally...</span>
        mocha.checkLeaks();

        <span class="hljs-comment">// specify any globals that you are OK with your tests leaking</span>
        mocha.globals([
            <span class="hljs-string">'someGlobalIAmExpecting'</span>
        ]);

        <span class="hljs-comment">// start the test run</span>
        mocha.run();
    }

    <span class="hljs-keyword">var</span> ControlConstructor = WinJS.UI.Pages.define(<span class="hljs-string">"/js/tests/tests.html"</span>, {
        <span class="hljs-comment">// This function is called after the page control contents </span>
        <span class="hljs-comment">// have been loaded, controls have been activated, and </span>
        <span class="hljs-comment">// the resulting elements have been parented to the DOM. </span>
        ready: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(element, options)</span> </span>{
            options = options || {};

            <span class="hljs-comment">// get our possibly already cached value of whether to run the tests on startup.</span>
            <span class="hljs-keyword">var</span> runOnStart = localStorage.getItem(<span class="hljs-string">"mochaTestsRunOnStart"</span>);

            <span class="hljs-comment">// checkbox to manage auto-run state</span>
            <span class="hljs-keyword">var</span> runOnStartCheckbox = element.querySelector(<span class="hljs-string">'#mochaTestsRunOnStart'</span>);
            runOnStartCheckbox.addEventListener(<span class="hljs-string">'change'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
                localStorage.setItem(<span class="hljs-string">"mochaTestsRunOnStart"</span>, runOnStartCheckbox.checked);
            });

            <span class="hljs-comment">// button to manually trigger a test run</span>
            <span class="hljs-keyword">var</span> mochaTestsRunButton = element.querySelector(<span class="hljs-string">'#mochaTestsRun'</span>);
            mochaTestsRunButton.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
                runMochaTests();
            })
            runOnStartCheckbox.checked = runOnStart;

            <span class="hljs-keyword">if</span> (runOnStart &amp;&amp; !<span class="hljs-built_in">window</span>.hasRunMochaTestsAtLeastOnce) {
                <span class="hljs-comment">// this value is used to avoid extra test runs as we navigation around the app.</span>
                <span class="hljs-comment">// EX: if the test control is on a home pivot - we nav away and come back home</span>
                <span class="hljs-comment">// we probably don't want to auto-run the tests again. (use the menu button </span>
                <span class="hljs-comment">// instead if you want another test run)</span>
                <span class="hljs-built_in">window</span>.hasRunMochaTestsAtLeastOnce = <span class="hljs-literal">true</span>;
                runMochaTests();
            }

        },
    });

    <span class="hljs-comment">// The following lines expose this control constructor as a global. </span>
    <span class="hljs-comment">// This lets you use the control as a declarative control inside the </span>
    <span class="hljs-comment">// data-win-control attribute. </span>

    WinJS.Namespace.define(<span class="hljs-string">"Pod.UI.Controls"</span>, {
        TestsControl: ControlConstructor
    });
})();
</code></pre>
<h1>Handle global exceptions</h1>
<p>If you write any async code (difficult not to these days) an exception or assertion failure will not be trapped by the internal try/catch mechanism's of Mocha in a Windows WinJS environment.</p>
<p>We have to give Mocha a hint on how to hook into global exceptions.</p>
<p>Mocha tries to attach to the browser's global <code>window.onerror</code> method, and since a WinJS app doesn't use this same handler, we have to forward the exceptions and to mocha's attached <code>window.onerror</code> handler.</p>
<p>In you're <code>default.js</code> or wherever you configure the <code>app</code> you can attach to the <a href="https://msdn.microsoft.com/en-us/library/windows/apps/hh974768.aspx"><code>WinJS.Application.onerror</code></a> and after some exception massaging we can hand the exceptions to mocha so when a test fails it can be reported correctly.</p>
<pre><code class="language-javascript">    WinJS.Application.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(ex)</span> </span>{

        <span class="hljs-keyword">var</span> errorMessage, errorLine, errorUrl;
        <span class="hljs-keyword">if</span> (ex.detail.errorMessage) {
            errorMessage = ex.detail.errorMessage;
            errorLine = ex.detail.errorLine;
            errorUrl = ex.detail.errorUrl;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ex &amp;&amp;
            ex.detail &amp;&amp;
            ex.detail.exception &amp;&amp;
            ex.detail.exception.stack) {
            errorMessage = ex.detail.exception.stack;
            errorLine = <span class="hljs-literal">null</span>;
            errorUrl = <span class="hljs-literal">null</span>;
        }

        <span class="hljs-comment">// if window.onerror exists, assume mochajs is here and call it's error handler</span>
        <span class="hljs-comment">// This may be a poor assumption because 3rd party libraries could also attach</span>
        <span class="hljs-comment">// their handlers, but it's working for me so far...</span>
        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.onerror &amp;&amp; errorMessage) {
            <span class="hljs-built_in">window</span>.onerror(errorMessage, errorLine, errorUrl);
            
            <span class="hljs-comment">// return true signalling that the error's been </span>
            <span class="hljs-comment">// handled (keeping the whole app from crashing)</span>
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        }

        <span class="hljs-comment">// if we get here, assuming mochajs isn't running</span>
        <span class="hljs-comment">// let's log out the errors...</span>
        <span class="hljs-keyword">try</span> {
            <span class="hljs-keyword">var</span> exMessage = <span class="hljs-built_in">JSON</span>.stringify(ex, <span class="hljs-literal">null</span>, <span class="hljs-string">'  '</span>);
            <span class="hljs-built_in">console</span>.error(exMessage);
        } <span class="hljs-keyword">catch</span> (e) {
            <span class="hljs-comment">// can't JSON serialize exception object here (probably circular reference)</span>
            <span class="hljs-comment">// log what we can...</span>
            <span class="hljs-built_in">console</span>.error(ex);
            <span class="hljs-built_in">console</span>.error(e);
        }

        <span class="hljs-comment">// I like to be stopped while debugging to possibly</span>
        <span class="hljs-comment">// poke around and do further inspection</span>
        debugger;
    }
</code></pre>
<h1>Reference the test control.</h1>
<p>While developing out the application, I like to throw it front and center in the first hub of my apps home page hub control.</p>
<p>Here's an example of how to reference the above control:</p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"utf-8"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>hubPage<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/pages/hub/hub.css"</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/js/tests/tests.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>

...page details trimmed for brevity...

            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"hub"</span> <span class="hljs-attribute">data-win-control</span>=<span class="hljs-value">"WinJS.UI.Hub"</span>&gt;</span>

                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"sectionTests"</span>
                     <span class="hljs-attribute">data-win-control</span>=<span class="hljs-value">"WinJS.UI.HubSection"</span>
                     <span class="hljs-attribute">data-win-options</span>=<span class="hljs-value">"{ isHeaderStatic: true }"</span>
                     <span class="hljs-attribute">data-win-res</span>=<span class="hljs-value">"{ winControl: {'header': 'TestSection'} }"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"sectionTestscontenthost"</span> <span class="hljs-attribute">data-win-control</span>=<span class="hljs-value">"MyApp.Testing.TestsControl"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

...rest of page details trimmed for brevity...

</code></pre>
<p>If you manage to get everything wired up correctly above, when you run the app (<code>F5</code>) your mocha tests should be all set and run automatically. Oh wait, let's not forget to add a mocha test :)...</p>
<pre><code class="language-javascript">describe(<span class="hljs-string">'Mocha test spike'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{

    it(<span class="hljs-string">"should report a passing test"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
      <span class="hljs-comment">// doing nothing should be a passing test</span>
    });

    it(<span class="hljs-string">"should fail on a synchronous exception"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"Some test error to make sure mocha reports a test failure"</span>)
    });

    it(<span class="hljs-string">"should fail on an asynchronous exception"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(done)</span></span>{
        setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"Some test error to make sure mocha reports an async test failure"</span>)
            done();
        }, <span class="hljs-number">100</span>);
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"Some test error to make sure mocha reports a test failure"</span>)
    });

});
</code></pre>
<p>Save the above as your first test file, include it so it runs on startup and verify your tests run and report correctly within the test control.</p>
<p>Happy testing!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Look at where DefinitelyTyped is Now]]></title>
        <id>http://staxmanade.com/2015/04/look-at-where-definitelytyped-is-now/</id>
        <link href="http://staxmanade.com/2015/04/look-at-where-definitelytyped-is-now/">
        </link>
        <updated>2015-04-13T04:18:37Z</updated>
        <summary type="html"><![CDATA[# A Little Wondering]]></summary>
        <content type="html"><![CDATA[<h1>A Little Wondering</h1>
<p>I installed Visual Studio 2015 the other night and was just poking around and stumbled upon the <a href="http://cordova.apache.org/">Cordova</a> Project Template that is provided. This not necessarily that new, but is new to me as I spend most of my time these days working on a Mac doing iOS, Docker (for server-side stuff) and other projects. Though, I miss and still enjoy the benefits of Visual Studio for some projects.</p>
<p>While looking over the project template, I was surprised to see a familiar folder structure <code>typings/cordova/*</code> in the project.</p>
<h2>Why is this folder structure familiar?</h2>
<p>Because I created it almost 2 years ago when I <a href="http://staxmanade.com/2013/02/definitelytyped-typescript-definitions/">threw together</a> a <a href="https://github.com/DefinitelyTyped/NugetAutomation">PowerShell script</a> that chucks <a href="https://github.com/borisyankov/DefinitelyTyped">DefinitelyTyped</a> TypeScript definitions up onto <a href="http://www.nuget.org/">NuGet</a>.</p>
<p>Another example of the folder structure, while I can't say for certain, but I can only guess that when the <a href="https://github.com/winjs/winjs">winjs</a> started converting over to TypeScript that they chose to put their type definitions into the same structure. I won't claim to have inspired it, but would be cool to say I did.</p>
<p>It was a bit surprising and humbling to discover Microsoft had in one of their default templates a reference to some TypeScript type definitions that (while I didn't have anything to do with the creation of the definitions, nor <a href="https://github.com/borisyankov/DefinitelyTyped">DefinitelyTyped</a>) I did created the simple little utility that runs continuously up on <a href="http://teamcity.codebetter.com/">TeamCity.CodeBetter.com</a> and tirelessly updates NuGet packages as they change over on DefinitelyTyped.</p>
<p>This reminded me, that I hadn't checked up on the NuGet user account for DefinitelyTyped in quite a while so I decided to head over to the NuGet.org, take a glance at the account and check out how many downloads there had been?</p>
<p><img src="/images/posts/definitelyTypedNugetAccountApril2015.png" alt="DefinitelyTyped NuGet account"></p>
<p>** HOLY Typings **, there've been over 2 million DT type definitions?</p>
<p>This little ditty was neat to find. I haven't done a ton with TypeScript in a while, but it's quite amazing to see the traction it is starting to gain.</p>
<p>This means that the <a href="http://teamcity.codebetter.com/">TeamCity over at CodeBetter</a> has pretty much been cranking out new and updated DefinitelyTyped TypeScript definitions for almost the last two years, but it's time to re-visit...</p>
<h1>Thanks TeamCity @ CodeBetter</h1>
<p>Before all of the new, cool, and hip online continuous integration systems came to be, one of the only free options for open source was an instance of <a href="https://www.jetbrains.com/teamcity/">JetBrains TeamCity</a> over at <a href="http://codebetter.com/">CodeBetter</a> and I'd like to throw out a big thank you for those at CodeBetter who put the time and effort into hosting this service for many of the .Net OSS projects out there.</p>
<h1>Hello AppVeyor</h1>
<p>I recently ported this job to an <a href="http://www.appveyor.com/">AppVeyor</a> build for the DT project and after a quick round of using their wonderful support to work through a hurdle, I completed a <a href="https://ci.appveyor.com/project/JasonJarrett/nugetautomation">new build</a> at AppVeyor that replicated the one originally hosted on the TeamCity server.</p>
<p>So a HUGE thanks to AppVeyor for creating such great product, and offering free builds to the OSS community.</p>
<p>I'll keep an eye on the new build for a while (before I forget about it) and hopefully it'll run for another long time to come.</p>
<p>Happy TypeScripting!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Starting to build an Xbox One Podcast Player]]></title>
        <id>http://staxmanade.com/2015/03/starting-to-build-an-xbox-one-podcast-player/</id>
        <link href="http://staxmanade.com/2015/03/starting-to-build-an-xbox-one-podcast-player/">
        </link>
        <updated>2015-03-17T03:47:16Z</updated>
        <summary type="html"><![CDATA[I'm writing this email to announce	an early sneak peek into a project I've recently started to put some of my free time towards. Here's a preview from...]]></summary>
        <content type="html"><![CDATA[<p>I'm writing this email to announce  an early sneak peek into a project I've recently started to put some of my free time towards. Here's a preview from a <a href="http://staxmanade.com/apps/xbox-one-podcast/development/">small landing page</a> I've recently put together.</p>
<blockquote>
<p>If you, like myself, felt like the Xbox One platform was missing an essential Podcast player app, then you have come to the right place.</p>
</blockquote>
<h2>Have any interest in following along with me in this journey?</h2>
<p>At the bottom of <a href="http://staxmanade.com/apps/xbox-one-podcast/development/">this page</a> is a form, if you share your name and email, you'll get early access and an insider's view of the process of building an Xbox One application.</p>
<h3>Learn More <a href="http://staxmanade.com/apps/xbox-one-podcast/development/">here...</a></h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[In-App Unit Tests]]></title>
        <id>http://staxmanade.com/2015/03/in-app-unit-tests/</id>
        <link href="http://staxmanade.com/2015/03/in-app-unit-tests/">
        </link>
        <updated>2015-03-07T06:19:53Z</updated>
        <summary type="html"><![CDATA[How often do you run your unit tests? Do you even have a test project? Is running your test suite automatic or does it only run when you choose to run...]]></summary>
        <content type="html"><![CDATA[<p>How often do you run your unit tests? Do you even have a test project? Is running your test suite automatic or does it only run when you choose to run them? If the latter is true, then how often do you run them?</p>
<p>For most, running tests is a simple command line tool like <code>gulp test</code> or <code>rake test</code> or a builtin function in your IDE. You may even have your system covered by a Continuous Integration server, or if you want to catch issues earlier possibly even a <a href="http://staxmanade.com/2014/03/rake-psake-grunt-gulp-jake-make-cake/">git pre-commit hook</a>.</p>
<p>One thing we all probably know is the more difficult it is to run your tests, the less often they get run.</p>
<p>What if you're building in an environment that does not allow for easy test automation? What if there are no current command line task runners for the environment you're developing in?</p>
<p>You could spend way too much of your free time/life building a tool that can get the job done for you (cough - <a href="http://statlight.codeplex.com">long live StatLight/Silverlight</a> - cough). I would not necessarily recommend this approach unless you have the spare cycles to contribute a project like this to the broader community.</p>
<p>So, given that there are no external tools to rely on, and you don't want to spend however long it will take to create one for the development environment you are in, how about finding a way to integrate some sort of test run within your existing application?</p>
<p>I have always wanted to setup some unit tests that could run inside of an existing application. If you developed an app that had to ship on lots of devices (thinking android or iOS) and you could ask your users out in the wild to go to the settings page of your app and press a &quot;run tests&quot; button, how awesome would it be if this test run could collect data and send the test results back to you?</p>
<p>This is not a new idea, nor terribly unique, but I've pondered this for quite some time and until recently have not had a project were I was forced to execute on it, until now...</p>
<p>I'm playing with an app that is currently living inside a WinJS (Windows 8) (Metro - err do they call it that anymore?) environment and there are not any CLI tools out there that can be used to automate tests. However, it was easy enough to get <a href="http://mochajs.org/">Mocha</a> running within the app.</p>
<p>With MochaJS in place, I proceeded to setup a WinJS Hub in my hub-based application, after make this testing hub the first hub in my project I now have test that run after every F5 (run) of the application.</p>
<p>This will eventually have to be something I move out of the main landing U.I. when I get closer to shipping my app, but I'm liking the idea of being able to toggle my test U.I. and have them run right within my application, instantly on startup.</p>
<h1>A few benefits of this approach:</h1>
<ul>
<li>It allows me to actually write tests in an application that doesn't natively support a testing runner.</li>
<li>Fewer test gotch-ya's because of environmental reasons</li>
<li>Instant feedback on each run</li>
<li>It's an easy reminder to keep using and driving my development through tests, because the workflow is enabling it (and encouraging it).</li>
<li>(this could be considered a down side but...) since the tests are living within the actual application, I have to be careful to construct my components no to depend too heavily on the environment or configuration as we wouldn't want unit tests to mess up the running application. While it could be seen as a bit of a pain, I'm really liking how this is forcing me to write loosely coupled, highly compossable components that can be easy to swap in/out.</li>
</ul>
<h3>Will I Actually Ship In-App Tests?</h3>
<p>This one is up in the air, but so far I'm of the mind-set that I'll hide the unit-test run from the main hub, place a button deep in some about or setting page and modify the reporter to send send any failed test results, along with some metadata about the environment or system it's running on, like versions, screen size, or whatever is needed...</p>
<p>Happy Testing!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Build Command with Auditory Feedback]]></title>
        <id>http://staxmanade.com/2015/02/build-command-with-auditory-feedback/</id>
        <link href="http://staxmanade.com/2015/02/build-command-with-auditory-feedback/">
        </link>
        <updated>2015-02-28T21:36:32Z</updated>
        <summary type="html"><![CDATA[Here's a short and fun little ditty I'm going to throw up here so I can find it later... *(because why would I try to memorize something so simple whe...]]></summary>
        <content type="html"><![CDATA[<p>Here's a short and fun little ditty I'm going to throw up here so I can find it later... <em>(because why would I try to memorize something so simple when I can put it here and share with you all?)</em>.</p>
<h1>My Builds Are Speaking to Me</h1>
<p>Running this command from my Mac command line window gives a nice audio feedback when builds are complete.</p>
<pre><code>(gulp &amp;&amp; say 'super!') || say &quot;what the what?&quot; -v Albert
</code></pre>
<h1>Some Context</h1>
<p>While doing some project work on my Mac lately I'm in the situation where I am constantly running <code>gulp</code> at the command line. This workflow could apply to any CLI build tool like <a href="http://gulpjs.com">gulp</a>, <a href="https://github.com/ruby/rake">rake</a>, make, etc and ya I know I need to spend the time getting <code>gulp watch</code> to work but let's not worry about that for now...</p>
<p>The build is not slow, but it's not fast (taking about 6) seconds. That's just enough time for me to <a href="https://www.youtube.com/watch?v=SSUXXzN26zg">see a squirrel</a> and by the time I realize the build is done, I've forgotten if I actually recently kicked off the build or if the most recent run is out of date from the latest code I've worked on...</p>
<p>So I searched for a quick way to get some auditory feedback when my build was done so I could more efficiently continue the development flow...</p>
<p>I first stumbled upon <a href="https://gist.github.com/taterbase/3154646">this gist</a> which has a NodeJS implementation <code>console.log(&quot;\007&quot;);</code>, but this produces the same beep I get when my unit tests fail - which I don't want when everything's good to go.</p>
<p>Then I found someone mention the mac <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/say.1.html"><code>say</code></a> command which is WAY better for my needs and I settled on the following little command.</p>
<pre><code>(gulp &amp;&amp; say 'super!') || say &quot;what the what?&quot; -v Albert
</code></pre>
<p>Whats cool about this pattern is I can replace <code>gulp</code> with any other build tool on other projects like <code>rake</code>, <code>grunt</code>, <code>make</code>, etc...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac Equivalent of the Windows Registry - ish]]></title>
        <id>http://staxmanade.com/2015/02/mac-equivalent-of-the-windows-registry---ish/</id>
        <link href="http://staxmanade.com/2015/02/mac-equivalent-of-the-windows-registry---ish/">
        </link>
        <updated>2015-02-23T07:02:12Z</updated>
        <summary type="html"><![CDATA[If you're a long time Windows power user and are recently switching over to the Mac, you may have wondered if there was something analogous to the [Wi...]]></summary>
        <content type="html"><![CDATA[<p>If you're a long time Windows power user and are recently switching over to the Mac, you may have wondered if there was something analogous to the <a href="http://en.wikipedia.org/wiki/Windows_Registry">Windows Registry</a> .</p>
<p>However, if you've always been more of a Mac user, don't run away just yet as you may learn something.</p>
<p>In case you don't know what the <a href="http://en.wikipedia.org/wiki/Windows_Registry">Windows Registry</a> is, here is a short definition from our good ol' friend <a href="http://en.wikipedia.org/wiki/Windows_Registry">Wikipedia</a>.</p>
<blockquote>
<p>Windows Registry is a hierarchical database that stores configuration settings and options on Microsoft Windows operating systems. It contains settings for low-level operating system components and for applications running on the platform that have opted to use the Registry.</p>
</blockquote>
<p>You have probably already figured that since it's called the <code>Windows Registry</code> that there is likely not a <code>Mac Registry</code> that looks/operates the same way.</p>
<p>You are correct; however, where do all of the system and applications settings get stored if there is no registry?</p>
<p>If the Windows Registry is a place where system and application settings are stored, then the Mac equivalent of the Windows Registry would be a series of <code>.plist</code> files in several preferences folder on the Mac.</p>
<p>While researching how to automate bootstrapping my Mac development computer, I stumbled upon large number of <code>.plist</code> files in several folders that correlate to the installed applications and system settings. And <img class="emoji" title="boom" alt="boom" src="https://assets.github.com/images/icons/emoji/unicode/d83d.png" height="20" width="20" align="absmiddle"> BOOM <img class="emoji" title="boom" alt="boom" src="https://assets.github.com/images/icons/emoji/unicode/d83d.png" height="20" width="20" align="absmiddle"> just like that I discovered the holy grail of my Mac's system and application settings - kind of like the first time lift up the curtain and discover the Windows Registry.</p>
<h1>What are <code>.plist</code> files?</h1>
<p>A <code>.plist</code> file is a configuration file that contains a list of properties in either plain text or binary format. I'll go into more later about how to read and update values in these files later in the post.</p>
<p>For more info on plist files, <a href="http://en.wikipedia.org/wiki/Property_list">check out the Wikipedia page...</a></p>
<h1>Where can I find plist files?</h1>
<p>I know of at least 2 locations that host the common system and application <code>.plist</code> files.</p>
<p>The first one is user specific and is in the following location:</p>
<pre><code>~/Library/Preferences/
</code></pre>
<p>In my case (since my user name is <code>jason</code>)</p>
<pre><code>/Users/jason/Library/Preferences/
</code></pre>
<p>The second location one is at the root of the system:</p>
<pre><code>/Library/Preferences/
</code></pre>
<p>If you look into these folders you'll see a large number of plist files that follow reverse domain name convention (like <code>com.apple.sample</code>).</p>
<p>Here are some (not all) examples of system configuration plist files:</p>
<pre><code>com<span class="hljs-class">.apple</span><span class="hljs-class">.ActivityMonitor</span><span class="hljs-class">.plist</span>
com<span class="hljs-class">.apple</span><span class="hljs-class">.AddressBook</span><span class="hljs-class">.plist</span>
com<span class="hljs-class">.apple</span><span class="hljs-class">.finder</span><span class="hljs-class">.plist</span>
com<span class="hljs-class">.apple</span><span class="hljs-class">.preference</span><span class="hljs-class">.general</span><span class="hljs-class">.plist</span>
com<span class="hljs-class">.apple</span><span class="hljs-class">.TextEdit</span><span class="hljs-class">.plist</span>
com<span class="hljs-class">.apple</span><span class="hljs-class">.Safari</span><span class="hljs-class">.plist</span>
</code></pre>
<p>In the same folder as the sample configuration files listed above are where you can find <code>plist</code> files that are associated to applications installed on the system.</p>
<pre><code>com<span class="hljs-class">.apple</span><span class="hljs-class">.dt</span><span class="hljs-class">.Xcode</span><span class="hljs-class">.plist</span>
com<span class="hljs-class">.google</span><span class="hljs-class">.Chrome</span><span class="hljs-class">.plist</span>
org<span class="hljs-class">.herf</span><span class="hljs-class">.Flux</span><span class="hljs-class">.plist</span>
com<span class="hljs-class">.skype</span><span class="hljs-class">.skype</span><span class="hljs-class">.plist</span>
</code></pre>
<p>Now that we can find system and application configuration <code>plist</code> files, if you try to open them in a text editor you may notice that many of them are in a binary format which would be challenging to read and understand, let alone edit.</p>
<h1>How do I read these files?</h1>
<p>The Mac comes with a command line utility called <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/defaults.1.html">defaults</a> for reading and writing to these <code>.plist</code> files.</p>
<p>If you take an example from the above list of plist files, you can, at the command prompt type the following:</p>
<p><code>defaults read com.apple.fin&lt;tab&gt;</code> (where <code>&lt;tab&gt;</code> is the tab key that allows tab completion of the rest of the property list format) and be sure to exclude the <code>.plist</code> of the end so:</p>
<pre><code>defaults read com.apple.finder
</code></pre>
<p>will print out all of the properties to the console so you can inspect what's there.</p>
<p>You can pipe this output to <a href="http://en.wikipedia.org/wiki/Grep">grep</a> and filter for a setting name when doing searches. Once you've found a property name you want to look at you can pass it into the <code>defaults read</code> command to get the value of that specific property.</p>
<h4>Example reading a single property:</h4>
<pre><code>defaults read com.apple.finder AppleShowAllExtensions
</code></pre>
<h1>How to change property list settings?</h1>
<p><img class="emoji" title="warning" alt="warning" src="https://assets.github.com/images/icons/emoji/unicode/26a0.png" height="20" width="20" align="absmiddle"> WARNING <img class="emoji" title="warning" alt="warning" src="https://assets.github.com/images/icons/emoji/unicode/26a0.png" height="20" width="20" align="absmiddle"></p>
<p>Just like modifying the Windows Registry can mess up your system, you need to take care modifying system or application <code>plist</code> settings.</p>
<p><img class="emoji" title="warning" alt="warning" src="https://assets.github.com/images/icons/emoji/unicode/26a0.png" height="20" width="20" align="absmiddle"> WARNING <img class="emoji" title="warning" alt="warning" src="https://assets.github.com/images/icons/emoji/unicode/26a0.png" height="20" width="20" align="absmiddle"></p>
<p>Most of these settings can be changed by navigating to the application or system's respective preferences U.I. and just changing settings manually. However, the whole reason I ran down this path was to learn how to automate these setting changes.</p>
<p>When I first tried to change the settings I tried manually modifying the plist files with a GUI tool built into the Xcode developer tools.</p>
<p>However, and I have yet to understand the internals of this, after I made the changes to the plist file they would automatically get overwritten after a few seconds. So it seems that there is some official source of these values somewhere that for some reason overwrite the ones in these folder. <strong><em>I probably have that all wrong - but was an observation I had.</em></strong></p>
<h3>So if my understanding above is somewhat correct, how did I update the source?</h3>
<p>Similar to reading property list values you can use the <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/defaults.1.html">defaults</a> command line tool to <code>write</code> changes back to the <code>.plist</code> files.</p>
<p>As an example, here's how I update <a href="http://support.apple.com/en-us/HT201732">Finder</a> to show file extensions.</p>
<pre><code>defaults write com.apple.finder AppleShowAllExtensions -boolean true
</code></pre>
<p>The configuration options are now endless.</p>
<h1>In summary:</h1>
<p>Using my new knowledge that app and system settings can be found in both <code>/Library/Preferences</code> and <code>~/Library/Preferences</code> and I can use the command line tool <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/defaults.1.html">defaults</a> to read/write to understand and update settings.</p>
<p>I can now create a simple <code>.sh</code> script that allows me to pre-configure a new development machine with all of the settings I would like.</p>
<p>Now, each time I catch myself trying to use an application's preferences U.I. I stop myself and try to find that setting in a plist file and create a CLI command that I can save into my development setup script.</p>
<p>Happy Mac Settings Hacking!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fail Fast With iOS Images]]></title>
        <id>http://staxmanade.com/2015/02/fail-fast-with-ios-images/</id>
        <link href="http://staxmanade.com/2015/02/fail-fast-with-ios-images/">
        </link>
        <updated>2015-02-12T17:06:12Z</updated>
        <summary type="html"><![CDATA[# Problem: iOS app has unwieldy, unorganized and poorly named images]]></summary>
        <content type="html"><![CDATA[<h1>Problem: iOS app has unwieldy, unorganized and poorly named images</h1>
<p>I've been working on a team that took over a good sized legacy iOS project where it's usage of images became a little unwieldy. Between the various app clones (targets), shared images, and images that aren't even used we'd like to reorganize, rename and just clean up the app in general.</p>
<p>But, one thing that makes me nervous is how easy it is to rename an image, forget or miss a magic-string that tries to load that image and now we've introduced a bug that may be difficult to diagnose or even discover that we introduced it.</p>
<h1>Let's fail fast?</h1>
<p>Failing fast in this context means, how can we, during development and testing time quickly fail when running the app to determine where an image attempting to be loaded does not.</p>
<blockquote>
<p>Ideally we wouldn't even have these magic-strings to deal with. Using some tool to automatically generate a compile-time safe construct that we can use to load images. However until both A) I find the darn tool that I once-upon stumbled across that does this (please leave a comment to remind me if you find it before I do...) and B) we get sed tool integrated, I threw this little helper to quickly fail fast and help us find broken image references within our iOS applications.</p>
</blockquote>
<h1>How does it work?</h1>
<p>It's a simple little <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html">Category</a> that overrides the <code>imageNamed:</code> selector of <code>UIImage</code> and if the original cannot load an image (returns <code>nil</code>) then it will fail with a helpful assertion message.</p>
<p>This utility allowed us to quickly find images that were missing while doing our big clean sweep.</p>
<h1>How to integrate?</h1>
<p>It should be as simple as adding the <code>.h</code> &amp; <code>.m</code> files to your project and their respective targets and you should be off to the races.</p>
<p><div><script src='https://gist.github.com/staxmanade/6f462e1829a9976783c0'></script><noscript><pre><code>//&#10;//  UIImage+FailFast.h&#10;//&#10;//  Created by Jason Jarrett on 2/11/15.&#10;//  Copyright (c) 2015 Jason Jarrett. All rights reserved.&#10;//&#10;&#10;#import &#60;UIKit/UIKit.h&#62;&#10;&#10;@interface UIImage (FailFast)&#10;@end&#10;</code></pre></noscript></div></p>
<p><div><script src='https://gist.github.com/staxmanade/6f462e1829a9976783c0'></script><noscript><pre><code>//&#10;//  UIImage+FailFast.m&#10;//&#10;//  Created by Jason Jarrett on 2/11/15.&#10;//  Copyright (c) 2015 Jason Jarrett. All rights reserved.&#10;//&#10;&#10;// Let&#39;s only use this in a DEBUG/developer mode&#10;#if DEBUG&#10;&#10;#import &#34;UIImage+FailFast.h&#34;&#10;#import &#34;objc/runtime.h&#34;&#10;&#10;static Method origImageNamedMethod = nil;&#10;static NSArray *imagesAllowedToBeMissing;&#10;&#10;@implementation UIImage (FailFast)&#10;&#10;+ (void)load {&#10;&#10;    // Swizzle the core [UIImage imageNamed:name] selector with our custom selector&#10;    origImageNamedMethod = class_getClassMethod (self, @selector (imageNamed:));&#10;    method_exchangeImplementations (origImageNamedMethod, class_getClassMethod (self, @selector (assertIfImageNamedNotFound:)));&#10;&#10;    static dispatch_once_t onceToken;&#10;    dispatch_once (&#38;onceToken, ^{&#10;        // Setup a colleciton of images that may be missing but are allowed to be nil&#10;        imagesAllowedToBeMissing = @[&#10;                                     // TODO: if any images are OK missing - add them here&#10;                                     // @&#34;&#34;,&#10;                                     ];&#10;    });&#10;}&#10;&#10;+ (UIImage *)assertIfImageNamedNotFound:(NSString *)name {&#10;    NSLog (@&#34;Loading image named: %@&#34;, name);&#10;&#10;    // This will call the original core imageNamed selector which actually loads the image&#10;    UIImage *image = [self assertIfImageNamedNotFound:name];&#10;&#10;    if ([imagesAllowedToBeMissing indexOfObject:name] == NSNotFound) {&#10;        NSAssert (image != nil, @&#34;Failed to load imageNamed: %@&#34;, name);&#10;    }&#10;&#10;    return image;&#10;}&#10;&#10;@end&#10;&#10;#endif</code></pre></noscript></div></p>
<h1>For DEBUG mode only...</h1>
<p>If you look closely you'll notice <code>#if DEBUG</code> wraps the implementation so when we ship to the app store we don't end up causing a crash in production if a missing image sneaks by.</p>
<p>Happy Missing Image Bashing!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Diff Two Xcode Targets]]></title>
        <id>http://staxmanade.com/2015/02/how-to-diff-two-xcode-targets/</id>
        <link href="http://staxmanade.com/2015/02/how-to-diff-two-xcode-targets/">
        </link>
        <updated>2015-02-11T01:23:02Z</updated>
        <summary type="html"><![CDATA[If you've ever used different Xcode targets to manage different version or clones of a similar app and then had to debug why one target builds while a...]]></summary>
        <content type="html"><![CDATA[<p>If you've ever used different Xcode targets to manage different version or clones of a similar app and then had to debug why one target builds while another doesn't, finding a way to diff two targets was always challenging.</p>
<p>Sometimes it's because you forgot to check a box including a new class in multiple targets, or maybe you've integrated a new framework with <code>targetA</code> but forgot to include the framework reference in the Build Phases for <code>targetB</code>.</p>
<blockquote>
<p>I'm actually hoping that I just haven't learned the obvious way to resolve these problems and you (dear reader) will leave a comment telling me how simple it is to do with the built in tools. Until then, here's something that I hope will help others that are trying to see what two Xcode targets have different between them.</p>
</blockquote>
<h1>How about a little CLI tool: <a href="https://github.com/staxmanade/diffXcodeTargets">diffXcodeTargets</a></h1>
<p><a href="https://github.com/staxmanade/diffXcodeTargets">diffXcodeTargets</a> is a command line utility I threw together that allows you to visualize the differences between two Xcode project targets using a diff tool.</p>
<h1>Install it with <a href="https://npm.org">npm</a></h1>
<pre><code>npm install -g diffxcodetargets
</code></pre>
<h1>How to use it?</h1>
<p>You can first call it by passing in the path to your project file and no targets and it will print out what targets are available.</p>
<pre><code>&gt; diffXcodeTargets ./myProject.xcodeproj/project.pbxproj

Could not find TargetA ''. Possible targets are:
  - targetA
  - targetB
</code></pre>
<p>Now you know your available targets and you can call it with the two targets you want to diff:</p>
<pre><code>diffXcodeTargets ./myProject.xcodeproj/project.pbxproj targetA targetB
</code></pre>
<h1>How does it work?</h1>
<p>If you're curious how this tool does it's job it is actually quite simple and would love to hear any feedback...</p>
<p><a href="https://github.com/staxmanade/diffXcodeTargets"> diffXcodeTargets</a> uses the <a href="https://npmjs.org/packages/xcode">xcode</a> npm module to read/parse xcode projects and then <a href="htts://github.com/approvals/Approvals.NodeJS">approvals</a> to show a difftool with two different files.</p>
<h1>What's missing?</h1>
<p>I threw this together quickly to help diagnose some issues with a project I was working on. It does not yet support all of the various scenarios that may be needed when diffing two Xcode targets, but if you have any suggestions or ideas feel free to leave a <a href="htts://github.com/staxmanade/diffXcodeTargets/issues">github issue</a>.</p>
<p>Happy Diffing!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Remove Files in Git that Should Have Been Ignored]]></title>
        <id>http://staxmanade.com/2015/02/how-to-remove-files-in-git-that-should-have-been-ignored/</id>
        <link href="http://staxmanade.com/2015/02/how-to-remove-files-in-git-that-should-have-been-ignored/">
        </link>
        <updated>2015-02-10T00:50:58Z</updated>
        <summary type="html"><![CDATA[If sometimes come upon existing applications that use [Git](http://git-scm.com) where files were added to the repository that should have originally b...]]></summary>
        <content type="html"><![CDATA[<p>If sometimes come upon existing applications that use <a href="http://git-scm.com">Git</a> where files were added to the repository that should have originally been ignored. Sometimes this is because the <code>.gitignore</code> file is missing, or because certain rules were not include that probably should have been from the start.</p>
<p>There are ways in <code>git</code> to completely rewrite history to <a href="http://gitready.com/beginner/2009/03/06/ignoring-doesnt-remove-a-file.html">remove all traces</a> of the file, however most of the time, it's good to leave a commit saying <code>removed files that should have originally been ignored</code> as a good starting point (depending on the project/repo).</p>
<p>Here is a small workflow I've found to be pretty effective in helping to clean up a repository, or at least let you know what files would have originally been ignored had you setup a <code>.gitignore</code> file with some project standards...</p>
<h1>Create a well meaning <code>.gitignore</code> file</h1>
<p>You can go to <a href="https://www.gitignore.io">gitignore.io</a> and type some words like <code>xcode</code>, <code>node</code>, <code>osx</code>, or whatever platform/IDE you use for development and generate a pretty good <a href="http://git-scm.com/docs/gitignore"><code>.gitignore</code></a> base file.</p>
<h1>Create or Update local <code>.gitignore</code></h1>
<p>Once you've update your local <code>.gitignore</code> file with the rules you'd like to use, you can use the below to commit your changes;</p>
<pre><code>git add .gitignore
git commit -m 'updating .gitignore'
</code></pre>
<h1>Remove the files that should have originally been ignored.</h1>
<p>Now we want to figure out what files may have been added originally that shouldn't be there. You can run the following two commands to see which files to find this out.</p>
<pre><code>git rm --cached -r .
git add .
</code></pre>
<p>Now if you <code>git status</code> you can see what files should probably be deleted from the git repo and using the newly updated <code>.gitignore</code> file will now be ignored going forward.</p>
<p>Go ahead an commit these changes (assuming you're happy with what is being deleted and ignored).</p>
<p>Happy Gitting!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Approval Tests - Command Line Tool (CLI)]]></title>
        <id>http://staxmanade.com/2015/02/approval-tests---command-line-tool--cli-/</id>
        <link href="http://staxmanade.com/2015/02/approval-tests---command-line-tool--cli-/">
        </link>
        <updated>2015-02-08T05:29:48Z</updated>
        <summary type="html"><![CDATA[In [my previous post](http://staxmanade.com/2015/01/approval-tests---overview/) I introduced [Approval Tests](http://approvaltests.com) using the [App...]]></summary>
        <content type="html"><![CDATA[<p>In <a href="http://staxmanade.com/2015/01/approval-tests---overview/">my previous post</a> I introduced <a href="http://approvaltests.com">Approval Tests</a> using the <a href="https://github.com/approvals/Approvals.NodeJS">Approvals.NodeJS</a> variant of the tool.</p>
<p>In this post I'd like to go over how you can use the command line version of <a href="https://github.com/approvals/Approvals.NodeJS">Approvals.NodeJS</a> for several different scenarios.</p>
<h1>First thing first (How to Install)</h1>
<p>Globally install <code>approvals</code> via <a href="https://www.npmjs.com/">npm</a>.</p>
<pre><code>npm install -g approvals
</code></pre>
<p>Now that you have it installed, let's go over some scenarios that you can use the approvals tool.</p>
<h1>Scenario 1: Compare JSON files downloaded from a web server.</h1>
<p>Let's say you want to see a quick file diff between two api requests.</p>
<p>You can use <code>curl</code> to download the file and pipe (<code>|</code>) it to the <code>approvals</code> CLI tool. We give it a name parameter which is used to generate the file name used to save to.</p>
<p>So if you were to run:</p>
<pre><code>curl <span class="hljs-string">https:</span><span class="hljs-comment">//api.github.com/orgs/approvals | approvals githubOrg</span>
</code></pre>
<p>This would generate two files:</p>
<p><code>githubOrg.received.txt</code> which at the time of this writing would look like:</p>
<pre><code>{
  "<span class="hljs-attribute">login</span>": <span class="hljs-value"><span class="hljs-string">"approvals"</span></span>,
  "<span class="hljs-attribute">id</span>": <span class="hljs-value"><span class="hljs-number">36907</span></span>,
  "<span class="hljs-attribute">url</span>": <span class="hljs-value"><span class="hljs-string">"https://api.github.com/orgs/approvals"</span></span>,
  "<span class="hljs-attribute">repos_url</span>": <span class="hljs-value"><span class="hljs-string">"https://api.github.com/orgs/approvals/repos"</span></span>,
  "<span class="hljs-attribute">events_url</span>": <span class="hljs-value"><span class="hljs-string">"https://api.github.com/orgs/approvals/events"</span></span>,
  "<span class="hljs-attribute">members_url</span>": <span class="hljs-value"><span class="hljs-string">"https://api.github.com/orgs/approvals/members{/member}"</span></span>,
  "<span class="hljs-attribute">public_members_url</span>": <span class="hljs-value"><span class="hljs-string">"https://api.github.com/orgs/approvals/public_members{/member}"</span></span>,
  "<span class="hljs-attribute">avatar_url</span>": <span class="hljs-value"><span class="hljs-string">"https://avatars.githubusercontent.com/u/36907?v=3"</span></span>,
  "<span class="hljs-attribute">description</span>": <span class="hljs-value"><span class="hljs-literal">null</span></span>,
  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-literal">null</span></span>,
  "<span class="hljs-attribute">company</span>": <span class="hljs-value"><span class="hljs-literal">null</span></span>,
  "<span class="hljs-attribute">blog</span>": <span class="hljs-value"><span class="hljs-string">"http://approvaltests.com"</span></span>,
  "<span class="hljs-attribute">location</span>": <span class="hljs-value"><span class="hljs-literal">null</span></span>,
  "<span class="hljs-attribute">email</span>": <span class="hljs-value"><span class="hljs-literal">null</span></span>,
  "<span class="hljs-attribute">public_repos</span>": <span class="hljs-value"><span class="hljs-number">13</span></span>,
  "<span class="hljs-attribute">public_gists</span>": <span class="hljs-value"><span class="hljs-number">0</span></span>,
  "<span class="hljs-attribute">followers</span>": <span class="hljs-value"><span class="hljs-number">0</span></span>,
  "<span class="hljs-attribute">following</span>": <span class="hljs-value"><span class="hljs-number">0</span></span>,
  "<span class="hljs-attribute">html_url</span>": <span class="hljs-value"><span class="hljs-string">"https://github.com/approvals"</span></span>,
  "<span class="hljs-attribute">created_at</span>": <span class="hljs-value"><span class="hljs-string">"2008-11-27T06:03:58Z"</span></span>,
  "<span class="hljs-attribute">updated_at</span>": <span class="hljs-value"><span class="hljs-string">"2014-12-28T03:02:33Z"</span></span>,
  "<span class="hljs-attribute">type</span>": <span class="hljs-value"><span class="hljs-string">"Organization"</span>
</span>}
</code></pre>
<p>and an empty <code>githubOrg.approved.txt</code> file.</p>
<p>Note when you first run this command you are prompted with the <code>received</code> file compared to the empty <code>approved</code> files; however, on an initial run, you can use the <code>--forceapproveall</code> argument to avoid the diff step and force all the contents of the <code>received</code> file into the <code>approved</code> file.</p>
<p>Now if the remote file were to change on you and you run the below command again:</p>
<pre><code>curl <span class="hljs-string">https:</span><span class="hljs-comment">//api.github.com/orgs/approvals | approvals githubOrg</span>
</code></pre>
<p>You would get a diff between the the originally <code>approved</code> file and the newly downloaded file.</p>
<h1>Scenario 2:</h1>
<p>Ok, well I actually have another great scenario for using the approvals CLI, but I believe it deserves it's own post as I'm going to introduce some nifty configuration on a Mac that I've used to setup my own development servers automatically.</p>
<p>Until next time...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Approval Tests - Overview]]></title>
        <id>http://staxmanade.com/2015/01/approval-tests---overview/</id>
        <link href="http://staxmanade.com/2015/01/approval-tests---overview/">
        </link>
        <updated>2015-01-30T16:38:06Z</updated>
        <summary type="html"><![CDATA[I first started using the `.Net` version of Approval Tests and found so much value in it, I [created a port of the tool](https://github.com/approvals/...]]></summary>
        <content type="html"><![CDATA[<p>I first started using the <code>.Net</code> version of Approval Tests and found so much value in it, I <a href="https://github.com/approvals/Approvals.NodeJS">created a port of the tool</a> that I can use in <a href="http://nodejs.org">Node.JS</a>. This post is intended as a rough overview of Approval Tests, and will be using the <a href="https://github.com/approvals/Approvals.NodeJS">NodeJS port</a> in my examples below.</p>
<blockquote>
<p>There is support for other programming languages, so head over to the Approval Tests site at <a href="http://approvaltests.com">ApprovalTests.com</a> and check them out.</p>
</blockquote>
<h2>What are Approval Tests?</h2>
<p>At it's core, Approval Tests are a very different way to execute the assertion step of a unit test.</p>
<p>Think of this as another tool in the bag and not a replacement for the good old fashion <code>assert.equal(...)</code> or your favorite assertion tool. But for certain types of tests, it <strong>IS</strong> the best tool to grab.</p>
<p>Typically, when we create assertions in our unit tests, we assert on very specific things. This property equals that value.</p>
<p>With Approval Tests, you can take whatever output you're wanting to Assert against, turn it into either a string representation or an image (say screenshot of app), and use our favorite diff tool to compare it with the previously <em>approved</em> version.</p>
<p>The diff tool is a great way to visualize change between failing/approved data which can help to raise the level of abstraction of your test. Instead of comparing a single value in an assertion, we can serialize an entire object graph to a string and use the diff tool to review any changes to the diff of the previously approved version.</p>
<p>The work to find and start up your favorite diff tool comparing previously &quot;approved&quot; files is where the <a href="https://approvaltests.com">libraries provided by Approval Tests</a> come in handy.</p>
<h1>Let's walk through an example</h1>
<p>If you've done any testing before, by now you have probably heard of the AAA (Arrange, Act, Assert) style of tests. Below I've contrive a sample test using the AAA style in JavaScript.</p>
<pre><code><span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);
describe(<span class="hljs-string">"when testing something"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    it(<span class="hljs-string">"should do something special"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{

        <span class="hljs-comment">// Arrange</span>
        <span class="hljs-comment">// setup the initial state for the test</span>
        <span class="hljs-keyword">var</span> obj = { valueA: <span class="hljs-string">"test"</span>, valueB: <span class="hljs-number">1234</span> };

        <span class="hljs-comment">// Act - Do some business logic on the object</span>
        obj.valueC = <span class="hljs-literal">true</span>;

        <span class="hljs-comment">// Assert - verify the state of the item under test</span>
        assert.equal(obj.valueA, <span class="hljs-string">"test"</span>)
        assert.equal(obj.valueB, <span class="hljs-number">1234</span>);
        assert.equal(obj.valueC, <span class="hljs-literal">true</span>);
    });
});
</code></pre>
<p>At a high level, if you are writing tests with an object, and have a way to translate that object's state into a text or image representation, wouldn't it be great if you could save that state into a file, essentially locking down the state of the test?</p>
<p>This would allow future runs of the test to easily detect a change by comparing the previous state with the new state (strings of course) - but using the power of our diff tools to quickly highlight what is different.</p>
<h1>Let's turn our AAA test above into an Approval Test</h1>
<pre><code class="language-diff">var approvals = require('approvals');
describe("when testing something", function(){
    it("should do something special", function(){

        // Arrange
        // setup the initial state for the test
        var obj = { valueA: "test", valueB: 1234 };

        // Act - Do some business logic on the object
        obj.valueC = true;

        // Assert - verify the state of the item under test
<span class="hljs-deletion">-        assert.equal(obj.valueA, "test")</span>
<span class="hljs-deletion">-        assert.equal(obj.valueB, 1234);</span>
<span class="hljs-deletion">-        assert.equal(obj.valueC, true);</span>
<span class="hljs-addition">+        approvals.verifyAsJSON(__dirname, "sampleTest", obj);</span>
    });
});
</code></pre>
<p>Notice how the 3 <code>assert's</code> turned into 1 <code>approvals.verifyAsJSON</code>?</p>
<h1>How Approval Tests Work</h1>
<p>Approval Tests works by taking the object or value you're trying to verify, serializing it to a text file (or image) and saving it to a file labeled with the name of your test and <code>*.received.txt</code>. It will then try to compare this <code>*.received.txt</code> file with a <code>*.approved.txt</code> file. If the file doesn't exist, then we will see a diff tool present with our received file on the left and an empty approved file on the right.</p>
<p>At this point we have to choose between a number of options:</p>
<ul>
<li>We could take the received output and copy/save it to the approved file. Essentially approving the test.</li>
<li>We may only want parts of the received file, and copy over just the parts of what we want to the approved file.</li>
<li>Or we do nothing as we want to start over...</li>
</ul>
<p>Now we run our test again and if the test passes - then we know that we've finished as what was re-generated in the received file matches the approved file. But if we see our diff tool appear, we can analyze the differences in the diff tool and determine if we need to either adjust the approved file or adjust our code that generates the received file.</p>
<blockquote>
<p>If the above explanation still isn't clear, I'd recommend watching <a href="https://twitter.com/llewellynfalco">@LlewellynFalco's</a> video's on the topic that can be found at <a href="http://approvaltests.com">approvaltests.com</a>. He does a good job describing the concepts.</p>
</blockquote>
<h1>Next Steps!</h1>
<p>Browse the <a href="https://github.com/approvals">github org</a>,  <a href="http://approvaltests.com/videos/">watch videos</a> or <a href="http://approvaltests.com/resources/">read documentation</a> on <a href="http://approvaltests.com">approvaltests.com</a>.</p>
<p>Happy Approving!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Setting Jenkins up to run XCTool and Xcode Simulator Tests]]></title>
        <id>http://staxmanade.com/2015/01/setting-jenkins-up-to-run-xctool-and-xcode-simulator-tests/</id>
        <link href="http://staxmanade.com/2015/01/setting-jenkins-up-to-run-xctool-and-xcode-simulator-tests/">
        </link>
        <updated>2015-01-28T00:40:34Z</updated>
        <summary type="html"><![CDATA[We recently [migrated an older Jenkins C.I. server over](http://staxmanade.com/2015/01/how-to-migrate-a-jenkins-job-to-new-jenkins-server/) to a newer...]]></summary>
        <content type="html"><![CDATA[<p>We recently <a href="http://staxmanade.com/2015/01/how-to-migrate-a-jenkins-job-to-new-jenkins-server/">migrated an older Jenkins C.I. server over</a> to a newer one, and struggled to get <a href="https://github.com/facebook/xctool">XCTool</a> or <code>xcodebuild</code> to run unit tests where the simulator was needed.</p>
<p>There are quite a number of blog posts out there that describe how to setup a C.I. Jenkins server on a Mac, but many of them don't include the last bit (that worked for me), so I hope this helps you...</p>
<h1>Why Can't I run the Xcode Simulator on a Jenkins server?</h1>
<h3>Some Error Messages I Encountered Along the Way:</h3>
<pre><code>Tried to install the test host app 'com.myapp.test' but failed.

Preparing test environment failed.

-[TEST_BUNDLE FAILED_TO_START] 
    
There was a problem starting the test bundle: Simulator 'iPhone 6' was not prepared: Failed for unknown reason.

Test did not run: Simulator 'iPhone 6' was not prepared: Failed for unknown reason.

2015-01-21 12:02:19.296 xcodebuild[35135:875297]  iPhoneSimulator: Timed out waiting 120 seconds for simulator to boot, current state is 1.

Testing failed:
Test target MyProjectTests encountered an error (Timed out waiting 120 seconds for simulator to boot, current state is 1. If you believe this error represents a bug, please attach the log file at /var/folders/yf/49df70js2xn524f9c3835zx0000087/T/com.apple.dt.XCTest-status/Session-2015-01-21_12:00:19-sXA35e.log)
** TEST FAILED **
</code></pre>
<h3>Need to run a GUI user.</h3>
<p>The Simulator needs to run in the context of an actual user where it can get a window handle and render it's U.I...</p>
<p>Below is a great resource to get you most of the way there.</p>
<p><a href="http://pivotallabs.com/ios-ci-jenkins/">iOS CI with Jenkins</a></p>
<p>Once you've followed the instructions in the above post and you still can't get the Jenkins CI server to run your simulator tests, then check this last item which got it working for me.</p>
<p>Open up your Jenkins <code>plist</code> file in the <code>LaunchAgents</code> folder. (If you don't have one in LaunchAgents, then go back to the linked blog post and follow that first).</p>
<p>The key for me to get it working was to <strong>remove</strong> the <code>CreateSession</code> key from the <code>plist</code>.</p>
<pre><code class="language-diff"><span class="hljs-deletion">-       &lt;key&gt;SessionCreate&lt;/key&gt;</span>
<span class="hljs-deletion">-       &lt;true /&gt;</span>
</code></pre>
<p>Once I removed this key, restarted the server, everything started building/working correctly.</p>
<h1>In summary:</h1>
<ol>
<li>Auto-login with a jenkins user</li>
<li>Get your plist moved over to the <code>LaunchAgents</code> folder (see post linked above)</li>
<li>Remove the <code>SessionCreate</code> key</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Migrate a Jenkins Job to New Jenkins Server]]></title>
        <id>http://staxmanade.com/2015/01/how-to-migrate-a-jenkins-job-to-new-jenkins-server/</id>
        <link href="http://staxmanade.com/2015/01/how-to-migrate-a-jenkins-job-to-new-jenkins-server/">
        </link>
        <updated>2015-01-26T23:02:16Z</updated>
        <summary type="html"><![CDATA[We recently setup a new [Jenkins](http://jenkins-ci.org/) build server for some iOS applications and I wanted to find a quick way to copy a couple Job...]]></summary>
        <content type="html"><![CDATA[<p>We recently setup a new <a href="http://jenkins-ci.org/">Jenkins</a> build server for some iOS applications and I wanted to find a quick way to copy a couple Jobs from the old server to the new one.</p>
<p>Below are a few small options I found while working on the task.</p>
<h2>Option 1: Copy <code>jobs</code> directory</h2>
<p>One option (and seems to be the recommended one) is to just copy the <code>jobs</code> directory from the old server to the new one.</p>
<p>From the documentation <a href="https://wiki.jenkins-ci.org/display/JENKINS/Administering+Jenkins#AdministeringJenkins-Moving%252Fcopying%252Frenamingjobs">Moving/copying/renaming jobs</a>:</p>
<blockquote>
<p>You can:</p>
<ol>
<li>Move a job from one installation of Jenkins to another by simply copying the corresponding job directory.</li>
<li>Make a copy of an existing job by making a clone of a job directory by a different name.</li>
<li>Rename an existing job by renaming a directory. Note that the if you change a job name you will need to change any other job that tries to call the renamed job.</li>
</ol>
<p>Those operations can be done even when Jenkins is running. For changes like these to take effect, you have to click &quot;reload config&quot; to force Jenkins to reload configuration from the disk.</p>
</blockquote>
<p>For me, I skipped this option because I was having a hard time finding where the jobs directory was on the old server. (Or just too lazy to find it, and I only had a couple jobs to copy over)</p>
<h2>Option 2: Try one of the plugins out there</h2>
<p>There are some Jenkins plugins out there that provide some job export options. Here are a couple...</p>
<ul>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Job+Exporter+Plugin">Job Exporter Plugin</a></li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Job+Import+Plugin">Job Importer Plugin</a></li>
</ul>
<h2>Option 3: Use <a href="https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+CLI">Jenkins CLI</a></h2>
<p>This is what I used, which worked nicely for only the few jobs we had. If you have a large number of Jenkins jobs, you may consider the first aproach above.</p>
<ol>
<li>First download the Jenkins CLI jar.</li>
</ol>
<ul>
<li>You can do this from your jenkin's CLI page within your installed Jenkins instance.</li>
</ul>
<p><img src="/images/posts/JenkinsCLIMenu.png" alt="jenkins CLI menu"></p>
<ol start="2">
<li>Next we can use the following command (pointing to the old server) to list the jobs.</li>
</ol>
<p><code>java -jar jenkins-cli.jar -s http://&lt;YourBuildServer&gt;:&lt;YourBuildServerPort&gt;/ list-jobs</code></p>
<ol start="3">
<li>Using one job from the list above, let's copy the xml of a job to the clipboard. (I'm using a <code>Mac</code> which is were <code>pbcopy</code> &amp; <code>pbpaste</code> come from below)</li>
</ol>
<p><code>java -jar jenkins-cli.jar -s http://&lt;YourBuildServer&gt;:&lt;YourBuildServerPort&gt;/ get-job &quot;NAME_OF_JOB&quot; | pbcopy</code></p>
<p>This uses the cli <code>get-job &quot;NAME_OF_JOB&quot;</code> command to print the job's xml to <code>stdout</code>, which we pipe to <code>pbcopy</code> on the Mac to load the configuration into the clipboard. You could of course pipe the output to a file like <code>... &gt; job.xml</code></p>
<ol start="4">
<li>If the above command placed a job's XML into the clipboard, you can use the below command to add it to the new server.</li>
</ol>
<p><code>pbpaste | java -jar jenkins-cli.jar -s http://&lt;YourBuildServer&gt;:&lt;YourBuildServerPort&gt; create-job &quot;NAME_OF_JOB&quot;</code></p>
<p>This uses <code>pbpaste</code> to take what is in the clipboard, send it to <code>stdin</code> and pipe it to the Jenkins cli's <code>create-job &quot;NAME_OF_JOB&quot;</code> command.</p>
<p>Hope this helps...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Resgrid is a BizSpark Featured Startup]]></title>
        <id>http://staxmanade.com/2015/01/resgrid-on-bizspark-featured-startups/</id>
        <link href="http://staxmanade.com/2015/01/resgrid-on-bizspark-featured-startups/">
        </link>
        <updated>2015-01-15T00:17:25Z</updated>
        <summary type="html"><![CDATA[Today Microsoft published an article on their [BizSpark Featured Startups](http://blogs.technet.com/b/bizspark_featured_startups/archive/2015/01/13/tr...]]></summary>
        <content type="html"><![CDATA[<p>Today Microsoft published an article on their <a href="http://blogs.technet.com/b/bizspark_featured_startups/archive/2015/01/13/trustworthy-cloud-logistics-for-first-responders.aspx">BizSpark Featured Startups</a> blog about <a href="http://resgrid.com">Resgrid</a>!</p>
<h3>What is Resgrid?</h3>
<p>Resgrid is a software as a service product hosted on Microsoft Azure that provides logistics, management and communication tools to first responder organizations such as volunteer fire, career fire, EMS, search and rescue, public safety, disaster relief organizations, etc.</p>
<p>My partner <a href="http://www.designlimbo.com/">Shawn Jackson</a> and I created <a href="http://resgrid.com">Resgrid</a> a few years ago and the buzz is exciting to see.</p>
<p>If you have any interest in following some technical aspects of this little startup. <a href="http://www.designlimbo.com/">Shawn</a> often posts interesting articles both technical and startup/business related on <a href="http://www.designlimbo.com/">his site</a>.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to install clang-format and formatting Objective-C files]]></title>
        <id>http://staxmanade.com/2015/01/how-to-install-clang-format-and-formatting-objective-c-files/</id>
        <link href="http://staxmanade.com/2015/01/how-to-install-clang-format-and-formatting-objective-c-files/">
        </link>
        <updated>2015-01-14T05:49:01Z</updated>
        <summary type="html"><![CDATA[Formatting your code so it follows whatever conventions your team/company/self define is important. As developers who have to read code on a regular b...]]></summary>
        <content type="html"><![CDATA[<p>Formatting your code so it follows whatever conventions your team/company/self define is important. As developers who have to read code on a regular basis, you have to train ourselves to mentally parse code and spot where bugs may be lurking.</p>
<p>However, if your code is not formatted in a consistent fashion, the cognitive load placed on your brain increases dramatically. Not only do you have to read, parse, and conceptualize the code you're reviewing, your brain is now having to decide if anomalies in the formatting of your project's source code are because of a problem in the code, or merely a difference in the code formatting or styling.</p>
<p>Easy and automatic code formatting tools were something I really missed when I started using Xcode because Visual Studio's built-in formatting of a file is as simple as <code>CTRL+k+d</code>.</p>
<p>This has definitely improved in recent years with the introduction of <a href="http://alcatraz.io/">Alcatraz</a> and <a href="https://github.com/travisjeffery/ClangFormat-Xcode">ClangFormat-Xcode</a> and I'd highly recommend you check them out.</p>
<p>But, what if you just acquired a legacy project, that was hacked on by quite a number of different developers, with different styles, that's a total mess (from a style consistency perspective)? Or what if you wanted to have an easy <code>rake</code> task that automatically formatted the necessary code files?</p>
<p>This is where a great little tool from the <a href="http://llvm.org">LLVM</a> project <code>clang-format</code> comes in handy.</p>
<p><s>Unfortunately it's not as easy to install as <code>brew install clang-format</code></s> (It's now as easy to install as <code>brew install clang-format</code>), but I'll show you not only how to get it installed manually, but a command to easily format your code.</p>
<h1>How to install <code>clang-format</code> manually</h1>
<p>Thanks to <a href="http://nacho4d-nacho4d.blogspot.de/2013/11/clang-format.html">this post</a> for describing how to get (an older version of the tool), I put together the following steps that I hope you find useful.</p>
<ol>
<li>Go to the <a href="http://llvm.org/releases/download.html">LLVM Download page</a></li>
<li>In chrome dev tools (On my mac, <code>⌘+⌥+J</code> aka <code>CMD+Option+J, make sure the</code>Elements<code>tab is selected, and</code>CMD+F<code>within the html source for</code>macosx-apple-darwin`.
<ul>
<li>as of writing this, I get a link to the following url <a href="http://llvm.org/releases/3.5.0/clang+llvm-3.5.0-macosx-apple-darwin.tar.xz"><code>http://llvm.org/releases/3.5.0/clang+llvm-3.5.0-macosx-apple-darwin.tar.xz</code></a></li>
</ul>
</li>
<li>Copy that URL and place it into the following set of commands.</li>
</ol>
<p>From a command prompt, navigate to a folder where you'd like to save or store the <code>clang</code> tools.</p>
<ol>
<li>Remove the older version if there was one, and create a folder to work in
<code>rm -rf ./clang-format/ &amp;&amp; mkdir -p ./clang-format</code></li>
<li>Take the previously discovered link from above and use the following to download it into our working folder.
<code>curl 'http://llvm.org/releases/3.5.0/clang+llvm-3.5.0-macosx-apple-darwin.tar.xz' -o './clang-format/clang-format.tar.xz'</code></li>
<li>Extract the tar file
<code>tar xvfJ clang-format/clang-format.tar.xz -C ./clang-format</code></li>
<li>Remove any previously sym-linked linked version you have
<code>rm -f ~/bin/clang-format</code></li>
<li>Link the downloaded clang-format command into our <code>~/bin</code> folder
<code>ln -s $(pwd)/$(find clang-format | grep bin/clang-format$) ~/bin/clang-format</code></li>
<li>Test the command works
<code>clang-format --help</code></li>
</ol>
<p>Here are all of the steps above as a script:</p>
<pre><code>rm -rf ./clang-<span class="hljs-keyword">format</span>/ &amp;&amp; mkdir -p ./clang-<span class="hljs-keyword">format</span>
curl <span class="hljs-string">'http://llvm.org/releases/3.5.0/clang+llvm-3.5.0-macosx-apple-darwin.tar.xz'</span> -o <span class="hljs-string">'./clang-format/clang-format.tar.xz'</span>
tar xvfJ clang-<span class="hljs-keyword">format</span>/clang-<span class="hljs-keyword">format</span>.tar.xz -C ./clang-<span class="hljs-keyword">format</span>
rm -f ~/bin/clang-<span class="hljs-keyword">format</span>
ln -s <span class="hljs-variable">$(</span><span class="hljs-keyword">pwd</span>)/<span class="hljs-variable">$(</span>find clang-<span class="hljs-keyword">format</span> | grep bin/clang-<span class="hljs-keyword">format</span><span class="hljs-variable">$)</span> ~/bin/clang-<span class="hljs-keyword">format</span>
clang-<span class="hljs-keyword">format</span> --<span class="hljs-keyword">help</span>
</code></pre>
<h1>How to setup your project style guide</h1>
<p>Now that you have the command line <code>clang-format</code> tool installed, you can walk through how to use it to format our Objective-C code files. Let's walk through some steps I used to apply a standard code format to the project.</p>
<p>But, before you use the command line tool to rip through our project, let's first set the standards you'd like clang-format to adhere to when formatting our code.</p>
<p>At the root of your project (probably where your <code>.git</code> folder is), create a file called <code>.clang-format</code></p>
<p>The <code>.clang-format</code> file contains the formatting rules for a project. Its structure is <a href="http://www.yaml.org/">YAML</a> and is what the <code>clang-format</code> CLI can read to format your project's Objective-C files.</p>
<p>For details about the <code>.clang-format</code> file, you can <a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html">check out the docs</a> to get a list of all of the options possible in this file.</p>
<p>Here is one I have used before.</p>
<pre><code><span class="hljs-attribute">BasedOnStyle</span>: <span class="hljs-string">Chromium</span>

<span class="http"><span class="hljs-attribute">AlignTrailingComments</span>: <span class="hljs-string">true</span>
<span class="hljs-attribute">AllowShortIfStatementsOnASingleLine</span>: <span class="hljs-string">false</span>
<span class="hljs-attribute">BreakBeforeBraces</span>: <span class="hljs-string">Attach</span>
<span class="hljs-attribute">ColumnLimit</span>: <span class="hljs-string">0</span>
<span class="hljs-attribute">IndentWidth</span>: <span class="hljs-string">4</span>
<span class="hljs-attribute">KeepEmptyLinesAtTheStartOfBlocks</span>: <span class="hljs-string">true</span>
<span class="hljs-attribute">Language</span>: <span class="hljs-string">Cpp</span>
<span class="hljs-attribute">MaxEmptyLinesToKeep</span>: <span class="hljs-string">4</span>
<span class="hljs-attribute">ObjCSpaceAfterProperty</span>: <span class="hljs-string">true</span>
<span class="hljs-attribute">ObjCSpaceBeforeProtocolList</span>: <span class="hljs-string">false</span>
<span class="hljs-attribute">PointerBindsToType</span>: <span class="hljs-string">false</span>
<span class="hljs-attribute">SpacesBeforeTrailingComments</span>: <span class="hljs-string">1</span>
<span class="hljs-attribute">TabWidth</span>: <span class="hljs-string">4</span>
<span class="hljs-attribute">UseTab</span>: <span class="hljs-string">Never</span>
</span></code></pre>
<p>If you want to ignore a folder from being touched, you can place a <code>.clang-format</code> in that folder with the following option set:</p>
<pre><code><span class="hljs-attribute">BasedOnStyle</span>: <span class="hljs-string">None</span>
</code></pre>
<h1>Format all our files at once</h1>
<p>Now that you have a <code>.clang-format</code> file which helps to define our project's styling conventions, you can begin our initial formatting sweep.</p>
<p>First let's create a command that gives us all the files you want to process.</p>
<p>Here's my initial example (executed in a zsh shell):</p>
<p><code>ls MyProject/*.[hm]</code></p>
<p>Tweak this however you need so that you get a list of files to format from your project. You may want to be careful to exclude a CocoaPods folder, or other third party libraries and once you are happy with it, you can then pipe its output to <code>clang-format</code>.</p>
<p><code>ls MyProject/*.[hm] | xargs clang-format -i -style=file</code></p>
<p>You can use the <code>xargs</code> command to execute the <code>clang-format</code> command for each file in the output <code>ls</code>.</p>
<h3><code>clang-format</code> options</h3>
<p>In the above example you use the following <code>clang-format</code> options:</p>
<ul>
<li><code>-i</code> tells it to do an in-place edit of the file</li>
<li><code>style=file</code> this tells <code>clang-format</code> to use our <code>.clang-format</code> style rules when formatting.</li>
</ul>
<h1>Did you have your project under source control before doing this?</h1>
<p>I sure hope you have the project in source control. You should now be able to <code>git diff</code> or whatever you do to view your source changes and see the files that have been modified by the <code>clang-format</code> command.</p>
<p>I hope this post was helpful in showing you how to install <code>clang-format</code> and use it to format your existing Objective-C project.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Custom Static Blog Generator - No Longer Using Octopress]]></title>
        <id>http://staxmanade.com/2015/01/custom-static-blog-generator---no-longer-using-octopress/</id>
        <link href="http://staxmanade.com/2015/01/custom-static-blog-generator---no-longer-using-octopress/">
        </link>
        <updated>2015-01-04T00:34:11Z</updated>
        <summary type="html"><![CDATA[# TL;DR]]></summary>
        <content type="html"><![CDATA[<h1>TL;DR</h1>
<blockquote>
<p>In summary I left my Octopress blog behind quite a while ago, and this site has been statically generated with a custom tooling build up around gulpjs and node.</p>
</blockquote>
<h1>Some of the details...</h1>
<p>After I <a href="http://staxmanade.com/2014/04/migrating-blogspot-to-octopress-part-1-introduction/">migrated from Blogspot to Octopress</a> I started running into workflow issues and <a href="https://github.com/jekyll/jekyll/issues/2226">other issues</a> that turned me off from Octopress/Jekyll (at least for my own site).</p>
<p>It was also right around the time that <a href="http://gulpjs.com">GulpJS</a> came out and I needed a project to play around with...</p>
<blockquote>
<p>So I did what every developer does. I wrote my own.</p>
</blockquote>
<p>Using <a href="https://github.com/approvals/Approvals.NodeJS">Approvals.NodeJS</a> to capture previous renderings of the Octopress generated version of <a href="http://staxmanade.com">staxmanade.com</a>, I was surprised at how quickly I ported my Octopress generated site to a new custom static site generator.</p>
<p>I'm not writing this to convince you to leave Octopress for anything (especially <a href="http://togglejs.github.io">my home-grown tool</a>), but felt compelled to get a blog post out describing some of the cool little features I've implemented.</p>
<h2>Personal struggles with Octopress:</h2>
<ul>
<li>Octopress site generation was too SLOW for me. There's even a helper rake task that moves your posts to a temporary folder to exclude from generation when you want to quickly see the post you're working on generate fast, but this just bothered me from a fundamental level.</li>
<li>I'm not a Ruby developer and don't have the ability or desire to fork/maintain Jekyll or Octopress. I wanted to have something that I pretty much owned. (yea - that comes with a larger maintenance burden, but meh - I'm a developer and its part of the process)</li>
<li>Disliked that every time I <code>rake gen_deploy</code> I didn't know the exact code-diff that was changed since the previous version. I'd like to know exactly what files have changed and how they have changed before they get deployed. (again, there's probably a solution here, but didn't really care to dig deeper)</li>
<li>There's an issue on Windows where you end up mucking around with the <a href="http://www.tomordonez.com/blog/2014/07/30/installing-octopress-in-windows-server/">codepage</a>, which made working on things a bit of a headache.</li>
</ul>
<h1>So what did I end up with?</h1>
<p>I now have a statically generated site all powered by <code>gulp</code> and a small library/command line tool I've thrown up here: <a href="http://togglejs.github.io/">Togglejs</a>.</p>
<h1>How is this better ~err~ different?</h1>
<ul>
<li>Regenerating my site only takes about 6 seconds (as opposed to the Octopress 30+)</li>
<li>I learned <a href="http://gulpjs.com">gulp</a>, and node.js streams along the way.</li>
<li>Built by myself — which was a good for the learning experience.</li>
<li>Don't have to set the codepage to <code>65001</code> for Windows machines.</li>
<li>Series support.
<ul>
<li>I've implemented two different features for supporting a series. One allows me to control through YAML front matter posts and how they tie into a series topic. Another feature allows me to write out a series in a single markdown file, where I can specify a delimiter to split the articles up by. I may blog more about these in the future as they're a feature I've quite liked and was relatively easy to implement using my custom site generator.</li>
</ul>
</li>
<li>Easy post tagging for a custom feed that gets cross-posted to <a href="http://elegantcode.com">elegantcode.com</a></li>
<li>The <a href="http://togglejs.github.io/">tog</a> is easy to extend with custom commands and has a number of pre-built commands already ready to go.</li>
</ul>
<p>Since I've not put a huge amount of time into it - and I haven't exactly developed it to be a competitor to Octopress or other static site generators, it pretty much has just what I need it to have at the moment and not really anything more.</p>
<h1>How is this worse?</h1>
<ul>
<li>I have to maintain it (this is both a blessing and a curse) - don't get the benefits of bug fixes by hundreds of contributors to Octopress.</li>
<li>I haven't yet ditched the Octopress theme, so that change will be coming at some point.</li>
<li>I don't have any automated process to deploying changes. So I can't just create a post on my phone, save to my repo and expect it to automatically show up online - but have ideas on how to do that.</li>
<li>My <code>gulp watch</code> is not working correctly and it's not yet wired up to <code>livereload</code> which would be a nice next step...</li>
</ul>
<h1>BUT...</h1>
<p>This is my site so it's all up to me to make it right...</p>
<p>It's been a pleasure to build this up and just a fun little project to hack on (as if all the <a href="https://github.com/staxmanade/">other OSS projects</a> I hack on aren't enough).</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Use different Git Diff Tools Per File Extension]]></title>
        <id>http://staxmanade.com/2014/12/use-different-git-diff-tools-per-file-extension/</id>
        <link href="http://staxmanade.com/2014/12/use-different-git-diff-tools-per-file-extension/">
        </link>
        <updated>2014-12-29T16:12:11Z</updated>
        <summary type="html"><![CDATA[How to setup git to allow different merge/diff tools based on file extension.]]></summary>
        <content type="html"><![CDATA[<p>How to setup git to allow different merge/diff tools based on file extension.</p>
<p>I'm going to put this here so I can find it later...</p>
<h1>Create a merge-wrapper script</h1>
<p>To allow us the flexibility we want to determine which diff tool should be used for different file extensions, we need to break out the logic in to an external script. Below I have 2 samples of a merge script. I started with the <code>.sh</code> file (bottom), but changed over to the <code>.js</code> version (above that) since it is easier for me to maintain.</p>
<blockquote>
<p>I haven't yet tried to run this on windows, but suspect we can wrap the <code>merge-wrapper.js</code> in a <code>.cmd</code> file calling it with Node.JS.</p>
</blockquote>
<h3>Customize the <code>merge-wrapper.js</code></h3>
<ol>
<li>
<p>Extend with other diff tool support:</p>
<p>If you want to extend the script to add support for your own diff tool, just create a new function that returns an object following the pattern of the existing <code>createP4MergeCommand</code> or <code>createOpenDiffCommand</code>.</p>
</li>
<li>
<p>Modify which diff tool is used per extension:</p>
<p>If you want to change which tool is used per file extensions you can modify the <code>diffLookup</code> hash to map various extensions to whatever tool you setup.</p>
</li>
<li>
<p>Leave me a comment (either here - or in the gist) of what diff tool you added.</p>
<p>I'd be happy to take contributions of other diff tools in this gist if you leave a comment with yours...</p>
</li>
</ol>
<p><div><script src='https://gist.github.com/staxmanade/69db226ae58bdce518cb'></script><noscript><pre><code>#!/usr/bin/env node&#10;&#39;use strict&#39;;&#10;/*&#10;#!/bin/bash&#10;#&#10;# Wrapper script for git mergetool&#10;# This requires ~/.gitconfig file to have&#10;# the following (adjusting for paths):&#10;#&#10;#  [merge]&#10;#    tool = merge_wrapper&#10;#  [mergetool &#34;merge_wrapper&#34;]&#10;#    cmd = $HOME/merge-wrapper.js \&#34;$BASE\&#34; \&#34;$LOCAL\&#34; \&#34;$REMOTE\&#34; \&#34;$MERGED\&#34;&#10;#&#10;# Save this script in your $HOME&#10;#&#10;# How to create p4merge command?&#10;# http://answers.perforce.com/articles/KB_Article/Command-line-P4Merge-on-Mac-OS-X&#10;*/&#10;&#10;// BASE=$1&#10;// LOCAL=$2&#10;// REMOTE=$3&#10;// MERGED=$4&#10;&#10;var path = require(&#39;path&#39;);&#10;var spawn = require(&#39;child_process&#39;).spawn;&#10;var diffArgs = process.argv.slice(2);&#10;&#10;diffArgs = {&#10;  BASE: diffArgs[0],&#10;  LOCAL: diffArgs[1],&#10;  REMOTE: diffArgs[2],&#10;  MERGED: diffArgs[3],&#10;  REST: diffArgs.slice(4),&#10;  ALL: diffArgs.slice(0),&#10;};&#10;&#10;var diffOptions;&#10;&#10;function createP4MergeCommand(args) {&#10;&#10;  var result = {&#10;    cmd: &#34;p4merge&#34;,&#10;    args: args.ALL&#10;  };&#10;&#10;&#10;  // p4merge doesn&#39;t like to be called with the extra REMOTE=3/MERGED=4&#10;  // args so we lop them off before loading it up for images.&#10;  if(isImage(args.BASE)) {&#10;    result.args = [args.BASE, args.LOCAL];&#10;  }&#10;&#10;  return result;&#10;}&#10;&#10;function createOpenDiffCommand(args) {&#10;&#10;  var result = {&#10;    cmd: &#34;opendiff&#34;,&#10;    args: [args.BASE, args.LOCAL]&#10;  };&#10;&#10;  return result;&#10;}&#10;&#10;var isImage = function (path) {&#10;&#10;  var imageExtensions = [&#10;    &#34;bmp&#34;, &#34;gif&#34;, &#34;jpg&#34;, &#34;jpeg&#34;,&#10;    &#34;png&#34;, &#34;pbm&#34;, &#34;pgm&#34;, &#34;ppm&#34;,&#10;    &#34;tiff&#34;, &#34;xbm&#34;, &#34;xpm&#34;&#10;  ];&#10;&#10;  return imageExtensions.some(function (ext) {&#10;    return new RegExp(&#34;.&#34; + ext + &#34;$&#34;, &#39;i&#39;).test(path);&#10;  });&#10;};&#10;&#10;function launch(diffOptions) {&#10;  var cmd = spawn(diffOptions.cmd, diffOptions.args);&#10;&#10;  cmd.stdout.on(&#39;data&#39;, function (data) {&#10;    console.log(data);&#10;  });&#10;&#10;  cmd.stderr.on(&#39;data&#39;, function (data) {&#10;    console.error(data.toString());&#10;  });&#10;&#10;  cmd.on(&#39;close&#39;, function (code) {&#10;    process.exit(code);&#10;  });&#10;}&#10;&#10;var diffLookup = {&#10;  &#34;.bmp&#34;: createP4MergeCommand,&#10;  &#34;.gif&#34;: createP4MergeCommand,&#10;  &#34;.jpg&#34;: createP4MergeCommand,&#10;  &#34;.jpeg&#34;: createP4MergeCommand,&#10;  &#34;.png&#34;: createP4MergeCommand,&#10;  &#34;.pbm&#34;: createP4MergeCommand,&#10;  &#34;.pgm&#34;: createP4MergeCommand,&#10;  &#34;.ppm&#34;: createP4MergeCommand,&#10;  &#34;.tiff&#34;: createP4MergeCommand,&#10;  &#34;.xbm&#34;: createP4MergeCommand,&#10;  &#34;.xpm&#34;: createP4MergeCommand,&#10;&#10;// EX: using different diff command&#10;//  &#34;.js&#34;: createOpenDiffCommand,&#10;&#10;  &#34;DEFAULT&#34;: createP4MergeCommand&#10;};&#10;&#10;var fileExt = (path.extname(diffArgs.BASE) || &#39;&#39;).toLowerCase();&#10;&#10;diffOptions = (diffLookup[fileExt] || diffLookup.DEFAULT)(diffArgs);&#10;&#10;//console.log(diffOptions);&#10;&#10;launch(diffOptions);&#10;</code></pre></noscript></div></p>
<p>Below was an attempt at using a bash script to manage what I do above, it'll work for some, but I didn't want to maintain this - prefer the JS version instead.</p>
<p><div><script src='https://gist.github.com/staxmanade/69db226ae58bdce518cb'></script><noscript><pre><code>#!/bin/bash&#10;#&#10;# Wrapper script for git mergetool&#10;# This requires the .gitconfig file to have&#10;# the following (adjusting for paths):&#10;#&#10;#  [merge]&#10;#    tool = merge_wrapper&#10;#  [mergetool &#34;merge_wrapper&#34;]&#10;#    cmd = $HOME/merge-wrapper.sh \&#34;$BASE\&#34; \&#34;$LOCAL\&#34; \&#34;$REMOTE\&#34; \&#34;$MERGED\&#34;&#10;#&#10;# Save this script in your $HOME&#10;#&#10;# # How to create p4merge command?&#10;# http://answers.perforce.com/articles/KB_Article/Command-line-P4Merge-on-Mac-OS-X&#10;#&#10;&#10;BASE=$1&#10;LOCAL=$2&#10;REMOTE=$3&#10;MERGED=$4&#10;&#10;if [[ $BASE == *.png ]]; then&#10;  echo &#34;Image diff..&#34;;&#10;  CMD=&#34;p4merge \&#34;$BASE\&#34; \&#34;$LOCAL\&#34;&#34;&#10;  echo $CMD&#10;  eval $CMD&#10;else&#10;  #Finally, the default case:&#10;  CMD=&#34;p4merge \&#34;$BASE\&#34; \&#34;$LOCAL\&#34; \&#34;$REMOTE\&#34; \&#34;$MERGED\&#34;&#34;&#10;  #CMD=&#34;opendiff \&#34;$BASE\&#34; \&#34;$LOCAL\&#34; -ancestor \&#34;$REMOTE\&#34; -mergeFile \&#34;$MERGED\&#34;&#34;&#10;  echo $CMD&#10;  eval $CMD&#10;fi&#10;</code></pre></noscript></div></p>
<h1>Setup <code>~/.gitconfig</code></h1>
<p>Now that we've created our merge wrapper script we need to tell git how to use it.</p>
<p>Say we placed our merge script in the following directory: <code>$HOME/dotfiles/tools/merge-wrapper.js</code>. You can add the below to your <code>~/.gitconfig</code> file and when you use <code>git difftool</code> our new merge-wrapper will be used to pick diff tools based on file extension.</p>
<pre><code>[merge]
    tool = merge_wrapper
[mergetool <span class="hljs-string">"merge_wrapper"</span>]
    cmd = <span class="hljs-variable">$HOME</span>/dotfiles/tools/merge-wrapper.js \<span class="hljs-string">"<span class="hljs-variable">$BASE</span>\"</span> \<span class="hljs-string">"<span class="hljs-variable">$LOCAL</span>\"</span> \<span class="hljs-string">"<span class="hljs-variable">$REMOTE</span>\"</span> \<span class="hljs-string">"<span class="hljs-variable">$MERGED</span>\"</span>
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing SkypeIt - Command Line Skype Phone Calls]]></title>
        <id>http://staxmanade.com/2014/12/introducing-skypeit---command-line-skype-phone-calls/</id>
        <link href="http://staxmanade.com/2014/12/introducing-skypeit---command-line-skype-phone-calls/">
        </link>
        <updated>2014-12-24T22:22:17Z</updated>
        <summary type="html"><![CDATA[# [SkypeIt](https://github.com/staxmanade/skypeit) ]]></summary>
        <content type="html"><![CDATA[<h1><a href="https://github.com/staxmanade/skypeit">SkypeIt</a></h1>
<p>In short <code>npm install -g skypeit</code> and enjoy quickly jumping on conference calls.</p>
<h2>What is it?</h2>
<p>A simple little command line utility that can be used to efficiently jump on a conference call and automatically dials the extension or conference ID.</p>
<h1>What pain does this solve?</h1>
<p>I've recently been working on a number of projects where often times more than twice a day I have to jump on a conference bridge.</p>
<p>This typically involves:</p>
<ol>
<li>Opening the Outlook appointment</li>
<li>Copying just the conference phone number (without extension)</li>
<li>Pasting it in Skype to dial</li>
<li>While Skype is dialing, I go back to Outlook and copy the extension/conference id.</li>
<li>Pasting in Skype's number pad area</li>
<li>Type or use the mouse to press the final <code>#</code> key.</li>
</ol>
<h1>How does <a href="https://github.com/staxmanade/skypeit">SkypeIt</a> improve this?</h1>
<p><a href="https://github.com/staxmanade/skypeit">SkypeIt</a> takes the 6 steps and cuts them in half or more.</p>
<ol>
<li>Open the Outlook appointment</li>
<li>Copy the conference phone number &amp; extension (if there is one) in one shot.</li>
<li>At the (already open command line - because we developers usually have a command line open) paste in <code>skypeit &quot;&lt;paste here&gt;&quot; &lt;press enter&gt;</code></li>
</ol>
<p>The problem this solves may seem like a first world problem, but a big annoyance factor when running through the original steps to get on a conference call is, people who setup these meetings, rarely include the final <code>#</code> sign needed at the end of a conference ID/extension #. So when I paste the extension into Skype, I still have to manually get the <code>#</code> in there.</p>
<h1><a href="https://github.com/staxmanade/skypeit">SkypeIt</a> even better with teams!</h1>
<p>If you <a href="http://staxmanade.com/2014/12/thoughts-on-working-remotely-from-home/">work remotely as I do</a>, then you're probably communicating through things like HipChat, Skype, Slack, AOL (I-kid, I-kid), etc. Instead of I.M.ing your team to remind them to jump on a call where they would have to repeat the long steps above, you can just paste the <code>skypeIt ###-###-### ######</code> command necessary to immediately jump on a call. This serves to remind them a call is coming up or already started and saves time from having to find the number/extension as they can copy/paste it directly at the command line.</p>
<p>Or even better, if you're on a Mac and using ZSH at the command line, SkypeIt has tab completion support and a YAML config strategy, so you can easily configure a project with your standard phone numbers (say daily standup conference number) and check in a <code>.skypeitrc</code> file to the project. When you're in the context of the project you can just type <code>skypeit stand&lt;tab&gt;</code> and jump on your daily standup conference call.</p>
<blockquote>
<p>Does anyone who works remotely actually stand-up on a daily standup call? hmmm...</p>
</blockquote>
<h1>Still early...</h1>
<p>SkypeIt was written to solve a personal pain-point and is not yet a complete solution for all conference call situations. If you'd like to see your scenario supported, head on over to the <a href="https://github.com/staxmanade/skypeit/issues">SkypeIt Issues</a> on GitHub and drop me a line.</p>
<p>I'm not currently using a windows machine - but with the windows protocol activation capabilities, we can probably easily add support for windows to <a href="https://github.com/staxmanade/skypeit">SkypeIt</a>.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Thoughts on Working Remotely from Home]]></title>
        <id>http://staxmanade.com/2014/12/thoughts-on-working-remotely-from-home/</id>
        <link href="http://staxmanade.com/2014/12/thoughts-on-working-remotely-from-home/">
        </link>
        <updated>2014-12-14T00:45:43Z</updated>
        <summary type="html"><![CDATA[> This post may seem a bit longer than my usual posts. It's one I've slowly been extending over the last couple years while working remotely. Many of ...]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>This post may seem a bit longer than my usual posts. It's one I've slowly been extending over the last couple years while working remotely. Many of the points may be obvious ones, but if you're considering a work-from-home (remotely) type of position that you consider some of these topics.</p>
</blockquote>
<h1>Background</h1>
<p>My previous job afforded me the opportunity to work from home a couple days out of the week. While putting my wife through school, those days were great. I would start work extra early so I could leave early and watch our little girl while my wife headed off to class. The early start was great because these quiet mornings were often the most productive part of my day. The lack of distractions such as email, meetings, and instant message chats along with the quiet focus time all contributed to this increased productivity.</p>
<p>While I quite enjoyed this time, was often productive, and it helped my family I still preferred to go into the office over working from home.</p>
<p>So why did I still prefer going to the office over working from home?</p>
<p>I did not feel as connected to the group, which left me feeling as thought I was always playing catchup. All of those water-cooler discussions and inpromptu office meetings where I (or anyone else remote) wasn't pulled into more often not left me feeling like I was not able to keep on top of what was going on.</p>
<p>This experience and the feeling it left me with is what concerned me about the new job I was about to take.</p>
<h1>Worried to take a remote / work from home job.</h1>
<p>Given my limited work from home experience, I was concerned about working remotely 100% of the time. However, the new opportunity to work for a <a href="http://vertigo.com">consulting firm I admired,</a> and the thought of being able to constantly try new technologies, and business domains was really appealing.</p>
<p>I have now worked remotely for Vertigo for over 3 years and I'd like to share a list of Pros/Cons that I've gathered through my experience working from home full time.</p>
<h1>Con's to working from home</h1>
<p>Now, while Con's do not outweigh the Pro's for me, there is quite a bit of grey area here, so let's review some con's.</p>
<ul>
<li>Less human/social interaction on a daily basis. As an introvert, and a software developer, this is generally not too bad. This was a bigger concern for me originally and is much less of an issue now that I've tried it out. I make sure to take some time to have great Skype video calls with fellow remote coworkers and I also try to offset this by participating in local user groups or and other social occasions. However, the best medicine for this is a simple trip to the park with my little girls. I will say that I've had a day or two where I jumped at the opportunity to take a trip to Costco or other errand just so I could get out of the house...</li>
<li>Shipping Hardware.
<ul>
<li>This one is a bit of a pain. Working for a consulting firm means there are many of different projects that require varying hardware configurations. From <a href="http://www.amazon.com/gp/product/B00NFXON1Q/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00NFXON1Q&amp;linkCode=as2&amp;tag=staxmanadecom-20&amp;linkId=EL5GYMNM3KI4HBGO">Xboxes</a>, test phones, tablets, computers, and even <a href="http://www.amazon.com/gp/product/B00I7JZNIU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00I7JZNIU&amp;linkCode=as2&amp;tag=staxmanadecom-20&amp;linkId=3SZPKBVY7VEVBMO7">TVs</a>. I semi-regularly run to FedEx and send something to H.Q. or the Apple Store or Best Buy to pick up some hardware based on the needs of a project.</li>
</ul>
</li>
<li>It can be a little too easy to sit at the personal computer in the evening and reach over to my work computer to reply to a late work-related email, or hammer on some code. So you need to be careful about the work/family balance when it's so easy to work from home. This takes a bit of discipline.</li>
<li>Sitting in the office chair when the amazingly yummy aromas of some fresh home cooking - distracting me from being productive as the smell is driving my stomach to scream at me to go downstairs for some food!</li>
<li>Communication
<ul>
<li>Being remote, you have to become an over-communicator. An email here and there is fine, but combine that with chat/I.M., phone calls, video chat calls (preferred), and more emails. However, you have to work a little harder to be noticed, especially if you have to compete with people who are all working in the same office.</li>
</ul>
</li>
<li>It often takes a little more discipline to take breaks.</li>
<li>Time Zones
<ul>
<li>Time Zones are a hassle from many different angles, even when you work at an office; however, working remotely often means your employer has hired you because you are not near them. This increases the chance that you are several or more timezones away from your company's headquarters. Which can mean the usual things like meal planning, start/stop times, etc require a bit more planning and accommodation.</li>
</ul>
</li>
</ul>
<h1>Pro's to working from home</h1>
<ul>
<li>Home office temperature!
<ul>
<li>Like most indoor jobs, AC and Heat are good amenities to have, but in big buildings people cannot often control the temperature. It's either too cold or too hot as big buildings have a mind of their own (their airflow and ventilation kinks). However, working from home, you're the <strong>master of your indoor weather</strong>. If you get hot, take off some clothes or turn on the AC. If you're too cold, put on some clothes or crank up the heat.</li>
</ul>
</li>
<li>Commute
<ul>
<li>I often joke with my fellow Californian commute ridden co-workers when they complain about traffic that day that I narrowly avoided a 3 (lego) car pile-up on my way to the office.</li>
<li>I live where it's cold in the winter and not having to scrape the ice off of the windshield of my car in the morning due to the icy dew is a HUGE benefit.</li>
<li>Plus there's the, well not commuting part. While I enjoyed using the commute to zone out to my <a href="http://staxmanade.com/about/podcasts.html">favorite podcasts</a>, I still find time to keep up with my podcast when doing things like laundry, dishes, etc.</li>
</ul>
</li>
<li>More family time overall. Since my coffee, water, bathroom breaks all lead to opportunities where I can say hello to the family.</li>
<li><a href="http://www.amazon.com/gp/product/B00GLLVH72/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00GLLVH72&amp;linkCode=as2&amp;tag=staxmanadecom-20&amp;linkId=FCMDP27PBQTYHNTS">SWEATPANTS!</a> My wife recently <a href="http://www.amazon.com/gp/product/B00GLLVH72/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00GLLVH72&amp;linkCode=as2&amp;tag=staxmanadecom-20&amp;linkId=FCMDP27PBQTYHNTS">introduced me to sweatpants</a>. OMG they are comfortable, try wearing those at the stuffy-formal-office...</li>
<li>Quiet place to focus. It's easy to isolate yourself from the outside world if you need some quiet time to focus and be productive. Shut off the I.M., put phone on do not disturb, close email and get some serious work done.</li>
<li>We have all the usual necessities at home,
<ul>
<li>Tools (for that time you need a screwdriver)</li>
<li>Easy access to hygiene related products/tools. Ever need to take a shower in the middle of the day? Change of clothes (spilled coffee....)? Or brush your teeth?</li>
</ul>
</li>
<li>Invest in your office.
<ul>
<li>When you invest in your home office, you're investing in yourself. Get a good chair, desk, keyboard, mouse, etc.</li>
</ul>
</li>
<li>Lunch at home. My wife is a great cook. I'm spoiled to nearly always have a great set of leftovers in the fridge. Keeping me from eating out all the time. Not having to worry about someone eating my leftover chicken-wings (ya, that really happened - not even funny - You know who you are!)</li>
<li>My wife just brought me the most amazing homemade burrito. I didn't even care I was on a video call with my team. nom...nom...nom...</li>
<li>One of my favorite perks, is not even a perk that any company could offer (or even replace). I take the opportunity to for 10-minute break in the afternoon, where I walk up the street to meet my daughter at the bus stop. This is so much more important in my life than practically any company can offer (like free lunches, ping-pong table, etc...).</li>
<li>Scheduling an at-home call is easy. It's rarely a problem to have a fix-it man come by, or cable-guy, or if a package needs to be signed for, working from home makes this easy.</li>
<li>David's Additions: I shared a draft of this post to a <a href="http://t3rse.com/">good friend and coworker</a> and he gave me some other tips, I hadn't thought of, which I totally agree.
<ul>
<li>You struggle on problems and your kid walks in the room and puts your life in perspective.</li>
<li>I can listen to my music turned way up!</li>
</ul>
</li>
</ul>
<h1>What about distractions?</h1>
<p>I get this a lot, when I tell others I work from home. &quot;I don't know how you don't get distracted with other things to do at home.&quot; This may be a very individual thing. While, there can be distractions at home, I've always been a focused individual and I would say it's often easier to be distracted at the office with office chit-chat, meetings, going out to lunch, etc.</p>
<h1>Not-so socially appropriate</h1>
<ul>
<li>When you're at the office, possibly in a long meeting, what do you do if you have some gas? Working remotely, there's no stress, or stomach pain... Mute your conference call, relax and nobody is the wiser. (Except this one time, I did such a thing not realizing my wife was within an earshot. Yea, a bit embarrassing but we had a laugh over it.)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[One of the Simplest Things You can do to Improve Email Communication]]></title>
        <id>http://staxmanade.com/2014/11/one-of-the-simplest-things-you-can-do-to-improve-email-communication/</id>
        <link href="http://staxmanade.com/2014/11/one-of-the-simplest-things-you-can-do-to-improve-email-communication/">
        </link>
        <updated>2014-11-30T16:43:50Z</updated>
        <summary type="html"><![CDATA[# TL;DR]]></summary>
        <content type="html"><![CDATA[<h1>TL;DR</h1>
<p>Respond to emails with <strong>got it</strong>. Or some context-related reply, for example: <strong>thanks</strong> or <strong>will respond with further detail later...</strong></p>
<h1>More Context</h1>
<p>We all know that communication is important, and often where things go awry.</p>
<p>I sometimes wonder if I'm alone in this thinking, but don't think I am. When I send an important email, I like to know that the person on the other end received it. It may be an email that will take the other person time to respond with the detail necessary, but it's awfully unproductive to send an email, and wait  a day or two before finding out that the communication was never received.</p>
<p>Simply replying with <strong>got it</strong> or <strong>got it, will respond with more detail later...</strong> is a great way to notify me that you've received the email (and may take some time to respond).</p>
<p>I don't necessarily care that my email takes priority, but at least knowing that the other end has seen it is 1/2 the battle.</p>
]]></content>
    </entry>
</feed>