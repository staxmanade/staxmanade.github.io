<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Developing on Staxmanade]]></title>
    <link>http://staxmanade.com</link>
    <updated>2016-06-29T01:46:02Z</updated>
    <author>
        <name>Jason Jarrett</name>
        <uri>http://staxmanade.com/about</uri>
    </author>
    <link rel="alternate" href="http://staxmanade.com"/>
    <link rel="self" href="http://feeds.feedburner.com/DevelopingOnStaxmande"/>
    <rights>Copyright (C) 2008-2016 Jason Jarrett</rights>
    <generator>Feed for Node.js</generator>
    <entry>
        <title type="html"><![CDATA[One Programmers Letter to his Wife]]></title>
        <id>http://staxmanade.com/2016/06/one-programmers-letter-to-his-wife/</id>
        <link href="http://staxmanade.com/2016/06/one-programmers-letter-to-his-wife/">
        </link>
        <updated>2016-06-29T01:46:02Z</updated>
        <summary type="html"><![CDATA[One of my core natures is as a builder and creator. I'm strongly introverted so much of my time is spent in my own head. My best and sometimes worst t...]]></summary>
        <content type="html"><![CDATA[<p>One of my core natures is as a builder and creator. I'm strongly introverted so much of my time is spent in my own head. My best and sometimes worst times are regularly spent by myself. I know you already know many things about introverts, but as a refresher I'd like you to read this.</p>
<blockquote>
<p><a href="http://www.theatlantic.com/magazine/archive/2003/03/caring-for-your-introvert/302696/">Caring for your introvert</a></p>
</blockquote>
<p>As a creator, one of the happiest moments we can experience is getting into a state of &quot;flow&quot;.</p>
<blockquote>
<p>In positive psychology, flow, also known as the zone, is the mental state of operation in which a person performing an activity is fully immersed in a feeling of energized focus, full involvement, and enjoyment in the process of the activity.
<a href="">https://en.wikipedia.org/wiki/Flow_(psychology)</a></p>
</blockquote>
<p>I've heard this flow state described as a process where the mind is so focus on the task at hand, so engulfed in the spirit of the process that all other external processing of our environment and even our own bodily needs can be ignored. The brain puts so much energy and focus into this, that things like the need to eat, sleep, or sometimes even ignoring the restroom (for as long as possible - waiting until my bladder is SCREAMING at me).</p>
<p>I'm quite happy when I'm making progress on my creation(s) as they can often invoke this flow state. While the opposite of the &quot;enjoyment&quot; can certainly happen while working on projects as they can frustrate the heck out of me sometimes and if it ever bleeds into our relationship I'm sorry for that.</p>
<p>I wish I could convey the highs I can experience while in &quot;flow&quot; as strongly as you've likely see my frustrations about the lows. Sadly, without the lows, struggle, up hill battles, cussing at the computer I could possibly never really experience the feelings of success or overcoming that struggle and enjoy them as much as I do.</p>
<p>Between work, family time, children, shopping, housework, sleep and whatever else we fill our days with, it often times feels like I get to apply very little time to this thing that I am truly driven (maybe slightly addicted to) and excited about.</p>
<p>I know you try to give me time to work on these things. There are times you think you've given a Saturday morning or an evening for me to work on my thing. However, sadly for it to truly be a successful session, I need time and space with room to concentrate. An hour before bedtime makes me feel like I shouldn't even try, because it could take at least 30-40 min to get back into the project leaving so little time to be productive that it's not even worth starting. These are times when I decide to blow any amount of time I've been given and just waste it watching a show on Netflix. Not because I don't want to work on my thing, but because I know the amount of effort it will take to get into the flow state will take far too long to make it worth it. If I were to get into flow, I'm then going to want to stay there and likely push past my bed time (which is getting harder and harder to recover from).</p>
<p>I don't want this to sound like this creation/building thing is more important than my family. In fact it's not. If you look at my actions and track record, the amount of time I have pushed aside so I could help you with your endeavors by watching kids, taking on extra shopping trips, house duties as well as the financial obligation (and strain), and still finding time to spend with you in the evenings at the expense of this thing I want to do should prove that my commitment to the family (and you) is still a priority.</p>
<p>I don't know how to close this out an wrap it up, other than to say I love you. I love my children. I also love what I build. I would like to work with you to find a way to balance these items a little better.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reusable React Component with Overridable Inline CSS Styles]]></title>
        <id>http://staxmanade.com/2016/06/reusable-react-component-with-overridable-inline-css-styles/</id>
        <link href="http://staxmanade.com/2016/06/reusable-react-component-with-overridable-inline-css-styles/">
        </link>
        <updated>2016-06-21T21:31:22Z</updated>
        <summary type="html"><![CDATA[React's Component model is great at allowing the component creator to define the interface that consumers of the component interact with. (What is exp...]]></summary>
        <content type="html"><![CDATA[<p>React's Component model is great at allowing the component creator to define the interface that consumers of the component interact with. (What is exposed vs what is abstracted away).</p>
<p>If you're building a component and using any in-line styles and you're not careful you can lock the consumer of you're component out of potential customizations they may require for their specific use-case (that you can't think of or foresee). Trying to build components to be reusable and a little more <a href="https://en.wikipedia.org/wiki/Open/closed_principle">OCP</a> can be challenging especially with how difficult it can be to get css layouts the way you (or the consumer of you're component) may want...</p>
<p>As an example, let's create simple <code>img</code> component to illustrate the point.</p>
<p>Let's say we have the following image component.</p>
<pre><code><span class="hljs-keyword">import</span> <span class="hljs-type">React</span> from <span class="hljs-symbol">'reac</span>t';

export <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Image</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span></span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> {</span>

  render() {
    <span class="hljs-keyword">return</span> (
      &lt;div&gt;
        &lt;img src={<span class="hljs-keyword">this</span>.props.src} /&gt;
      &lt;/div&gt;
    );
  }

}
</code></pre>
<p>The above component is very simple and very specific.</p>
<p>Now let's say we allow our consumers to customize the height or width of the image. You may think, ok, simple we'll just allow the consumer to specify <code>height</code> and <code>width</code> as props to the component.</p>
<p>So the consumer could just go <code>&lt;Image height=&quot;20&quot; width=&quot;20&quot; src=&quot;someimage.png&quot; /&gt;</code>.</p>
<p>And you end up with something that could look like this.</p>
<pre><code><span class="hljs-keyword">import</span> <span class="hljs-type">React</span> from <span class="hljs-symbol">'reac</span>t';

export <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Image</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span></span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> {</span>

  render() {
    let imageStyle = {
      height: <span class="hljs-keyword">this</span>.props.height,
      width: <span class="hljs-keyword">this</span>.props.width
    };
    <span class="hljs-keyword">return</span> (
      &lt;div&gt;
        &lt;img src={<span class="hljs-keyword">this</span>.props.src} style={imageStyle} /&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>
<p>Now this works for a while, the consumers of you're component are happy they can control the <code>height</code> and <code>width</code> and everyone's humming along merrily.</p>
<p>Then someone comes to you and says they are having some layout issues and need to control something like <code>float</code>, or <code>margin</code>, or <code>padding</code>... This idea of extending the component with more props could become cumbersome if we have to do this for each and every potential layout option available.</p>
<p>How could we extend this generic pattern into something that allows the component to define a general set of happy defaults, while still giving the consumer complete control over layout?</p>
<h1>One Possible Solution</h1>
<p>We can use something like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign()</a> to easily accomplish this.</p>
<p>We can allow the consumers to pass in their own <code>style={...}</code> property and provide a set of sensible defaults for the component, but allow the consumer of our component to completely override a style if necessaryl</p>
<p>We can update our:</p>
<pre><code>    let imageStyle = {
      <span class="hljs-variable">height</span>: <span class="hljs-keyword">this</span>.props.<span class="hljs-variable">height</span>,
      <span class="hljs-variable">width</span>: <span class="hljs-keyword">this</span>.props.<span class="hljs-variable">width</span>
    };
</code></pre>
<p>to the following pattern:</p>
<pre><code>    <span class="hljs-keyword">let</span> imageStyle = Object.<span class="hljs-keyword">assign</span>(
      {},                               <span class="hljs-comment">// target (starting with)</span>
      { ...sensible defaults... },  <span class="hljs-comment">// some pre-defined default React inline-style for the component</span>
      <span class="hljs-keyword">this</span>.props.style              <span class="hljs-comment">// allow consumers to override properties</span>
    );
</code></pre>
<p>Now if the consumer calls the component with <code>&lt;Image style={{height: &quot;21px&quot;, width: &quot;21px&quot;}} src=&quot;someImage.png&quot; /&gt;</code> the component's consumers' values will override any defaults provided. And they can extend the style with anything else they may need.</p>
<p>Happy Componentization!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Strange error on docker-compose up: oci runtime error: exec format error]]></title>
        <id>http://staxmanade.com/2016/05/strange-error-on-docker-compose-up/</id>
        <link href="http://staxmanade.com/2016/05/strange-error-on-docker-compose-up/">
        </link>
        <updated>2016-05-27T20:18:56Z</updated>
        <summary type="html"><![CDATA[I ran into a non-intuitive error while mucking around with [docker-compose](https://docs.docker.com/compose/) recently on [an example](http://staxmana...]]></summary>
        <content type="html"><![CDATA[<p>I ran into a non-intuitive error while mucking around with <a href="https://docs.docker.com/compose/">docker-compose</a> recently on <a href="http://staxmanade.com/2016/05/how-to-get-environment-variables-passed-through-docker-compose-to-the-containers/">an example</a>.</p>
<h1>docker-compose up</h1>
<pre><code>Building some_server
Step 1 : FROM alpine
 -<span class="ruby">--&gt; <span class="hljs-number">13</span>e1761bf172
</span>Step 2 : ENV DEMO_VAR WAT
 -<span class="ruby">--&gt; <span class="hljs-constant">Using</span> cache
</span> -<span class="ruby">--&gt; <span class="hljs-number">378</span>dbaa4a048
</span>Step 3 : COPY docker-entrypoint.sh /
 -<span class="ruby">--&gt; e5962cef9382
</span>Removing intermediate container 43fa24c31444
Step 4 : ENTRYPOINT /docker-entrypoint.sh
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>a2e19bf7a45
</span> -<span class="ruby">--&gt; <span class="hljs-number">331</span>d2648d969
</span>Removing intermediate container 5a2e19bf7a45
Successfully built 331d2648d969
Recreating exampleworkingdockercomposeenvironmentvars_some_server_1
</code></pre>
<h1>The Error</h1>
<pre><code>ERROR: for some_server  rpc error: code = 2 desc = "oci runtime error: exec format error"
Traceback (most recent <span class="hljs-operator"><span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):
  <span class="hljs-keyword">File</span> <span class="hljs-string">"&lt;string&gt;"</span>, line <span class="hljs-number">3</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;
  <span class="hljs-keyword">File</span> <span class="hljs-string">"compose/cli/main.py"</span>, line <span class="hljs-number">63</span>, <span class="hljs-keyword">in</span> <span class="hljs-keyword">main</span>
AttributeError: <span class="hljs-string">'ProjectError'</span> <span class="hljs-keyword">object</span> has <span class="hljs-keyword">no</span> <span class="hljs-keyword">attribute</span> <span class="hljs-string">'msg'</span>
docker-compose returned -<span class="hljs-number">1</span>
</span></code></pre>
<h1>The Actual Problem and Solution:</h1>
<p>I had a <code>Dockerfile</code> that used an entrypoint that looked like <code>ENTRYPOINT [&quot;/docker-entrypoint.sh&quot;]</code>.</p>
<p>The real problem was the <code>docker-entrypoint.sh</code> script was missing a <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">#shebang</a>.</p>
<p>So changing this</p>
<pre><code><span class="hljs-built_in">echo</span> <span class="hljs-string">"ENV Var Passed in: <span class="hljs-variable">$DEMO_VAR</span>"</span>
</code></pre>
<p>to this</p>
<pre><code><span class="hljs-shebang">#!/bin/sh</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"ENV Var Passed in: <span class="hljs-variable">$DEMO_VAR</span>"</span>
</code></pre>
<p>solved my issue!</p>
<p>Also note it'll depend on the base image <code>FROM &lt;some linux distro&gt;</code> that may chagne what you're required #shebang should be.</p>
<p>Whew!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Get Environment Variables Passed Through docker-compose to the Containers]]></title>
        <id>http://staxmanade.com/2016/05/how-to-get-environment-variables-passed-through-docker-compose-to-the-containers/</id>
        <link href="http://staxmanade.com/2016/05/how-to-get-environment-variables-passed-through-docker-compose-to-the-containers/">
        </link>
        <updated>2016-05-26T04:36:41Z</updated>
        <summary type="html"><![CDATA[I've been playing with a [little toy](https://github.com/staxmanade/sample-pouch-couch-databaseperuser) that uses [docker-compose](https://docs.docker...]]></summary>
        <content type="html"><![CDATA[<p>I've been playing with a <a href="https://github.com/staxmanade/sample-pouch-couch-databaseperuser">little toy</a> that uses <a href="https://docs.docker.com/compose">docker-compose</a> to bring together a web app, couchdb, and redis container into an easy-ier-ish cohesive unit.</p>
<p>While working on it (and to make it a bit more generic), my next step was to find a way to pass the database admin user/pass (and other configuraiton options) into the containers as <strong>environment variables</strong> which took me way longer to figure out than it should have...</p>
<p>Hopefully this posts helps it click for you a little faster than it (didn't) for me :)</p>
<p>If you land here, you've likely already poured over the different parts of documentation for docker, docker-compose and environment variables.</p>
<p>Things like:</p>
<ul>
<li><a href="https://docs.docker.com/compose/compose-file/#variable-substitution">https://docs.docker.com/compose/compose-file/#variable-substitution</a></li>
<li><a href="https://docs.docker.com/compose/compose-file/#env-file">https://docs.docker.com/compose/compose-file/#env-file</a></li>
<li><a href="http://stackoverflow.com/questions/29377853/how-to-use-environment-variables-in-docker-compose">http://stackoverflow.com/questions/29377853/how-to-use-environment-variables-in-docker-compose</a></li>
<li>Google: <a href="http://lmgtfy.com/?q=docker-compose+environment+variables">docker-compose environment variables</a></li>
</ul>
<p>In case things drift in the product or docs, this post was written using <code>docker-compose version 1.7.1, build 0a9ab35</code> so keep that in mind...</p>
<p>I think the difficult thing for me was piecing the various ways you can get environment variables defined and the necessary mapping required within the <code>docker-compose</code> file.</p>
<h1>Environment Variable Setup Stages.</h1>
<p>For me it didn't click until I was able to think about the stages that needed to exist for an environment variable to go from the development computer -&gt; to the -&gt; docker container.</p>
<p>For now I'm thinking of using the following model...</p>
<pre><code>
 ------------------------       --------------------       ------------------
|<span class="hljs-string">   Env Source           </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> docker-compose.yml </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> Docker Container </span>|
|<span class="hljs-string">                        </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                    </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                  </span>|
|<span class="hljs-string">   A) .env file         </span>|<span class="hljs-string"> --&gt; </span>|<span class="hljs-string"> map env vars using </span>|<span class="hljs-string"> --&gt; </span>|<span class="hljs-string"> echo $DEMO_VAR   </span>|
|<span class="hljs-string">   B) run-time terminal </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> enterpolation      </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                  </span>|
|<span class="hljs-string">       env var          </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> in this file.      </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                  </span>|
 ------------------------      ---------------------       ------------------
</code></pre>
<h1>A working example.</h1>
<p>If you want to see all of this in one place <a href="https://github.com/staxmanade/example-working-docker-compose-environment-vars">check out this github example</a> which is outline below.</p>
<p>The example above is layed out like so...</p>
<pre><code>.
|<span class="hljs-string">____.env
</span>|<span class="hljs-string">____docker-compose.yml
</span>|<span class="hljs-string">____env-file-test
</span>|<span class="hljs-string"> </span>|<span class="hljs-string">____docker-entrypoint.sh
</span>|<span class="hljs-string"> </span>|____Dockerfile
|<span class="hljs-string">____README.md
</span></code></pre>
<h1>The <code>.env</code> file:</h1>
<p>This is where you can place each of the environment variables you need in here.</p>
<pre><code>DEMO_VAR=Test <span class="hljs-built_in">value</span> <span class="hljs-built_in">from</span> .env <span class="hljs-built_in">file</span>!
</code></pre>
<p>As the <a href="https://docs.docker.com/compose/compose-file/#env-file">docs say</a> you can use <code># as comments</code> and blank lines in the file - all other lines must be in the format of <code>ENV_VAR=ENV_VALUE</code>.</p>
<p><img class="emoji" title="warning" alt="warning" src="https://assets-cdn.github.com/images/icons/emoji/unicode/26a0.png" height="20" width="20" align="absmiddle"> environment variables in you're terminal's context will take presedent over the values in the <code>.env</code> file. <img class="emoji" title="warning" alt="warning" src="https://assets-cdn.github.com/images/icons/emoji/unicode/26a0.png" height="20" width="20" align="absmiddle"></p>
<h1>The <code>docker-compose.yml</code>:</h1>
<pre><code><span class="hljs-keyword">version</span>: <span class="hljs-string">"2"</span>
services:
  some_server:
    build: ./env-<span class="hljs-keyword">file</span>-<span class="hljs-keyword">test</span>
    environment:
     - DEMO_VAR=<span class="hljs-label">${DEMO_VAR}</span>
</code></pre>
<p>The above file is the part where I got tripped up, and once I added the <code>environment:</code> section it all clicked.</p>
<p>You likely don't want every one of you're development or production server's environment variables to show up inside you're container. This file acts a bit like the <code>docker run -e ENV_VAR=FOO</code> option and allows you to select specific environment variables that are to be passed into the container.</p>
<p>I like the declaritive approach of this file as it makes environment variable dependencies explicit.</p>
<h1>The <code>env-file-test/Dockerfile</code>:</h1>
<pre><code><span class="hljs-built_in">FROM</span> alpine

<span class="hljs-built_in">ENV</span> DEMO_VAR WAT

<span class="hljs-built_in">COPY</span> <span class="bash">docker-entrypoint.sh /
</span><span class="hljs-built_in">ENTRYPOINT</span> <span class="bash">[<span class="hljs-string">"/docker-entrypoint.sh"</span>]
</span></code></pre>
<p>Pretty standard <code>Dockerfile</code>, but one thing I learned is you can setup default environment variables using the <a href="https://docs.docker.com/engine/reference/builder/#env">docker <code>ENV</code></a> directive. But these will be overriden by the <code>.env</code> file or variables in you're terminal's environment.</p>
<h1>The <code>env-file-test/docker-entrypoint.sh</code></h1>
<pre><code><span class="hljs-shebang">#!/bin/sh</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"ENV Var Passed in: <span class="hljs-variable">$DEMO_VAR</span>"</span>
</code></pre>
<p>This was just a sample script to print out the environment variable.</p>
<h1>Some other things I learned</h1>
<p><img class="emoji" title="warning" alt="warning" src="https://assets-cdn.github.com/images/icons/emoji/unicode/26a0.png" height="20" width="20" align="absmiddle"> The docs say you can specify you're own <code>env-file</code> or even multiple files, however I could not get that working. It always wanted to choose the <code>.env</code> file.</p>
<p><img class="emoji" title="warning" alt="warning" src="https://assets-cdn.github.com/images/icons/emoji/unicode/26a0.png" height="20" width="20" align="absmiddle"> Also note: that if you have an environment variable specified in you're terminal that also exists in your're <code>.env</code> file the terminal's environment takes presedence over the <code>.env</code> file. <img class="emoji" title="warning" alt="warning" src="https://assets-cdn.github.com/images/icons/emoji/unicode/26a0.png" height="20" width="20" align="absmiddle"></p>
<p>Happy Environment Setup!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Configuring Git to Use Different Name and Email Depending on Folder Context]]></title>
        <id>http://staxmanade.com/2016/05/configuring-git-to-use-different-name-and-email-depending-on-folder-context/</id>
        <link href="http://staxmanade.com/2016/05/configuring-git-to-use-different-name-and-email-depending-on-folder-context/">
        </link>
        <updated>2016-05-25T22:16:39Z</updated>
        <summary type="html"><![CDATA[Thought I'd share how I'm configuring `user.name` and `user.email` for git on my work computer. This is really just a post so when I forget how I did ...]]></summary>
        <content type="html"><![CDATA[<p>Thought I'd share how I'm configuring <code>user.name</code> and <code>user.email</code> for git on my work computer. This is really just a post so when I forget how I did in the future I can google my own blog and be reminded...</p>
<p>I have always struggled with accidentally committing to an OSS project my work name/email or visa-versa, committing to a work git repo with my personal name/email.</p>
<p>For most, <code>user.name</code> shouldn't change, unless you're company ties your <code>user.name</code> to something specific to the company like a username. (Contrast: <code>user.name = Jason Jarrett</code> and <code>user.name = jjarrett</code>).</p>
<p>When I clone projects I always clone them into a folder structure that looks like</p>
<pre><code>|____~/code
| |____personal/  &lt;--- <span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> where I would put some OSS projects <span class="hljs-literal">that</span> I may be working <span class="hljs-literal">on</span> <span class="hljs-keyword">or</span> contributing <span class="hljs-keyword">to</span>.
| |____work/      &lt;--- obviously work code goes <span class="hljs-keyword">in</span> here
</code></pre>
<p>Thanks to <a href="http://collectiveidea.com/blog/archives/2016/04/04/multiple-personalities-in-git/">this post</a> where I learned about <a href="http://direnv.net/">direnv</a> and followed the last option I basically used these steps...</p>
<h1>Setup</h1>
<ol>
<li>
<p>Install <code>direnv</code> - <code>brew install direnv</code> (What about Windows? see <a href="https://github.com/direnv/direnv/issues/124">this github issue</a> and help make it work)</p>
</li>
<li>
<p>Create <code>.envrc</code> file <strong>for each profile</strong> needing to be setup with the following content</p>
<pre><code>export GIT_AUTHOR_EMAIL=<span class="hljs-tag">&lt;<span class="hljs-title">your</span> <span class="hljs-attribute">email</span>&gt;</span>
export GIT_AUTHOR_NAME=<span class="hljs-tag">&lt;<span class="hljs-title">your</span> <span class="hljs-attribute">name</span>&gt;</span>
export GIT_COMMITTER_EMAIL=<span class="hljs-tag">&lt;<span class="hljs-title">your</span> <span class="hljs-attribute">email</span>&gt;</span>
export GIT_COMMITTER_NAME=<span class="hljs-tag">&lt;<span class="hljs-title">your</span> <span class="hljs-attribute">name</span>&gt;</span>
</code></pre>
</li>
<li>
<p>After installing and setting the <code>.envrc</code> files <a href="http://direnv.net/"><code>direnv</code></a> will prompt to use the env file which we accept by running <code>direnv allow</code>.</p>
</li>
</ol>
<p>Now I should have the following structure</p>
<pre><code>|<span class="hljs-string">____~/code
</span>|<span class="hljs-string"> </span>|<span class="hljs-string">____personal/
</span>|<span class="hljs-string">    </span>|<span class="hljs-string">____.envrc   &lt;-- env settings with personal git user/email
</span>|<span class="hljs-string"> </span>|<span class="hljs-string">____work/
</span>|<span class="hljs-string">    </span>|<span class="hljs-string">____.envrc   &lt;-- env settings with work git user/email

</span></code></pre>
<h1>What did this do?</h1>
<p>Each time we <code>cd</code> into either a <code>personal/</code> or <code>work/</code> folder <code>direnv</code> will setup our shell with environment variables contained in that folder's <code>.envrc</code> file. This will then allow Git which respects these env vars and now we don't have to think about committing the wrong name/email to the wrong Git repositories.</p>
<p>Happy Gitting!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How NOT to Start Asynchronous Communication]]></title>
        <id>http://staxmanade.com/2016/05/how-not-to-start-asynchronous-communication/</id>
        <link href="http://staxmanade.com/2016/05/how-not-to-start-asynchronous-communication/">
        </link>
        <updated>2016-05-20T21:50:33Z</updated>
        <summary type="html"><![CDATA[Hey!]]></summary>
        <content type="html"><![CDATA[<div style="height: 100px">&nbsp;</div>
<h2>Hey!</h2>
<div style="height: 2000px">&nbsp;</div>
<h1>Don't you hate it when...</h1>
<p>...someone is using a beautifully designed asynchronous tool to communicate with you but instead they try to pretend it is synchronous?</p>
<p>Please!!! If you ever have to communicate with someone through an asynchronous-able tool like a text message, instant messaging, or email don't just say <code>Hey!</code> and wait for a response.</p>
<p>Try saying <code>Hey! I wonder if you could...</code> or some alternative where the single message can contain both a polite introduction <code>Hey</code> along with some actionable context about why the polite introduction has taken place. If you can't begin to privde the initial context and are waiting for the other person to respond with <code>Hey</code>, you've both wasted their time and yours.</p>
<p>Often times a single chat message can distract someone who is concentrating hard on a subject. If a hollow <code>Hey!</code> is provided, you've likely pulled whoever you wanted to talk to out of that concetration as well as not provide them enough context to be abel to respond or help you. Instead they're possibly sitting there waiting for you to say something next, or maybe you're waiting for them to say Hey back (which you may never get)...</p>
<p>Asynchronous communication can be an amazing productivity tool if used efficiently.</p>
<p>Happy Chatting!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Easily Convert CSS to React Inline Styles]]></title>
        <id>http://staxmanade.com/2016/04/easily-convert-css-to-react-inline-styles/</id>
        <link href="http://staxmanade.com/2016/04/easily-convert-css-to-react-inline-styles/">
        </link>
        <updated>2016-04-21T04:52:14Z</updated>
        <summary type="html"><![CDATA[### TL;DR]]></summary>
        <content type="html"><![CDATA[<p><a target="blank" href="http://staxmanade.com/CssToReact/">
<img align="right" src="http://staxmanade.com/CssToReact/images/CssToReact-logo.svg">
</a></p>
<h3>TL;DR</h3>
<p>Click the logo to jump the tool...</p>
<h2>The More Info Stuff</h2>
<p>So you're working on a React app. It's up and running in you're favorite browser but you notice an issue with some layout. You think, ok, this should be easy to fix. You open up the developer tools, hack on some CSS within the browser till you get it looking just the way you want it to. Maybe it's several CSS properties you added or tweaked so you copy each of them into the clipboard so you can transfer them back to your application.</p>
<p>Then you realize, these styles aren't coming from a CSS style sheet, they're in-line styles right in you're React component.</p>
<p>Now you're like, FINE, I'll manually translate this to React-style-inline-CSS. This is no biggie if you do it once in a while. Except that time when you missed removing a dash or mis-cased a letter or maybe you forgot a JSON comma, or left a CSS semicolon. Never happened to you? Oh, you are so amazing if only I was as super cool as you. For myself and probably another 1 or 2 of you out there these problems do come up, but don't have to.</p>
<p>I hacked together a <a href="http://staxmanade.com/CssToReact/">little tool</a> that automates this translation. Allows you to paste you're <code>CSS</code> into a <code>textarea</code>, it translates to React inline style JSON CSS and you can copy it out while avoiding translation bugs.</p>
<p>You can see the project here: <a href="http://staxmanade.com/CssToReact/">CssToReact</a>
If you have a suggestion or want to pull-request it your self you can check it out here: <a href="https://github.com/staxmanade/CssToReact">Source to Project</a></p>
<blockquote>
<p>Aside: This should really be a plugin to my text editor where we can right click and say &quot;Paste as React Style&quot; instead, but for now it's a single simple little web page that will automate the translation for you. (I haven't looked for the plugin - if it exists or ever is created let me know in the comments...)</p>
</blockquote>
<p>Happy CSS Conversions!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slightly modified “CD” Command for Powershell: Now with dot.dot.dot.dot...]]></title>
        <id>http://staxmanade.com/2016/04/slightly-modified--cd--command-for-powershell--now-with-dot-dot-dot-dot---/</id>
        <link href="http://staxmanade.com/2016/04/slightly-modified--cd--command-for-powershell--now-with-dot-dot-dot-dot---/">
        </link>
        <updated>2016-04-10T16:40:42Z</updated>
        <summary type="html"><![CDATA[A while back I wrote about a replacement for the `cd` command on powershell that I wrote which provides some fun features such as history tracking, su...]]></summary>
        <content type="html"><![CDATA[<p>A while back I wrote about a replacement for the <code>cd</code> command on powershell that I wrote which provides some fun features such as history tracking, support cd'ing to a folder when a file path is given, etc... It's been a while since I've touched this helpful little tool which sometimes I even forget I wrote it because it's something that's used practically every day and &quot;it just works&quot;.</p>
<p>For more information, check out the older posts about it here <a href="http://staxmanade.com/2011/07/slightly-modified-cd-command-for/">Slightly modified “CD” Command for Powershell</a> and here: <a href="http://staxmanade.com/2012/11/more-than-slightly-modified-cd-command/">More than slightly modified “CD” command for PowerShell</a>.</p>
<h1>It now supports <code>cd ...</code></h1>
<p>Well, today I threw a quick feature into this utility that I've become accustomed to using in zsh on my Mac.</p>
<p>On many *nix command prompts you can type something like <code>cd ....</code>. This command translates indo <code>cd ..; cd ..; cd ..</code> (but executed as one command). The first <code>..</code> counts as one directory and then each ane every <code>.</code> after that counts as another directory up the tree.</p>
<p>So now within PowerShell when I <code>cd</code> down into a deep folder structure, I can now use <code>cd .......</code> to go back up <code>N</code> folders.</p>
<p>NOICE!</p>
<p>Happy CD'ing!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Oops - how a simple bit of automation put NuGet services on edge...]]></title>
        <id>http://staxmanade.com/2016/03/oops---how-a-simple-bit-of-automation-put-nuget-on-edge---/</id>
        <link href="http://staxmanade.com/2016/03/oops---how-a-simple-bit-of-automation-put-nuget-on-edge---/">
        </link>
        <updated>2016-03-30T20:06:46Z</updated>
        <summary type="html"><![CDATA[This past week I received an email from Microsoft's NuGet team asking if I could look into a bit of an issue with [DefinitelyTyped's](http://definitel...]]></summary>
        <content type="html"><![CDATA[<p>This past week I received an email from Microsoft's NuGet team asking if I could look into a bit of an issue with <a href="http://definitelytyped.org/">DefinitelyTyped's</a> NuGet package publishing.</p>
<h2>Some Background</h2>
<p>A really long time ago, I wanted to access DefinitelyTyped packages within Visual Studio via the NuGet package manager. So I quickly wrote up a <a href="https://github.com/DefinitelyTyped/NugetAutomation">powershell script</a> to accomplish this. This script has run almost continuously ever since, and primarily without issue.</p>
<blockquote>
<p>There's been a couple tweaks/issues along the way - as to be expected, but it's been primarily hands-off.</p>
</blockquote>
<p>As of today, <a href="https://www.nuget.org/profiles/DefinitelyTyped">these NuGet packages</a> have been downloaded over <code>5,268,852</code> times - wow.</p>
<h1>What does the automation do?</h1>
<p>All of the NuGet packages generated for DefinitelyTyped are run through a build process on the good servers at <a href="https://www.appveyor.com/">AppVeyor</a> (Thanks AppVeyor).</p>
<p>Every 2 hours the task does some git-fu to figure out what DT packages have updated (since the last run) and publishes updated NuGet packages for each updated DT package.</p>
<h1>The initial problem report:</h1>
<p>First let me say that thanks to Yishai and Maarten from Microsoft who brought the issue to my attention and were extremely polite and patient with the raised issue. So thank you, thank you, thank you for the support and being so friendly while working through this...</p>
<p><img src="/images/posts/nuget-automation-oops-initial-email.png" alt="service status image of problem with nuget"></p>
<h1>Looking at <a href="http://status.nuget.org">status.nuget.org</a></h1>
<p>It was pretty easy to see that every 2 hours a large spike in uploads to NuGet was happening.</p>
<p><img src="/images/posts/nuget-automation-oops-before.png" alt="service status image of problem with nuget"></p>
<p><img src="/images/posts/nuget-automation-oops-status-text.png" alt="service status image of problem with nuget"></p>
<blockquote>
<p>While I can't say for certain this incident report on the status page was due to the NuGet automation, it was around the same time the automation was pushing extra builds (and right before I was contacted by Microsoft).</p>
</blockquote>
<h1>Was that my automation oops?</h1>
<p>I didn't recall getting an error email from AppVeyor so I was initially suspicious. But logging in and looking at build history: hmmm. Looking back at my email, looks like I did receive the first failed build email - but must have been busy day as I didn't happen to notice that one email (when I usually do from other projects).</p>
<p><img src="/images/posts/nuget-automation-oops-appveyor-status.png" alt="service status image of problem with nuget"></p>
<p>YIKES!... so I quickly responded to Microsoft saying I'd shut down the automated portion and dig into it.</p>
<h1>The Problem &amp; Resolution</h1>
<p>Turns out the problem was due to a <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/pull/8605">large pull request</a> that updated about every package in the DT repo. This meant it had to publish every single package, but for some reason (not showing in the logs) the AppVeyor job was failing at the end and not saving the fact that the packages were being updated on NuGet...</p>
<p>I have a way to run the NuGet publish manually on a local machine so I pulled down the project and ran the complete build. This took quite a while (almost 3 hours) and eventually I discovered the problem.</p>
<p>At the end of the script is a <code>git commit -m {msg}</code> command. This is an important step as it records what has been updated/published. The problem was due to the large number of packages published, the <code>{msg}</code> was so big that it was throwing an error saying the command line command was too long to execute. Causing the system to not complete the cycle and end up re-publishing all nuget packages every 2 hours.</p>
<p>I was able to manually commit with <a href="https://github.com/DefinitelyTyped/NugetAutomation/commit/6d2a95975849749b496e48d12e199b9561dc2cfd">a shorter message</a> and it brought the system back to normal.</p>
<p>And below is NuGet status after the fix.</p>
<p><img src="/images/posts/nuget-automation-oops-after.png" alt="service status image of problem with nuget"></p>
<h1>Thanks NuGet!</h1>
<p>Turns out the NuGet team put some time into optimizing the publishing process of their service - so maybe there was a benefit to this whole fiasco, but hopefully we won't be hammering the system going forward :)</p>
<p>So I'd like to say thanks again to the NuGet team for you're kind support email and professional way of handling the issue. This is a great example of how Microsoft is helping the OSS community and their support is really taking off and showing promise!</p>
<h3>Also Good Point</h3>
<p><img src="/images/posts/nuget-automation-oops-gates-quote.png" alt="service status image of problem with nuget"></p>
<p>Happy NuGetting!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Developer Friendly React Component Errors]]></title>
        <id>http://staxmanade.com/2016/01/developer-friendly-react-component-errors/</id>
        <link href="http://staxmanade.com/2016/01/developer-friendly-react-component-errors/">
        </link>
        <updated>2016-01-31T07:20:41Z</updated>
        <summary type="html"><![CDATA[One of the biggest pain points I've run into while building an application with Facebook's [React](https://facebook.github.io/react/) is when you goof...]]></summary>
        <content type="html"><![CDATA[<p>One of the biggest pain points I've run into while building an application with Facebook's <a href="https://facebook.github.io/react/">React</a> is when you goof something up and you get an error in one of the React component lifecycle methods such as <code>render</code>, <code>componentWillMount</code>, <code>componentDidUpdate</code>, etc. The biggest problem is the lack of a <a href="http://staxmanade.com/2016/01/habit-of-a-solid-developer-rapid-feedback/">feedback loop</a> because React is swallowing exceptions, so you don't see the reported error in your developer console or any global error handlers called. There's even a chance you don't know something is going wrong (yet).</p>
<p>If I google for <code>react try catch</code> the first search result hit landed me on this <a href="https://github.com/facebook/react/issues/2461">GitHub issue on error boundaries</a> (status: <code>open</code> as of this writing). There is a pull-request with what looks to be a potential work around, but until this lands and it provides enough of a solution I hope the below can help you.</p>
<p>If you read the comments of this post you'll see <a href="https://github.com/facebook/react/issues/2461#issuecomment-114155631">this helpful comment</a> where Skiano links to a <a href="https://github.com/skiano/react-safe-render/blob/feature/safe-methods/index.js">github repo</a> with a pretty good wrapper that re-writes React components so the lifecycle methods get a useful <code>try/catch</code> and can properly log errors.</p>
<p>I liked the approach provided above but since I'm working on a project that is using <a href="https://babeljs.io">BabelJS</a> and <code>ES6/7</code>, I wanted to see if I could try using the new <a href="https://github.com/wycats/javascript-decorators">ES7 Decorators</a> which Babel supports to allow tagging certain ES6 React classes with this try/catch wrapper.</p>
<p>Below is what it looks like if you end up using it.</p>
<h1>Usage with an es7 @decorator</h1>
<pre><code><span class="hljs-literal">import</span> React from <span class="hljs-string">'react'</span>;
<span class="hljs-literal">import</span> wrapReactLifecycleMethodsWithTryCatch from <span class="hljs-string">'react-component-errors'</span>

<span class="hljs-annotation">@wrapReactLifecycleMethodsWithTryCatch</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> : <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  componentDidMount(){
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">"Test error"</span>);
  }
  render(){
    <span class="hljs-keyword">return</span> &lt;div&gt;Hello&lt;/div&gt;;
  }
}
</code></pre>
<p>But you can also use this without the decorator pattern just by passing the class through the wrapper function.</p>
<h1>Usage without a decorator</h1>
<pre><code><span class="hljs-keyword">import</span> wrapReactComponentMethodsWithTryCatch from `react-log-errors.js`

<span class="hljs-keyword">var</span> MyComponent = React.createClass({
  componentDidMount: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">"Test error"</span>);
  },
  render: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> &lt;div&gt;Hello&lt;/div&gt;;
  }
});

wrapReactComponentMethodsWithTryCatch(MyComponent);
</code></pre>
<h1>How to get it?</h1>
<ul>
<li>NPM: <a href="https://www.npmjs.com/package/react-component-errors">react-component-errors</a></li>
<li>GitHub: <a href="https://github.com/staxmanade/react-component-errors">staxmanade/react-component-errors</a></li>
</ul>
<h1>NOT tested for performance...</h1>
<p>FYI: this is primarily built as a development tool and has not been performance tested. While I haven't noticed any performance issues - I wouldn't recommend sending to production as is without a deeper impact analysis.</p>
<p>Happy React Debugging!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 9 - Rapid Feedback]]></title>
        <id>http://staxmanade.com/2016/01/habit-of-a-solid-developer-rapid-feedback/</id>
        <link href="http://staxmanade.com/2016/01/habit-of-a-solid-developer-rapid-feedback/">
        </link>
        <updated>2016-01-31T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 9 - Rapid Feedback]]></summary>
        <content type="html"><![CDATA[<p>﻿
<div class="seriesNote">
    <p>This article is <strong>Part 9</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - <a href="/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">Update or Add Documentation while Reading Code</a>
        </li>
        <li>
            Part 6 - <a href="/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">Dig a Little Deeper</a>
        </li>
        <li>
            Part 7 - <a href="/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">Changes Should be Taken with Baby Steps</a>
        </li>
        <li>
            Part 8 - <a href="/2015/11/habit-of-a-solid-developer-podcasts/">Podcasts</a>
        </li>
        <li>
            Part 9 - (current) - Rapid Feedback
        </li>
    </ul>
</div></p>
<p>Find your feedback loop and then try to find ways to increase it's it's ability to report feedback sooner.</p>
<p>Feedback can come in many ways, and no matter what that feedback loop is, finding ways to increase it's ability to get you feedback sooner is generally going to help you in the long run.</p>
<p>If you think of a typical software development lifecycle, you can find ways to improve feedback loops in nearly all levels of the process. In a aesign phase, reviewing designs with the client/steakholder is one way to get feedback. During development you can get feedback from your unit tests or compiler or even your editors, when you manually review changes made in the application, or especially code reviews with other developers. QA's main purpose is to create a solid feedback loop about quality and while it's generally a slower feedback loop than other forms feedback it is extremly important and should generally not be overlooked or ignored. Once the app is in the wild, customers give feedback and you're applications can report various types of feedback such as crashes or customer sign-up numbers.</p>
<p>You've likely heard of the idea of <a href="https://en.wikipedia.org/wiki/Fail-fast">Failing Fast</a> (if not, you should). In the end, failing fast is a great a type of feedback.</p>
<p>Try pair programming, having a partner watch for and point out silly mistakes, or propose alternative approaches. The instant feedback is hugely beneficial. Leverage the feedback of other tools such as a compiler, unit tests, or manual testing.</p>
<p>When working with a new code library or dependency, don't make assumptions about how something works, even though the <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">principle of least astonishment</a> is nice to follow, don't assume that's how it works. Prove it, test it, fail fast or gather feedback on the exercise.</p>
<p>Test assumptions and prove to yourself that the assumptions are either right or wrong. This could come down to how you expect a library function to behave for certain inputs, or this could apply to how you <strong>think</strong> the customer wanted you to implement a feature.</p>
<p>Don't wait till the product is shipped to learn that's not what your customer asked for, try and find out ways to get that feedback sooner. Send it to some early adopters or beta users.</p>
<p>No matter what area of the process you work in or with, take a step back and look at your current feedback loops, how can you inject new feedback loops or improve the speed at which existing feedback loops can reach you. Can you turn a nightly build into an hourly build or check-in build (or auto-build on file save)? Of course too much feedback can get overwhelming, so take the ones that provide the most value to you and your process and find ways to optimize them.</p>
<p>Happy Feedback!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 8 - Podcasts]]></title>
        <id>http://staxmanade.com/2015/11/habit-of-a-solid-developer-podcasts/</id>
        <link href="http://staxmanade.com/2015/11/habit-of-a-solid-developer-podcasts/">
        </link>
        <updated>2015-11-24T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 8 - Podcasts]]></summary>
        <content type="html"><![CDATA[<p>﻿
<div class="seriesNote">
    <p>This article is <strong>Part 8</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - <a href="/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">Update or Add Documentation while Reading Code</a>
        </li>
        <li>
            Part 6 - <a href="/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">Dig a Little Deeper</a>
        </li>
        <li>
            Part 7 - <a href="/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">Changes Should be Taken with Baby Steps</a>
        </li>
        <li>
            Part 8 - (current) - Podcasts
        </li>
        <li>
            Part 9 - <a href="/2016/01/habit-of-a-solid-developer-rapid-feedback/">Rapid Feedback</a>
        </li>
    </ul>
</div></p>
<p>One of the best investments I made into my own education in the software development field was when I convinced my boss to purchase an mp3 player (It was <a href="http://amzn.to/1FLNZGO">a Zune back in the day</a> and was perfect for the job).</p>
<p>My company didn't seem to mind spending several thousand once a year to send me to a developer conference, but in comparison, a cheap purchase of a music player that I could sync Podcasts to was the best investment my employer could have made. With almost 1.5 hours commuting in the car round-trip, I was able to soak up a large amount of technology related information each and every day. My co-workers were always wondering where and how I would come up with the knowledge about frameworks, tools, designs and other ideas.</p>
<h1>Equipment Needed</h1>
<p>You can likely go fancy with equipment, but I keep it pretty simple. Player and <a href="http://amzn.to/1HkxC4R">earbud headphones</a>.</p>
<h3>A podcast player</h3>
<p>Since everyone is different and how they want to consume podcast often varies, I'm not going to spend time recommending hardware/apps. If you have a smartphone, you already have a great podcast player in your pocket. Just take some time and look at 3rd party podcast player apps that are in your phone's app store. If you don't have a smartphone, there are <a href="http://amzn.to/1Hky570">lots of options</a> from just about anywhere. I use my iPhone since it's always with me and I can use the <a href="https://geo.itunes.apple.com/us/app/downcast/id393858566?mt=8&amp;at=10lPYJ">Downcast</a> app which has some great features that don't come with the standard iTunes podcast player.</p>
<blockquote>
<p>Side note: I'm currently <a href="http://staxmanade.com/apps/xbox-one-podcast/development/">building a podcast player</a> with the intent of launching on Xbox One. If you have any interest, come check it out...</p>
</blockquote>
<h3>Some earbud headphones</h3>
<p>Be sure to pick a pair of <a href="http://amzn.to/1HkxC4R">earbud headphones</a> that have the mic button control. There is a button on there that can be used to control the play/pause of what you're listening to. This is handy because I can setup a podcast to play, place the phone in my pocket, stick an earbud in an ear and go about my task while listening to a podcast. With the mic button if my wife wants to talk to me it's a simple click to pause the show. If you haven't given this a try, I recommend it.</p>
<h1>Choosing Podcasts</h1>
<p>There are lots of ways to decide what podcasts to listen to, but here are some approaches I find useful.</p>
<p>When I don't know what's out there on a subject, I like to browse iTunes for a search term, select a few in the area of interest, download a couple shows and give them a listen.</p>
<p>While listening to podcasts, I pay attention to other shows that are mentioned or recommended. If I like the one I'm currently listening to and they suggest I check out another podcast, there's a good chance I'll like it as well.</p>
<p>Don't feel like you have to commit to the podcast, if you listen to a few shows and you don't like the format or topics discussed, unsubscribe from the ones that don't add value to either you're education or entertainment setting. I find it is also a good idea to delete episodes on topics you have no interest in, or skip ones if they're not keeping your attention.</p>
<p>There is so much good content out there that you should never feel you need to listen to something that isn't going to keep your interest.</p>
<h1>When to listen.</h1>
<p>I no longer commute 1.X hours a day since I started <a href="http://staxmanade.com/2014/12/thoughts-on-working-remotely-from-home/">working remotely</a>, but that doesn't mean I don't have time to listen to podcasts. In fact, the number of podcasts that I subscribe to (and listen to) has actually gone up since my commuter days.</p>
<h3>Time/places to consume the content.</h3>
<ol>
<li>Obviously commuting to work is a great place to listen to podcasts. Put down the crappy celebrity gossip ridden talk radio (unless you're into that sort of thing) and soak up some higher quality informative podcasts.</li>
<li>Household chores is a great time to listen. Distention got podcasts while folding laundry or putting away dishes really helps with the mundane tasks.</li>
<li>Driving to pick up kids or after dropping them off. This was funny to me, on an episode of <a href="http://www.startupsfortherestofus.com/episodes/episode-240-podcasts-for-startup-founders">Startups for the rest of us</a> Rob said:</li>
</ol>
<blockquote>
<p>And the one other thing I do is, let’s say I’m going to go travel, from the <strong>time that I step in my car and leave my house</strong>, I have an earbud in. So I drive to the airport with an earbud in. I get out, I check in, I go through security, all with an earbud in. I wait and I get on the plane, and on the plane, maybe I’ll watch a movie, but if I’m going to try to sleep, typically I’ll listen to podcast. So there is like hours on both ends of a flight as an example. I can churn through 30 podcast episodes as long as I delete some, I’ll skip a few or I’ll skip around, that kind of stuff. I also have an earbud in when I’m making breakfast in the morning. I have one when I’m making dinner in the evening, when I’m doing dishes, when I’m out doing yard work, when I’m taking out the trash. Like most of my off time, when I’m not with my kids and when I’m kind of doing manual tasks. Even if it’s like five minutes of manual tasks, I can crank through stuff. So that’s kind of my process. How about you? - See more at: <a href="http://www.startupsfortherestofus.com/episodes/episode-240-podcasts-for-startup-founders#sthash.RMZtrseu.dpuf">http://www.startupsfortherestofus.com/episodes/episode-240-podcasts-for-startup-founders#sthash.RMZtrseu.dpuf</a></p>
</blockquote>
<h1>Ramp up the playback speed</h1>
<p>Most good podcast players have the ability to adjust the rate of playback while listening to the audio. Don't remember my old Zune having 1.5X playback speed, but oh man, once I discovered 1.5x playback speed on my <a href="https://geo.itunes.apple.com/us/app/downcast/id393858566?mt=8&amp;at=10lPYJ">Downcast</a> app it's crazy how much content I can zip through (and still enjoy) at the faster rate.</p>
<p>It may take some getting used to the higher speeds but for me, 1.5X is just about right. I'd like to try more 1.75x but Downcast doesn't support it - it jumps up to 2X. When I try listening to 2x speed I find it requires more focus to understand what's going on and is much less of a enjoyable listening experience. I'm thinking I can get there if I train my brain to listen to it...</p>
<h1>Listening to developer related podcasts</h1>
<p>Keeping up on developer focused podcasts was where I got my start with podcasts and are still the core of my listening genre. Hearing about certain technologies multiple times on different podcasts may be just enough for me to start digging into the technology myself.</p>
<p>While I mentioned above about deleting podcasts that I have no interest in, I do enjoy the surprise episode of some technology I didn't think I'd be interested in that opens my eyes to something I hadn't known before. Even though it may turn out I never use sed technology, at least knowing a little about it can be beneficial if I have to apply it to a problem set in the future. This way, I at least been introduced to the idea and can research it further should I feel the need.</p>
<h1>Subscribe to other subjects</h1>
<p>If you start to become an <a href="http://staxmanade.com/about/podcasts">oversumer of podcasts like myself</a>, that's OK. Just make sure you're not consuming the same style of podcasts (in my case only development related). Try to diversify your subscriptions. While I really enjoy all my developer related podcasts and they are still core to much of my listening habits, some of my favorite podcast have nothing to do with software development. Give a look at <a href="http://staxmanade.com/about/podcasts">some that I follow</a>, ask what others are listening to, and have fun exploring all the great content that is out there.</p>
<p>Happy Listening &amp; Learning!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Testing Asynchronous Code with MochaJS and ES7 async/await]]></title>
        <id>http://staxmanade.com/2015/11/testing-asyncronous-code-with-mochajs-and-es7-async-await/</id>
        <link href="http://staxmanade.com/2015/11/testing-asyncronous-code-with-mochajs-and-es7-async-await/">
        </link>
        <updated>2015-11-12T02:59:21Z</updated>
        <summary type="html"><![CDATA[A JavaScript project I'm working on recently underwent a pretty good refactor. Many of the modules/methods in the application worked in a synchronous ...]]></summary>
        <content type="html"><![CDATA[<p>A JavaScript project I'm working on recently underwent a pretty good refactor. Many of the modules/methods in the application worked in a synchronous fashion which meant their unit tests were also generally synchronous. This was great because synchronous code is pretty much always easier to test since they're simpler and easier to reason about.</p>
<p>However, even though I new early on that I would likely have to turn a good number of my synchronous methods into asynchronous ones I tried holding off on that as long as absolutely necessary. I was in a mode of prototyping as much of the application out as possible before I wanted to be worried/thinking about asynchronous aspects of the code base.</p>
<p>Part of why I held of on this was because I was pretty confident using the new proposed ES7 <code>async/await</code> syntax to turn the sync code into async code relatively easily. While there were a few bumps along the refactor actually went extremely well.</p>
<p>An example of one bump I ran into included replacing <code>items.forEach(item =&gt; item.doSomethingNowThatWillBecomeAsyncSoon())</code> with something that worked asynchronously and I found <a href="http://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html">this blog post</a> immensely helpful. Basically, don't try to await a <code>forEach</code> instead build a list of promises you can await.</p>
<p>Another one I ran into was dealing with async mocha tests, which is what the rest of this post is about.</p>
<p><a href="https://mochajs.org">MochaJS</a> is great because the asynchronous testing has been there from the beginning. If you've <code>done</code> (see what I did there?) any asynchronous testing with MochaJS then you already know that you can signal to Mocha an asynchronous test is <code>done</code> by calling the test's async callback method.</p>
<p>Before we look at how to test asynchronous Mocha tests leveraging the new ES 7 async/await syntax, let's first take a little journey through some of the various asynchronous testing options with Mocha.</p>
<blockquote>
<p>Note: you will see example unit tests that use the <code>expect(...).to.equal(...)</code> style assertions from <a href="http://chaijs.com/api/bdd/">ChaiJS</a>.</p>
</blockquote>
<h1>How to create an asynchronous MochaJS test?</h1>
<p>If you look at a normal synchronous test:</p>
<pre><code>it(<span class="hljs-string">"should work"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Synchronous test"</span>);
});
</code></pre>
<p>all we have to do to turn it into an asynchronous test is to add a callback function as the first parameter in the mocha test function (I like to call it <code>done</code>) like this</p>
<pre><code>it(<span class="hljs-string">"should work"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">done</span>)</span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Synchronous test"</span>);
});
</code></pre>
<p>But that's an invalid asynchronous test.</p>
<h1>Invalid basic async mocha test</h1>
<p>This first async example test we show is invalid because the <code>done</code> callback is never called. Here's another example using <code>setTimeout</code> to simulate proper asynchronicity. This will show up in Mocha as a timeout error because we never signal back to mocha by calling our <code>done</code> method.</p>
<pre><code>it(<span class="hljs-string">"where we forget the done() callback!"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">done</span>)</span>{
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Test"</span>);
    }, <span class="hljs-number">200</span>);
});
</code></pre>
<h1>Valid basic async mocha test</h1>
<p>When we call the <code>done</code> method it tells Mocha the asynchronous work/test is complete.</p>
<pre><code>it<span class="hljs-list">(<span class="hljs-string">"Using setTimeout to simulate asynchronous code!"</span>, function<span class="hljs-list">(<span class="hljs-keyword">done</span>)</span>{
    setTimeout<span class="hljs-list">(<span class="hljs-keyword">function</span><span class="hljs-list">()</span> {
        done<span class="hljs-list">()</span><span class="hljs-comment">;</span>
    }, <span class="hljs-number">200</span>)</span><span class="hljs-comment">;</span>
})</span><span class="hljs-comment">;</span>
</code></pre>
<h1>Valid basic async mocha test (that fails)</h1>
<p>With asynchronous tests, the way we tell Mocha the test failed is by passing an <code>Error</code> or <code>string</code> to the <code>done(...)</code> callback</p>
<pre><code>it<span class="hljs-list">(<span class="hljs-string">"Using setTimeout to simulate asynchronous code!"</span>, function<span class="hljs-list">(<span class="hljs-keyword">done</span>)</span>{
    setTimeout<span class="hljs-list">(<span class="hljs-keyword">function</span><span class="hljs-list">()</span> {
        done<span class="hljs-list">(<span class="hljs-keyword">new</span> Error<span class="hljs-list">(<span class="hljs-string">"This is a sample failing async test"</span>)</span>)</span><span class="hljs-comment">;</span>
    }, <span class="hljs-number">200</span>)</span><span class="hljs-comment">;</span>
})</span><span class="hljs-comment">;</span>
</code></pre>
<h1>Invalid async with Promise mocha test</h1>
<p>If you were to run the below test it would fail with a timeout error.</p>
<pre><code>it(<span class="hljs-string">"Using a Promise that resolves successfully!"</span>, function(done) {
    <span class="hljs-keyword">var</span> testPromise = new <span class="hljs-type">Promise</span>(function(resolve, reject) {
        setTimeout(function() {
            resolve(<span class="hljs-string">"Hello!"</span>);
        }, <span class="hljs-number">200</span>);
    });

    testPromise.then(function(<span class="hljs-literal">result</span>) {
        expect(<span class="hljs-literal">result</span>).to.equal(<span class="hljs-string">"Hello World!"</span>);
        done();
    }, done);
});
</code></pre>
<p>If you were to open up your developer tools you may notice an error printed to the console:</p>
<pre><code>    <span class="hljs-tag">Uncaught</span> (in promise) <span class="hljs-tag">i</span> {<span class="hljs-attribute">message</span>: <span class="hljs-string">"expected 'Hello!' to equal 'Hello World!'"</span>, <span class="hljs-attribute">showDiff</span>: true, <span class="hljs-attribute">actual</span>: <span class="hljs-string">"Hello!"</span>, <span class="hljs-attribute">expected</span>: <span class="hljs-string">"Hello World!"</span>}
</code></pre>
<p>The problem here is the <code>expect(result).to.equal(&quot;Hello World!&quot;);</code> above will fail before we can signal to Mocha via the <code>done()</code> of either an error or a completion which causes a timeout.</p>
<p>We can update the above test with a <code>try/catch</code> around our expectations that could throw exceptions so that we can report any errors to Mocha if they happened.</p>
<pre><code>it<span class="hljs-list">(<span class="hljs-string">"Using a Promise that resolves successfully with wrong expectation!"</span>, function<span class="hljs-list">(<span class="hljs-keyword">done</span>)</span> {
    var testPromise = new Promise<span class="hljs-list">(<span class="hljs-keyword">function</span><span class="hljs-list">(<span class="hljs-keyword">resolve</span>, reject)</span> {
        setTimeout<span class="hljs-list">(<span class="hljs-keyword">function</span><span class="hljs-list">()</span> {
            resolve<span class="hljs-list">(<span class="hljs-string">"Hello World!"</span>)</span><span class="hljs-comment">;</span>
        }, <span class="hljs-number">200</span>)</span><span class="hljs-comment">;</span>
    })</span><span class="hljs-comment">;</span>

    testPromise.then<span class="hljs-list">(<span class="hljs-keyword">function</span><span class="hljs-list">(<span class="hljs-keyword">result</span>)</span>{
        try {
            expect<span class="hljs-list">(<span class="hljs-keyword">result</span>)</span>.to.equal<span class="hljs-list">(<span class="hljs-string">"Hello!"</span>)</span><span class="hljs-comment">;</span>
            done<span class="hljs-list">()</span><span class="hljs-comment">;</span>
        } catch<span class="hljs-list">(<span class="hljs-keyword">err</span>)</span> {
            done<span class="hljs-list">(<span class="hljs-keyword">err</span>)</span><span class="hljs-comment">;</span>
        }
    }, done)</span><span class="hljs-comment">;</span>
})</span><span class="hljs-comment">;</span>
</code></pre>
<p>This will correctly report the error in the test.</p>
<h2>But there is a better way with promises. (mostly)</h2>
<p>Mocha has built-in support for async tests that return a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a>. However, run into troubles with async and promises in the hook functions like <code>before/beforEach/etc...</code>. So if you keep reading you'll see a helper function that I've not had any issues with (besides it's a bit more work...).</p>
<blockquote>
<p>Thanks to a comment from @syrnick below, I've extended this write-up...</p>
</blockquote>
<p>Async tests can be accomplished in two ways. The first is the already shown <code>done</code> callback. The second is if you returned a <code>Promise</code> object from the test. This a great building block. The above example test has become a little verbose with all the usages of <code>done</code> and the <code>try/catch</code> - it just gets a little cumbersome to write.</p>
<p>If we wanted to re-write the above test we can simplify it to return just promise.</p>
<blockquote>
<p>IMPORTANT: if you want to return a promise, you have to remove the <code>done</code> callback or mocha will assume you'll be using that first and not look for a promise return. Although I've seen comments in Mocha's github issues list where some people depend on it working with both a callback and a promise - you're mileage may vary.</p>
</blockquote>
<p>Here's an example of returning a <code>Promise</code> that correctly fails the test with the readable error message from Chaijs.</p>
<pre><code>it(<span class="hljs-string">"Using a Promise that resolves successfully with wrong expectation!"</span>, function() {
    <span class="hljs-keyword">var</span> testPromise = new <span class="hljs-type">Promise</span>(function(resolve, reject) {
        setTimeout(function() {
            resolve(<span class="hljs-string">"Hello World!"</span>);
        }, <span class="hljs-number">200</span>);
    });

    <span class="hljs-keyword">return</span> testPromise.then(function(<span class="hljs-literal">result</span>){
        expect(<span class="hljs-literal">result</span>).to.equal(<span class="hljs-string">"Hello!"</span>);
    });
});
</code></pre>
<p>The great thing here is we can remove the second <code>error</code> promise callback (where we passed in <code>done</code>) as Mocha should catch any Promise rejections and fail the test for us.</p>
<p>Running the above test will result in the following easy to understand error message:</p>
<p><code>AssertionError: expected 'Hello!' to equal 'Hello World!'</code></p>
<h1>Turn what we know above into async/await.</h1>
<p>Now that we know there are some special things we need to do in our async mocha tests (<code>done</code> callbacks and <code>try/catch</code> or <code>Promise</code>s) let's see what happens if we start to use the new ES7 async/await syntax in the language and if it can enable more readable asynchronous unit tests.</p>
<p>The beauty of the async/await syntax is we get to reduce the <code>.then(callback, done)</code>... mumbo jumbo and turn that into code that reads like it were happening synchronously. The downside of this approach is that it's not happening synchronously and we can't forget that when we're looking at code and starting to use it this way. But overall it is generally easier to reason about in this style.</p>
<p>The big changes from the above <code>Promise</code> style test and the transformed <code>async</code> test below are:</p>
<ol>
<li>Place the <code>async</code> word in front of the <code>async function(done){...</code>. This tells the system that inside of this function there may (or may not be) the use of the <code>await</code> keyword and in the end the function is turned into a <code>Promise</code> under the hood.
a Promise to simplify our unit tests.</li>
<li>We replace the <code>.then(function(result){</code> promise work and in place use the <code>await</code> keyword to have it return the promise value assign it to <code>result</code> so after that we can run our expectations against it.</li>
<li>Remove the <code>done</code> callback. If you aren't aware, <code>async/await</code> is a fancy compiler trick that under-the-hood turns the code into simple <code>Promise</code> chaining and callbacks. So we can use what we learned above about Mocha using 5. <code>return</code> the Promise.</li>
</ol>
<p>If we apply the 5 notes listed above, we see that we can greatly improve the test readability.</p>
<pre><code>it(<span class="hljs-string">"Using a Promise with async/await that resolves successfully with wrong expectation!"</span>, async function() {
    <span class="hljs-keyword">var</span> testPromise = new <span class="hljs-type">Promise</span>(function(resolve, reject) {
        setTimeout(function() {
            resolve(<span class="hljs-string">"Hello World!"</span>);
        }, <span class="hljs-number">200</span>);
    });

    <span class="hljs-keyword">var</span> <span class="hljs-literal">result</span> = await testPromise;

    expect(<span class="hljs-literal">result</span>).to.equal(<span class="hljs-string">"Hello!"</span>);
});
</code></pre>
<p>Notice the <code>async function(){</code> part above turns this into a function that will (under-the-hood) return a promise that should correclty report errors when the <code>expect(...)</code> fails.</p>
<h1>Handling errors with <code>async/await</code></h1>
<p>One interesting implementation detail around async await is that exceptions and errors are handled just like you were to handle them in synchronous code using a <code>try/catch</code>. While under-the-hood the errors turn into <code>rejected</code> <code>Promises</code>.</p>
<blockquote>
<p>NOTE: You're mileage may vary with the async/await and mocha tests with promises. I tried playing around with <code>async</code> in mocha hooks like <code>before/beforeEach</code> but ran into some troubles.</p>
</blockquote>
<p>Since there may or may-not be issues with mocha hook methods, one work-around is to leverage a <code>try/catch</code> and the <code>done</code> callback to manually handle exceptions. You may run into this so I'll show examples of how to avoid relying on Mocha to trap errors.</p>
<p>Below shows the (failing) but alternative way (not using a <code>return Promsie</code>) but using the <code>done</code> callback instead.</p>
<pre><code>it(<span class="hljs-string">"Using a Promise with async/await that resolves successfully with wrong expectation!"</span>, async function(done) {
    <span class="hljs-keyword">var</span> testPromise = new <span class="hljs-type">Promise</span>(function(resolve, reject) {
        setTimeout(function() {
            resolve(<span class="hljs-string">"Hello World!"</span>);
        }, <span class="hljs-number">200</span>);
    });

    <span class="hljs-keyword">try</span> {
        <span class="hljs-keyword">var</span> <span class="hljs-literal">result</span> = await testPromise;

        expect(<span class="hljs-literal">result</span>).to.equal(<span class="hljs-string">"Hello!"</span>);

        done();
    } catch(err) {
        done(err);
    }
});
</code></pre>
<h1>Removing the test boilerplate</h1>
<p>One I started seeing the pattern and use of <code>try/catch</code> boilerplate showing up in my async tests, it became apparent that there had to be a more terse approach that could help me avoid forgetting the <code>try/catch</code> needed in each async test. This was because I would often remember the <code>async/await</code> syntax changes for my async tests but would often forget the <code>try/catch</code> which often resulted in timeout errors instead of proper failures.</p>
<blockquote>
<p>another example below with the async/await and try/catch</p>
</blockquote>
<pre><code>it(<span class="hljs-string">"Using an async method with async/await!"</span>, async function(done) {
    <span class="hljs-keyword">try</span> {
        <span class="hljs-keyword">var</span> <span class="hljs-literal">result</span> = await somethingAsync();

        expect(<span class="hljs-literal">result</span>).to.equal(something);

        done();
    } catch(err) {
        done(err);
    }
});
</code></pre>
<p>So I refactored that to reduce the friction.</p>
<h2>And the mochaAsync higher order function was born</h2>
<p>This simple little guy takes an <code>async</code> function which looks like <code>async () =&gt; {...}</code>. It then returns a higher order function which is also asynchronous but has wrapped your test function in a try/catch and also takes care of calling the mocha <code>done</code> in the proper place (either after your test is asynchronously completed, or errors out).</p>
<pre><code>var mochaAsync = <span class="hljs-function"><span class="hljs-params">(fn)</span> =&gt;</span> {
    <span class="hljs-keyword">return</span> async (done) =&gt; {
        <span class="hljs-keyword">try</span> {
            await fn();
            done();
        } <span class="hljs-keyword">catch</span> (err) {
            done(err);
        }
    };
};
</code></pre>
<p>You can use it like this:</p>
<pre><code>it<span class="hljs-list">(<span class="hljs-string">"Sample async/await mocha test using wrapper"</span>, mochaAsync<span class="hljs-list">(<span class="hljs-keyword">async</span> <span class="hljs-list">()</span> =&gt; {
    var x = await someAsyncMethodToTest<span class="hljs-list">()</span><span class="hljs-comment">;</span>
    expect<span class="hljs-list">(<span class="hljs-keyword">x</span>)</span>.to.equal<span class="hljs-list">(<span class="hljs-keyword">true</span>)</span><span class="hljs-comment">;</span>
})</span>)</span><span class="hljs-comment">;</span>
</code></pre>
<p>It can also be used with the mocha <code>before</code>, <code>beforeEach</code>, <code>after</code>, <code>afterEach</code> setup/teardown methods.</p>
<pre><code>beforeEach<span class="hljs-list">(<span class="hljs-keyword">mochaAsync</span><span class="hljs-list">(<span class="hljs-keyword">async</span> <span class="hljs-list">()</span> =&gt; {
    await someLongSetupCode<span class="hljs-list">()</span><span class="hljs-comment">;</span>
})</span>)</span><span class="hljs-comment">;</span>
</code></pre>
<h1>In closing.</h1>
<p>This post may have seemed like quite a journey to get to the little poorly named <code>mochaAsync</code> or learn to use Mocha's Promise support but I hope it was helpful and I can't wait for the <code>async/await</code> syntax to become mainstream in JavaScript, but until then I'm thankful we have transpiling tools like <a href="http://babeljs.io">Babel</a> so we can take advantage of these features now. ESNext-pecially in our tests...</p>
<p>Happy Testing!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 7 - Changes Should be Taken with Baby Steps]]></title>
        <id>http://staxmanade.com/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/</id>
        <link href="http://staxmanade.com/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">
        </link>
        <updated>2015-11-07T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 7 - Changes Should be Taken with Baby Steps]]></summary>
        <content type="html"><![CDATA[<p>﻿
<div class="seriesNote">
    <p>This article is <strong>Part 7</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - <a href="/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">Update or Add Documentation while Reading Code</a>
        </li>
        <li>
            Part 6 - <a href="/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">Dig a Little Deeper</a>
        </li>
        <li>
            Part 7 - (current) - Changes Should be Taken with Baby Steps
        </li>
        <li>
            Part 8 - <a href="/2015/11/habit-of-a-solid-developer-podcasts/">Podcasts</a>
        </li>
        <li>
            Part 9 - <a href="/2016/01/habit-of-a-solid-developer-rapid-feedback/">Rapid Feedback</a>
        </li>
    </ul>
</div></p>
<p>Have you ever made some code changes and while in the process of making those changes realize you need to change something else, which leads to changes to that thing over there and then again up there, and down here, and over there and since we're in here and I've been meaning to tweak this well... and paused to realize you forgot the original goal of why you are even looking at this module of code? No never? (well I have). <code>git reset --hard</code> and start over :)</p>
<p>If you're one who likes to apply the ol Boy Scout rule of <code>Always leave the campground cleaner than you found it</code> to your code, just don't, at lest not yet. While I'm a big fan of cleaning up those legacy areas of code that just need a good sweep up, the approach taken here needs to be handled with care. I'm also referring to code that is likely covered well with automated testing.</p>
<h1>But Why?</h1>
<p>Before you go around making a bunch of cleanup changes, fixing formatting, changing variable names, general cleanup. Accomplish a tiny part of your overall objective and commit just that change.</p>
<p>If you see other things along the way, take note and come back to them later. Or if, like me you can't help yourself, just don't check all of those changes in at once. Use something like <code>git add -p</code> to <a href="http://staxmanade.com/2014/02/segregate-your-code-commits-into-tiny/">segregate your code commits into tiny topical changes</a>.</p>
<p>If the job is to <code>rename a variable</code>, don't also <code>fix spelling, format code, extract method, etc...</code>. Save those other changes for different commits.</p>
<h3>But what if you don't know what you're planning to change?</h3>
<p>Sometimes, it's good to go off and spike a big swath of changes just to get an idea how much impact a refactor could have on the architecture or project as a whole. Prototype something to get a good picture of whether a change is possible or not or to see how many coupled items need to be adjusted along the way.</p>
<p>However, you go into it knowing you will likely just undo all of your changes all together with the goal to surface more knowledgeable and either:</p>
<p>A) determine that it is a do-able change and should or should not even be attempted in a proper fashion
B) or you've uncovered some challenges that are not easily overcome and require more thought or prior preparatory refactorings.</p>
<h1>Use TDD as a forcing mechanism to small changes</h1>
<p>TDD (Test Driven Development) is a great way to take as tiny a step as possible. With this approach, you can write a test, make it pass (consider that a change) and <a href="http://staxmanade.com/2014/02/segregate-your-code-commits-into-tiny/">possibly check it in</a> to source control. One test at a time ensures that you're taking baby steps along the way to solving the bigger problem(s).</p>
<h1>Baby Steps also when Debugging</h1>
<p>Taking baby steps is also important when debugging. Running around the codebase changing X, Y, and Z just to see if you can fix a bug will often times get you in a bigger mess than the original bug you tried to fix. Making one change at a time, verifying the bug, then the next change is quite often a better approach. So consider going slow and taking baby steps.</p>
<p>It doesn't matter if you're making project-wide architectural changes or surgical bug fixes, if you can, <strong>try to take baby steps, commit the changes and verify each change along the way</strong>. It may feel like you're going slower, but in the long haul you may actually save time.</p>
<p>Happy Baby Steps!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Base64 and save a binary audio file to local storage and play it back in the browser]]></title>
        <id>http://staxmanade.com/2015/11/how-to-base64-and-save-a-binary-audio-file-to-local-storage-and-play-it-back-in-the-browser/</id>
        <link href="http://staxmanade.com/2015/11/how-to-base64-and-save-a-binary-audio-file-to-local-storage-and-play-it-back-in-the-browser/">
        </link>
        <updated>2015-11-03T06:25:46Z</updated>
        <summary type="html"><![CDATA[I wanted to see if it was possible to save a small audio file into localStorage, read it back out and play the file. In this post I'll show you short ...]]></summary>
        <content type="html"><![CDATA[<p>I wanted to see if it was possible to save a small audio file into localStorage, read it back out and play the file. In this post I'll show you short example on how to download an audio file, save it to localStorage, read it back and set it up for playback.</p>
<h3>Disclaimers</h3>
<p><img class="right" src="/images/worksOnMyMachine.png" alt="works on my machine"></p>
<ul>
<li>This was tested in IE 10 (Win 8), Chrome 46 (Mac), and Firefox 41 (Mac); however, some of the api's and techniques used in this demo are not supported in all browsers, such as the <a href="http://caniuse.com/#feat=filereader">FileReader</a>, <a href="http://caniuse.com/#feat=blobbuilder">Blob</a>, <a href="http://caniuse.com/#feat=promises">Promise</a>, and <a href="http://caniuse.com/#feat=fetch">fetch</a> api's. The Promise and fetch api's can be polyfilled. There may be polyfills for the other api's, but I haven't researched those.</li>
<li>This post isn't going to go into much of the &quot;should I do this&quot;, as I'm sure you can come up with many reasons why you shouldn't. But I couldn't find any examples that demonstrated these steps in one place. So I prototyped the idea and am putting it here in case I do want to use this in the future sometime (or maybe you do too).</li>
<li>My tests in Chrome didn't go great if I tried to re-run the experiment multiple times. Sometimes it would work, other times it seemed to get into a bad state and always raised a MediaError event. Refreshing the page would get it working again.</li>
</ul>
<h1>First we need an audio file</h1>
<p>I don't want to point to any specific audio example since I'd feel bad if some poor soul's hosted mp3 file gets hammered (not likely) because of this example. But you just need a link to a simple, short <code>mp3</code> (or whatever audio type you're trying to test). If you look at the sample below replace <code>&lt;&lt;SampleAudioUrlHere&gt;&gt;</code> with the link to your test audio file.</p>
<h1>Won't fit in localStorage?</h1>
<p>If you're trying to save an audio file that's too large as a <code>Base64</code> encoded audio file will be larger than it's original size and we don't get very much space in <code>localStorage</code> then, ya you're using a file that's too large... Get something smaller or don't to this. Just sayin :P</p>
<h1>How does it work?</h1>
<ol>
<li>Use <a href="https://fetch.spec.whatwg.org/">fetch</a> api we can easily get at the <code>blob()</code></li>
<li>Run the <code>Blob</code> through the <code>FileReader</code></li>
<li>Which also handily turned it into a data url for us</li>
<li>The data url is just a base64 encoded string which is easy to save to <code>localStorage</code></li>
<li>Read the string back out of <code>localStorage</code></li>
<li>Set the audio's <code>src</code> attribute to the audio data url</li>
<li>Profit!</li>
</ol>
<p>While I was prototyping this I was borrowing someone else short <code>mp3</code> file and to work around CORS (cross origin http request) I used the handy <code>https://crossorigin.me/&lt;&lt;SampleAudioUrlHere&gt;&gt;</code> service. This may be ok to do for a prototype, but you should't typically run your requests through this service. It's insecure and against pretty much all the different web religions.</p>
<h1>Show me the code</h1>
<p>This was just a quick <code>get-er-done</code> example. Lots of not-great-practices, but it demonstrates the possibility. Enjoy!</p>
<pre><code><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">
    
      <span class="hljs-comment">// Code goes here</span>
      <span class="hljs-keyword">var</span> audioFileUrl = <span class="hljs-string">'&lt;&lt;SampleAudioUrlHere&gt;&gt;'</span>;
      
      <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
        
        <span class="hljs-keyword">var</span> downloadButton = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'download'</span>);
        <span class="hljs-keyword">var</span> audioControl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'audio'</span>);
      
        audioControl.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
          <span class="hljs-built_in">console</span>.log(audioControl.error);
        };
      
        downloadButton.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
          
          audioControl.src = <span class="hljs-literal">null</span>;
          
          fetch(audioFileUrl)
            .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>{
              res.blob().then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">blob</span>) </span>{
                <span class="hljs-keyword">var</span> size = blob.size;
                <span class="hljs-keyword">var</span> type = blob.type;
      
                <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> FileReader();
                reader.addEventListener(<span class="hljs-string">"loadend"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
      
                  <span class="hljs-comment">// console.log('reader.result:', reader.result);</span>
                  
                  <span class="hljs-comment">// 1: play the base64 encoded data directly works</span>
                  <span class="hljs-comment">// audioControl.src = reader.result;</span>
      
                  <span class="hljs-comment">// 2: Serialize the data to localStorage and read it back then play...</span>
                  <span class="hljs-keyword">var</span> base64FileData = reader.result.toString();

                  <span class="hljs-keyword">var</span> mediaFile = {
                    fileUrl: audioFileUrl,
                    size: blob.size,
                    type: blob.type,
                    src: base64FileData
                  };
                  
                  <span class="hljs-comment">// save the file info to localStorage</span>
                  localStorage.setItem(<span class="hljs-string">'myTest'</span>, <span class="hljs-built_in">JSON</span>.stringify(mediaFile));
                  
                  <span class="hljs-comment">// read out the file info from localStorage again</span>
                  <span class="hljs-keyword">var</span> reReadItem = <span class="hljs-built_in">JSON</span>.parse(localStorage.getItem(<span class="hljs-string">'myTest'</span>));
      
                  audioControl.src = reReadItem.src;
      
                });
      
                reader.readAsDataURL(blob);
      
              });
            });
          
        });
        
      };
    
    </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"download"</span>&gt;</span>Run Example<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">br</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">audio</span> <span class="hljs-attribute">controls</span>=<span class="hljs-value">"true"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"audio"</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">audio</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>

</code></pre>
<p>I hope you found this quick tutorial useful. Would love to hear any feedback or thoughts on the approach.</p>
<p>As earways, Happy Listening!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Integrate WinJS.Navigation with the Browser's History]]></title>
        <id>http://staxmanade.com/2015/10/integrate-winjs-navigation-with-the-browser-s-history/</id>
        <link href="http://staxmanade.com/2015/10/integrate-winjs-navigation-with-the-browser-s-history/">
        </link>
        <updated>2015-10-31T17:30:40Z</updated>
        <summary type="html"><![CDATA[I've been playing with [WinJS](https://github.com/winjs/winjs) a bit lately, specifically the [React-WinJS](https://github.com/winjs/react-winjs) and ...]]></summary>
        <content type="html"><![CDATA[<p>I've been playing with <a href="https://github.com/winjs/winjs">WinJS</a> a bit lately, specifically the <a href="https://github.com/winjs/react-winjs">React-WinJS</a> and wanted the native WinJS Navigation to play a little nicer with a web browser. The original/default environment for WinJS app is within a WinRT/Metro application where there is no &quot;url/address&quot; bar to be seen.</p>
<blockquote>
<p>My uneducated guess is that the WinJS team decided not to worry about how <code>WinJS.Navigation</code> would integrate with a normal browser's history as there doesn't appear to be native integration or documentation about how to do it so far.</p>
</blockquote>
<p>I <a href="https://github.com/winjs/winjs/issues/1532">asked the team</a> if they had plans to work on any integration options, but only asked that last night so don't expect to hear back from over the weekend.</p>
<h3>UPDATE: I got tired of updating this blog post with my bug fixes/iterations of the idea - so I've moved it over to GitHub: <a href="https://github.com/staxmanade/WinJSBrowserHistory">github.com/staxmanade/WinJSBrowserHistory</a>.</h3>
<p>So I spent a moment and prototyped one possible solution which works for this simple test using the browser's history api since I'm not looking to support browsers older than IE 10.</p>
<p>Ideally we could leverage WinJS controls without worrying about how to &quot;integrate&quot; the <code>WinJS.Navigation</code> with anything, but sadly some of the WinJS controls take a dependency on <code>WinJS.Navigation</code> (like the BackButton) so finding a way to play nice with this can be challenging.</p>
<p>If you want to get this prototype running yourself, you can:</p>
<ol>
<li>save both files below to a folder</li>
<li>start up a simple web server. (I like to use <a href="http://npmjs.com/package/nws">nws</a>)</li>
</ol>
<p>This prototype is 2 files:</p>
<ul>
<li><code>index.html</code> &lt;-- basic JSPM bootstrapping and configuration</li>
<li><code>app.jsx</code> &lt;-- my whole navigation app in here...</li>
</ul>
<h2>index.html</h2>
<p>Couple mentions on this bootstrapping code:</p>
<ol>
<li>I set the background style to black (since in <code>app.jsx</code> I'm using the WinJS dark css) - this avoids a flash from white to black when the page loads</li>
<li>This is using <a href="https://github.com/systemjs/systemjs">SystemJS</a> which makes it really easy to prototype and bootstrap dependencies like <a href="https://github.com/winjs/winjs">WinJS</a> and <a href="https://facebook.github.io/react/">React</a>. Please don't deploy something like this to production - follow proper <a href="https://github.com/jspm/jspm-cli/blob/master/docs/production-workflows.md">JSPM production workflow procedures</a>...</li>
<li>The <code>map</code> section in the <code>System.config</code> defines a pointer to a fork of <code>react-winjs</code> I have that supports <code>React 0.14</code> (so if you find this in the future and need it, try to use the native <code>react-winjs</code> if they've merged in <a href="https://github.com/winjs/react-winjs/pull/33">my pull request</a> instead.)</li>
</ol>
<pre><code><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">style</span> <span class="hljs-attribute">media</span>=<span class="hljs-value">"screen"</span>&gt;</span><span class="css"> <span class="hljs-tag">body</span><span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> black</span></span>; }</span> </span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"https://jspm.io/system@0.18.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/javascript"</span>&gt;</span><span class="actionscript">
      System.config({
        transpiler: <span class="hljs-string">'babel'</span>,
        packages: {
          <span class="hljs-string">'./'</span>: {
            defaultExtension: <span class="hljs-literal">false</span>
          }
        },
        map: {
          <span class="hljs-string">'react'</span>: <span class="hljs-string">'npm:react@0.14'</span>,
          <span class="hljs-string">'react-winjs'</span>: <span class="hljs-string">'github:staxmanade/react-winjs@2.4.0-react-0.14'</span>,
        }
      });

      System.<span class="hljs-keyword">import</span>(<span class="hljs-string">'./app.jsx'</span>);

    </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"main"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre>
<h2>app.jsx</h2>
<pre><code><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">import</span> WinJS <span class="hljs-keyword">from</span> <span class="hljs-string">'npm:winjs'</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">'npm:winjs/css/ui-dark.css!'</span>;
<span class="hljs-keyword">import</span> { BackButton } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-winjs'</span>;


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WinJSBrowserHistory</span> </span>{
    isNavigationBeingHandled;
    isWinJSNavigationBackBeingHandled;
    isNavigationTriggeredByPopStateEvent;

    constructor(onApplyNavigaitonChange) {

        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> onApplyNavigaitonChange !== <span class="hljs-string">"function"</span>) {
          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"Expecting first argumet to be a function that can take 2 parametes (location, state) =&gt; {}"</span>);
        }

        <span class="hljs-keyword">this</span>.onApplyNavigaitonChange = onApplyNavigaitonChange;

        WinJS.Navigation.addEventListener(<span class="hljs-string">"beforenavigate"</span>, <span class="hljs-keyword">this</span>.handleBeforeNavigate.bind(<span class="hljs-keyword">this</span>));
        WinJS.Navigation.addEventListener(<span class="hljs-string">"navigating"</span>, <span class="hljs-keyword">this</span>.handleNavigating.bind(<span class="hljs-keyword">this</span>));
        WinJS.Navigation.addEventListener(<span class="hljs-string">"navigated"</span>, <span class="hljs-keyword">this</span>.handleNavigated.bind(<span class="hljs-keyword">this</span>));

        <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'popstate'</span>, (eventObject) =&gt; {
            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'popstate'</span>, <span class="hljs-keyword">this</span>.isNavigationBeingHandled, eventObject);

            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">this</span>.isNavigationBeingHandled &amp;&amp; !<span class="hljs-keyword">this</span>.isWinJSNavigationBackBeingHandled) {
              <span class="hljs-keyword">this</span>.handlePopState(eventObject);
            }
            <span class="hljs-keyword">this</span>.isWinJSNavigationBackBeingHandled = <span class="hljs-literal">false</span>;
        })
    }

    cleanup() {
      WinJS.Navigation.removeEventListener(<span class="hljs-string">"navigated"</span>, <span class="hljs-keyword">this</span>.handleNavigated);
    }


    handlePopState(eventObject) {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"handlePopState"</span>, eventObject, location.hash);

      <span class="hljs-keyword">this</span>.isNavigationTriggeredByPopStateEvent = <span class="hljs-literal">true</span>;

      WinJS.Navigation.navigate(location.hash, location.state);
    }

    handleBeforeNavigate(eventObject) {
        <span class="hljs-keyword">this</span>.isNavigationBeingHandled = <span class="hljs-literal">true</span>;
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"handleBeforeNavigate:"</span>, eventObject);
    }

    handleNavigating(eventObject) {
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"handleNavigating:"</span>, eventObject);
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"handleNavigating delta:"</span>, eventObject.detail.delta);

        <span class="hljs-keyword">var</span> location = eventObject.detail.location;
        <span class="hljs-keyword">var</span> state = eventObject.detail.state;
        <span class="hljs-keyword">var</span> delta = eventObject.detail.delta;

        <span class="hljs-keyword">this</span>.onApplyNavigaitonChange(location, state);

        <span class="hljs-keyword">if</span>(delta &lt; <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">this</span>.isWinJSNavigationBackBeingHandled = <span class="hljs-literal">true</span>;
            <span class="hljs-built_in">window</span>.history.go(delta);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-comment">//router.setRoute(location);</span>
            <span class="hljs-built_in">window</span>.history.pushState(state, <span class="hljs-string">""</span>, <span class="hljs-string">"#"</span> + location);
        }
    }

    handleNavigated(eventObject) {
        <span class="hljs-keyword">this</span>.isNavigationBeingHandled = <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">this</span>.isNavigationTriggeredByPopStateEvent = <span class="hljs-literal">false</span>;

        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"handleNavigated"</span>, eventObject);
    }

}


<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{

    constructor(props) {
        <span class="hljs-keyword">super</span>(props);

        <span class="hljs-keyword">this</span>.winJSBrowserHistory = <span class="hljs-keyword">new</span> WinJSBrowserHistory(<span class="hljs-keyword">this</span>.onApplyNavigaitonChange.bind(<span class="hljs-keyword">this</span>));

        <span class="hljs-keyword">this</span>.state = {
            nav: {
                state: WinJS.Navigation.state,
                location: WinJS.Navigation.location
            }
        }
    }

    componentWillMount () {
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"componentWillMount"</span>);
        WinJS.Navigation.navigate(<span class="hljs-keyword">this</span>.state.nav.location, <span class="hljs-keyword">this</span>.state.nav.state);
    }

    componentWillUnmount () {
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"componentWillUnmount"</span>);
    }

    onApplyNavigaitonChange(location, state) {
        <span class="hljs-keyword">this</span>.setState({
            nav: {
                location: location,
                state: state
            }
        });
    }

    gotoPage1Nested() {
        WinJS.Navigation.navigate(<span class="hljs-string">"/page1/nested"</span>);
    }

    gotoPage1() {
        WinJS.Navigation.navigate(<span class="hljs-string">"/page1"</span>);
    }

    render() {

        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"render() location:"</span>, <span class="hljs-keyword">this</span>.state.nav.location);

        <span class="hljs-keyword">var</span> componentWithBackButton = component =&gt; {
            <span class="hljs-keyword">return</span> (
                <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">BackButton</span> /&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
                        {component}
                    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            )</span>;
        };

        <span class="hljs-keyword">var</span> page;

        <span class="hljs-keyword">switch</span>(<span class="hljs-keyword">this</span>.state.nav.location) {
            <span class="hljs-keyword">case</span> <span class="hljs-string">"/page1"</span>:
                page = componentWithBackButton(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>page 1<span class="hljs-tag">&lt;<span class="hljs-title">br</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{this.gotoPage1Nested.bind(this)}</span>&gt;</span>Goto Page 1 Nested<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>)</span>;
            <span class="hljs-keyword">break</span>;

            <span class="hljs-keyword">case</span> <span class="hljs-string">"/page1/nested"</span>:
                page = componentWithBackButton(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>page 1 nested<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>)</span>;
            <span class="hljs-keyword">break</span>;

            <span class="hljs-keyword">case</span> <span class="hljs-string">"/page2"</span>:
                page = componentWithBackButton(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>page 1<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>)</span>;
            <span class="hljs-keyword">break</span>;

            <span class="hljs-keyword">default</span>:
                page = (
                    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
                      <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{this.gotoPage1.bind(this)}</span>&gt;</span>Goto Page 1<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                )</span>;
        }

        <span class="hljs-keyword">return</span> page;
    }
}

ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">App</span> /&gt;</span>, document.getElementById('main'));

</span></code></pre>
<p>Next I'd like to see if I could leverage something like <a href="https://github.com/flatiron/director">flatiron/director</a> for routing and get it to play nice with <code>WinJS.Navigation</code> and if I do, I'll post it as well...</p>
<p>Hope this helps.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 6 - Dig a Little Deeper]]></title>
        <id>http://staxmanade.com/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/</id>
        <link href="http://staxmanade.com/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">
        </link>
        <updated>2015-10-24T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 6 - Dig a Little Deeper]]></summary>
        <content type="html"><![CDATA[<p>﻿
<div class="seriesNote">
    <p>This article is <strong>Part 6</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - <a href="/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">Update or Add Documentation while Reading Code</a>
        </li>
        <li>
            Part 6 - (current) - Dig a Little Deeper
        </li>
        <li>
            Part 7 - <a href="/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">Changes Should be Taken with Baby Steps</a>
        </li>
        <li>
            Part 8 - <a href="/2015/11/habit-of-a-solid-developer-podcasts/">Podcasts</a>
        </li>
        <li>
            Part 9 - <a href="/2016/01/habit-of-a-solid-developer-rapid-feedback/">Rapid Feedback</a>
        </li>
    </ul>
</div></p>
<p>The number of things you can learn in this field is mind blowing. The rate at which change happens, frameworks come and go and the various levels of abstraction can be daunting at times.</p>
<p>Regardless of how much or little you know, there is always a new level of abstraction you can dive into and get a better understanding of what's going on. I love the example <a href="http://hanselman.com">Scott Hanselman</a> uses about this topic in <a href="http://www.hanselman.com/blog/PleaseLearnToThinkAboutAbstractions.aspx">Please Learn to Think about Abstractions</a>.</p>
<p>It is amazing how much you can accomplish without having a clue about what is going under your abstractions. But if you were to take a moment now and then to try to understand what those abstractions are hiding from you, it will likely open your eyes to a level of understanding and insight as to how to use the abstraction that you may likely not understand how you made it work without that deeper insight. The understanding may help you get just needed bit of performance improvement, or fault tolerance in your projects, or how to set things up to be more maintainable.</p>
<p>An example of this for me recently is while working at <a href="http://vertigo.com/">Vertigo</a> I have helped to ship a number of streaming video based products without having to know anything about some of the specifics of say <a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming">HLS</a>. On this recent project we were having issues with a live stream and it just so happened we could peek through an HTTP Debugger proxy at the raw streaming manifest. This was previously a scary place for me to dig in an try to understand. However, taking the time to understand various parts of the HLS Spec have not only made me appreciate what it takes to put together one of these live streams, but I have now become just that much stronger as a team member on a video related projects.</p>
<p>As the famous philosopher Dory once said:</p>
<p><img src="http://cdn.meme.am/instances/55766499.jpg" alt="Dory saying just keep digging, just keep digging, digging, digging"></p>
<p>Happy Digging!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Red - Possibly the Most Important Step in Red, Green, Refactor]]></title>
        <id>http://staxmanade.com/2015/10/red--possibly-the-most-important-step-in-red--green--refactor/</id>
        <link href="http://staxmanade.com/2015/10/red--possibly-the-most-important-step-in-red--green--refactor/">
        </link>
        <updated>2015-10-10T05:24:02Z</updated>
        <summary type="html"><![CDATA[If you do any sort of test driven development, you've likely heard of the following steps]]></summary>
        <content type="html"><![CDATA[<p>If you do any sort of test driven development, you've likely heard of the following steps</p>
<ul>
<li><strong>Red</strong>: In this case means you write a test first and see the <code>red</code> (meaning failing test).</li>
<li><strong>Green</strong>: This is where you actually write a tiny bit of production code to see the red test from above go green and pass.</li>
<li><strong>Refactor</strong>: Now that you have a passing test (or suite of tests) you can presumably safely refactor and apply any common code cleanup practices to the code.</li>
</ul>
<h1>The importance of the Red step.</h1>
<p>I don't want to go in to each of these steps in detail today, but I did want to drill into the <code>Red</code> step by giving you a short little example that happened to me today.</p>
<p>If you are interested in a little more detail on the subject check out:</p>
<ul>
<li><a href="http://www.jamesshore.com/Blog/Red-Green-Refactor.html">http://www.jamesshore.com/Blog/Red-Green-Refactor.html</a></li>
<li><a href="http://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html">http://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html</a></li>
</ul>
<p>If you're new to any sort of <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a>/<a href="https://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a>/anything-DD you may not quite get how important this first step is, but hopefully the rest of this post helps...</p>
<h1>Make sure it fails</h1>
<p>The Red step is one of the most important, but one that a new practitioner may skip out of laziness. It takes discipline to write the failing test, run it and verify that it fails. It is so easy to write the test code AND the production code together, run it and see it pass that skipping the red step is something even seasoned veterans in the field can fall prey to.</p>
<p>However, if you don't see the test fail, how do you know it will ever fail?</p>
<p>I can tell you on numerous occasions in the past where I have written both production code and test code together, run it see it pass, just in case - comment out the production code and STILL see the test pass. Wait what?</p>
<p>If you are not careful you may have created a bad test and if you run this Red step first and you don't see it turn Red, you likely have a problem.</p>
<p>It could be a problem with the test itself, or possibly something you put in the test that is triggering something deeper in the system. It doesn't matter what the problem is, you first need to get the test to turn red before you write any production code to make it turn green.</p>
<h1>Make sure it fails FOR THE RIGHT REASON</h1>
<p>While it's easy to see a red bar and move on, it's also good to review the exact reason it failed. Did you get a <code>FileNotFoundException</code> exception when you were expecting a <code>NullReferenceException</code>? Or did you get an integer value of <code>10</code> when you were thinking at that moment it would have failed because it returned a string?</p>
<p>If you're writing proper tests, your red step will include a true failure case that not only just fails, but fails for the reason you would expect it to fail - at least until you go to write the production code that satisfies the tests intent.</p>
<h1>Now a little example.</h1>
<p>In the example below I was behaving myself and I DID run the red step first. I am using plain-ish JavaScript (I say ish here because I'm using ES6 with babel compiler).</p>
<blockquote>
<p>It's much easier to make the type of mistake I'm going to highlight below with plain JavaScript than if you were using a statically typed language. You can try something like <a href="http://typescriptlang.org">TypeScript</a> for <a href="http://flowtype.org/">flow</a> as these compilers provide a static type checker over your JavaScript. Compilers are a great first test...</p>
</blockquote>
<p>Alas, I'm not doing that at the moment.</p>
<p>So here is what I did...</p>
<p>First I wrote a test:</p>
<pre><code><span class="hljs-keyword">import</span> FeedData <span class="hljs-keyword">from</span> <span class="hljs-string">'../app/feed.js'</span>;

describe(<span class="hljs-string">"feed cache"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{

  <span class="hljs-keyword">var</span> feedCache;

  before(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    feedCache = FeedData.loadCache();
  });

  it(<span class="hljs-string">"Feed Cache should have two items"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    expect(feedCache.length).to.equal(<span class="hljs-number">2</span>);
  });

});

</code></pre>
<p>When I tried to run it I got the error saying that <code>TypeError: FeedData.loadCache is not a function</code>. This was great and made total sense because I haven't written this <code>loadCache()</code> function yet.</p>
<p>Next I opened up my <code>FeedData.js</code> file and added the <code>loadCache()</code> function.</p>
<pre><code><span class="hljs-literal">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeedData</span> </span>{
  loadCache() {

  }
}
</code></pre>
<p>I left the implementation blank for now and re-ran my tests. Same error <code>TypeError: FeedData.loadCache is not a function</code> as above.</p>
<p>That was odd, because I know I added the function but apparently it didn't think I had... some scratching... looking... hmm... Ahh ha - I had imported from <code>feed.js</code> not <code>feedData.js</code>.</p>
<p>It's subtle, but in my app <code>feedData</code> and <code>feed</code> are different things. So I moved the function to the correct ES6 class and re-ran the tests. I was <strong>certain</strong> this time that it may fail but at least fail for the right reason (not a missing function).</p>
<p>ARGGG....</p>
<p>Again I got the same error <code>TypeError: FeedData.loadCache is not a function</code>. Ok, that was weird. Now I'm wondering if I have a caching problem in my browser, but before I try to debug Chrome's caching (kidding there, if I ever have to go that far I'm really having a rough day) I better have another look at my code.</p>
<p>It didn't take long in this case to realize where my issue was. <code>FeedData</code> is an ES6 class and I'm calling what I thought was a static function on the class from within the test, however it wasn't declared as static in the implementation.</p>
<p>Adding the <code>static</code> keyword below turned this function into what my test was originally expecting.</p>
<pre><code><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> FeedData {
  <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-title">loadCache</span><span class="hljs-params">()</span> </span>{

  }
}
</code></pre>
<p>Now, all this work just to get the first part of my <code>red</code> test. What a journey it's been for something as silly as declaring a function.</p>
<p>It was a good reminder just how important the red step in red, green, refactor is.</p>
<p>Happy Testing!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[In App Unit test example with JSPM, React, WinJS and Mocha]]></title>
        <id>http://staxmanade.com/2015/10/in-app-unit-test-example-with-jspm--react--winjs-and-mocha/</id>
        <link href="http://staxmanade.com/2015/10/in-app-unit-test-example-with-jspm--react--winjs-and-mocha/">
        </link>
        <updated>2015-10-08T16:42:00Z</updated>
        <summary type="html"><![CDATA[A while back I wrote about [In App Unit Tests](http://staxmanade.com/2015/03/in-app-unit-tests/) and have been having too much fun creating little [st...]]></summary>
        <content type="html"><![CDATA[<p>A while back I wrote about <a href="http://staxmanade.com/2015/03/in-app-unit-tests/">In App Unit Tests</a> and have been having too much fun creating little <a href="http://staxmanade.com/2015/09/jsmp-systemjs-starter-plunker/">starter plunks</a> on <a href="http://plnkr.co">Plunker</a>. So...</p>
<p>As a simple demonstration on in-app unit tests I've thrown together a little plunk that shows <a href="http://staxmanade.com/2015/03/in-app-unit-tests/">in-app tests</a> within the a <a href="https://github.com/winjs/winjs">WinJS</a> <a href="https://msdn.microsoft.com/en-us/library/windows/apps/dn624879.aspx">Pivot</a>. And add to the layers of abstraction I'm using <a href="https://github.com/winjs/react-winjs">react-winjs</a> which I'm LOVING over normal WinJS development.</p>
<h1>Link to: <a href="http://plnkr.co/edit/feKPEx?p=preview">JSPM/React/WinJS/Mocha Plunk</a></h1>
<p>If you like this starter, I have it and a few more linked here: <a href="http://staxmanade.com/2015/09/jsmp-systemjs-starter-plunker/">for re-use</a></p>
<p>I'd like to highlight <a href="http://plnkr.co/edit/feKPEx?p=preview">this particular starter</a> at bit more in this post, not only because there are a few more concepts to this basic plunk, but also because I'm fairly happy with the MochaJS React component that I've now copied around and re-used a few times in some small projects where use <a href="http://staxmanade.com/2015/03/in-app-unit-tests/">In App Unit Tests</a>.</p>
<h1>Plunker file overview</h1>
<ul>
<li><code>index.html</code> - The index file is a very basic <a href="http://jspm.io">JSPM</a> bootstrap page that loads the <code>app.jsx</code> react component.</li>
<li><code>app.jsx</code> - Defines a WinJS Pivot control where we render the in-app <code>MochaTests.jsx</code> React component. This also defines the test file(s) and using MochaJS's global detection we can tell the react <code>MochaTests</code> component what test files to load and run as well as what globals are allowed to exist.</li>
<li><code>config.js</code> - This is JSPM's config that defines what version of React we're using and to use <code>babel</code> for transpilation.</li>
<li><code>tests.js</code> - is our Mocha set of unit tests. We can have multiple test files if we want, just have to define what files to load in <code>app.jsx</code>.</li>
</ul>
<p>Lastly the <code>MochaTests.jsx</code> which I'll include the full component below:</p>
<blockquote>
<p>easier to copy-paste inherit for myself in the future</p>
</blockquote>
<pre><code><span class="hljs-keyword">import</span> mocha <span class="hljs-keyword">from</span> <span class="hljs-string">'mocha'</span>;
<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MochaTests</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{

    static get propTypes() {
        <span class="hljs-keyword">return</span> {
            testScripts: React.PropTypes.array.isRequired,
            allowedGlobals: React.PropTypes.array
        };
    }

    constructor(props) {
        <span class="hljs-keyword">super</span>(props);
    }

    componentDidMount() {

        <span class="hljs-keyword">var</span> testScripts = <span class="hljs-keyword">this</span>.props.testScripts;
        <span class="hljs-keyword">var</span> runTests = <span class="hljs-keyword">this</span>.runTests.bind(<span class="hljs-keyword">this</span>);

        <span class="hljs-comment">// for some reason importing mocha with JSPM and ES6 doesn't</span>
        <span class="hljs-comment">// place the mocha globals on the window object. The below</span>
        <span class="hljs-comment">// handles that for us - as well as setting up the rest of the</span>
        <span class="hljs-comment">// test scripts for the first run</span>
        mocha.suite.on(<span class="hljs-string">'pre-require'</span>, context =&gt; {
            <span class="hljs-keyword">var</span> exports = <span class="hljs-built_in">window</span>;

            exports.afterEach = context.afterEach || context.teardown;
            exports.after = context.after || context.suiteTeardown;
            exports.beforeEach = context.beforeEach || context.setup;
            exports.before = context.before || context.suiteSetup;
            exports.describe = context.describe || context.suite;
            exports.it = context.it || context.test;
            exports.setup = context.setup || context.beforeEach;
            exports.suiteSetup = context.suiteSetup || context.before;
            exports.suiteTeardown = context.suiteTeardown || context.after;
            exports.suite = context.suite || context.describe;
            exports.teardown = context.teardown || context.afterEach;
            exports.test = context.test || context.it;
            exports.run = context.run;

            <span class="hljs-comment">// now use SystemJS to load all test files</span>
            <span class="hljs-built_in">Promise</span>
            .all(testScripts.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">testScript</span>) </span>{
                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Adding Mocha Test File: "</span>, testScript);
                <span class="hljs-keyword">return</span> System.import(testScript);
            })).then(runTests, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>{
                <span class="hljs-built_in">console</span>.error(<span class="hljs-string">"Error loading test modules"</span>);
                <span class="hljs-built_in">console</span>.error(err);
            });

        });
        mocha.setup(<span class="hljs-string">'bdd'</span>);
    }

    runTests() {
        <span class="hljs-keyword">var</span> allowedGlobals = <span class="hljs-keyword">this</span>.props.allowedGlobals || [];

        <span class="hljs-keyword">this</span>.refs.mocha.getDOMNode().innerHTML = <span class="hljs-string">""</span>;

        mocha.checkLeaks();
        mocha.globals(allowedGlobals);
        mocha.run();

    }

    render() {
        <span class="hljs-keyword">return</span> (
            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">style</span>&gt;</span><span class="css"><span class="hljs-rules">{"\
                  #mocha-stats em { \
                      <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> inherit</span></span>; \
                  }</span> \
                  <span class="hljs-id">#mocha-stats</span> <span class="hljs-rules">{ \
                    <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> inherit</span></span>; \
                  }</span>\
                  <span class="hljs-id">#mocha</span> <span class="hljs-class">.test</span><span class="hljs-class">.fail</span> <span class="hljs-tag">pre</span> <span class="hljs-rules">{ \
                      <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> red</span></span>; \
                  }</span> \
                "}</span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span>

                <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{this.runTests.bind(this)}</span>&gt;</span>Rerun Tests<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>

                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"mocha"</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"mocha"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        )</span>;
    }
}
</code></pre>
<p>Usage example of this React <code>MochaTests</code> component.</p>
<pre><code>// <span class="hljs-type">Define</span> what test files get loaded by the <span class="hljs-type">MochaTests</span> component
<span class="hljs-keyword">var</span> testScripts = [
  './tests.js'
];


<span class="hljs-keyword">var</span> allowedTestGlobals = [
  // <span class="hljs-type">Declare</span> what globals are allowed to be created during <span class="hljs-type">any</span> test runs.
];


// <span class="hljs-type">Usage</span> <span class="hljs-keyword">of</span> <span class="hljs-type">MochaTests</span> <span class="hljs-keyword">in</span> a react render() <span class="hljs-keyword">method</span>.
&lt;<span class="hljs-type">MochaTests</span> testScripts={testScripts} allowedGlobals={allowedTestGlobals} /&gt;

</code></pre>
<p>I'm not expecting to see a large up-tick in WinJS apps out there with in-app unit tests that run in the browser, however hopefully the <code>MochaTests.jsx</code> React Component is of value to you and can be utilized outside of WinJS within almost any React app.</p>
<p>Please drop a line if you end up using it or if it can be adapted. If there's value in the component, maybe</p>
<h1>Known Issue</h1>
<p>If the number of tests starts to go beyond the height of the pivot in this sample, it has an issue where the WinJS Pivot cuts off at the bottom not allowing you to scroll and see the rest of the test output. I haven't dug into it yet because I've been clicking the <code>failures: X</code> link and it filters the U.I. to just the erroring tests.</p>
<p>If you happen to come up with a good solution, drop me a note - I'd love it. Thanks in advance!</p>
<p>Happy Testing!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Habit of a Solid Developer - Part 5 - Update or Add Documentation while Reading Code]]></title>
        <id>http://staxmanade.com/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/</id>
        <link href="http://staxmanade.com/2015/10/habit-of-a-solid-developer-update-or-add-documentation-while-reading-code/">
        </link>
        <updated>2015-10-02T06:20:41Z</updated>
        <summary type="html"><![CDATA[A series of posts about Habit of a Solid Developer - Part 5 - Update or Add Documentation while Reading Code]]></summary>
        <content type="html"><![CDATA[<p>﻿
<div class="seriesNote">
    <p>This article is <strong>Part 5</strong> of <strong>11</strong> in a series about <strong>Habit of a Solid Developer</strong>.</p>
    <ul>
        <li>
            Part 1 - <a href="/2015/08/habit-of-a-solid-developer-introduction/">Introduction</a>
        </li>
        <li>
            Part 2 - <a href="/2015/09/habit-of-a-solid-developer-automatically-enforce-project-conventions/">Automatically Enforce Project Conventions</a>
        </li>
        <li>
            Part 3 - <a href="/2015/09/habit-of-a-solid-developer-self-prescribed-code-reviews/">Self Prescribed Code Reviews</a>
        </li>
        <li>
            Part 4 - <a href="/2015/09/habit-of-a-solid-developer-git-dance/">Git Dance</a>
        </li>
        <li>
            Part 5 - (current) - Update or Add Documentation while Reading Code
        </li>
        <li>
            Part 6 - <a href="/2015/10/habit-of-a-solid-developer-dig-a-little-deeper/">Dig a Little Deeper</a>
        </li>
        <li>
            Part 7 - <a href="/2015/11/habit-of-a-solid-developer-changes-should-be-taken-with-baby-steps/">Changes Should be Taken with Baby Steps</a>
        </li>
        <li>
            Part 8 - <a href="/2015/11/habit-of-a-solid-developer-podcasts/">Podcasts</a>
        </li>
        <li>
            Part 9 - <a href="/2016/01/habit-of-a-solid-developer-rapid-feedback/">Rapid Feedback</a>
        </li>
    </ul>
</div></p>
<p>While I generally sit on the side of the fence that your code should <strong>read clearly</strong> enough that comments should not be necessary. I concede that there are (often) times when a comment can really help to make the job of understanding the code much easier than just how a variable or method is named or organized.</p>
<p>One example of such case is when you've gotten lost in the code and don't understand how a piece of it works.</p>
<p>The second you figure or re-discover it's intent, <strong>try to add or update some comments</strong> in the code that may help you or the next person understand it more clearly in the future.</p>
<p>You can argue that a comment should have been added initially, but life happens and we don't always save little nuances like we should or we're given a codebase that is not as clean as we would like. So if you catch yourself digging through some code and a bit confused in an area, take the time to document it (once you figure out what you didn't understand).</p>
<p>This is especially true when you are the original writer of sed un-clear code. I know I've gone through code I've written and been like, &quot;hmm, no idea what I was thinking here...&quot; or &quot;well, there was a reason I did this stupid thing, but now I don't remember what that was. Wish I would have commented a little more to my future self&quot;.</p>
<p>Sometimes it may be a simple variable rename or refactor that would clean it up. But <strong>don't just figure it out and not leave a breadcrumb</strong> for the next person (or yourself) to more easily grok the code.</p>
<p><strong>Add clarity to un-clear code.</strong></p>
<pre><code><span class="hljs-comment">// When I wrote this, only God and I understood what I was doing</span>
<span class="hljs-comment">// Now, God only knows</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// http://stackoverflow.com/a/316233/1402137</span>
</code></pre>
<h1><a href="http://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered/316233">Now go read these comments</a> and enjoy!</h1>
<p>Happy Understanding!</p>
]]></content>
    </entry>
</feed>